import os
import logging
import uuid
import re
import asyncio

from fastapi import FastAPI, APIRouter, Depends, HTTPException, status, UploadFile, File, Form, BackgroundTasks
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from fastapi.responses import FileResponse
from dotenv import load_dotenv
from starlette.middleware.cors import CORSMiddleware
from starlette.requests import Request
from motor.motor_asyncio import AsyncIOMotorClient
from pathlib import Path
from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any, Literal
from datetime import datetime, timedelta
from passlib.context import CryptContext
from jose import JWTError, jwt
from concurrent.futures import ThreadPoolExecutor
from export_utils import exporter
from cache_service import cache_service
from health_monitor import HealthMonitor

ROOT_DIR = Path(__file__).parent
load_dotenv(ROOT_DIR / '.env')

# MongoDB connection with connection pooling
mongo_url = os.environ['MONGO_URL']
client = AsyncIOMotorClient(
    mongo_url,
    maxPoolSize=100,  # Maximum connections in pool
    minPoolSize=10,   # Minimum connections in pool
    maxIdleTimeMS=30000,  # Close connections after 30 seconds of inactivity
    connectTimeoutMS=20000,  # 20 second connection timeout
    serverSelectionTimeoutMS=20000  # 20 second server selection timeout
)
db = client[os.environ['DB_NAME']]

# Thread pool for CPU-intensive tasks
executor = ThreadPoolExecutor(max_workers=4)

# Initialize health monitor
health_monitor = HealthMonitor(client)

# JWT settings
SECRET_KEY = "your-secret-key-here-change-in-production"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30

# Password context
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/api/auth/login")

# Create the main app without a prefix
app = FastAPI(title="?®Îùº???âÍ? ?úÏä§??, version="2.0.0")

# Î°úÍπÖ ?§Ï†ï
logging.basicConfig(level=logging.INFO) # Ï∂îÍ?
logger = logging.getLogger(__name__) # Ï∂îÍ?

# ?îÏ≤≠ Î°úÍπÖ ÎØ∏Îì§?®Ïñ¥ Ï∂îÍ?
@app.middleware("http")
async def log_requests(request: Request, call_next):
    logger.info(f"Incoming request: {request.method} {request.url}")
    logger.info(f"Request headers: {request.headers}")
    response = await call_next(request)
    logger.info(f"Outgoing response: {response.status_code}")
    return response

# Add CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "http://localhost:3000",
        "http://218.38.240.192:3000",  # ?∏Î? IP ?ëÍ∑º ?àÏö©
        "https://c9538c52-9ad8-41a7-9b0c-0f121f66378a.preview.emergentagent.com"
    ],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Health check endpoint (no prefix)
@app.get("/health")
async def health_check():
    """?¨Ïä§Ï≤¥ÌÅ¨ ?îÎìú?¨Ïù∏??""
    try:
        # MongoDB ?∞Í≤∞ ?ïÏù∏
        await client.admin.command('ping')
        
        # Redis ?∞Í≤∞ ?ïÏù∏ (cache_serviceÎ•??µÌï¥)
        redis_status = "healthy"
        try:
            await cache_service.ping()
        except Exception:
            redis_status = "unhealthy"
        
        return {
            "status": "healthy",
            "timestamp": datetime.utcnow().isoformat(),
            "services": {
                "mongodb": "healthy",
                "redis": redis_status,
                "api": "healthy"
            },
            "version": "2.0.0"
        }
    except Exception as e:
        raise HTTPException(status_code=503, detail=f"Service unhealthy: {str(e)}")

# Database status endpoint
@app.get("/db-status")
async def database_status():
    """?∞Ïù¥?∞Î≤†?¥Ïä§ ?ÅÌÉú ?ïÏù∏ ?îÎìú?¨Ïù∏??""
    try:
        # MongoDB ?ÅÌÉú ?ïÏù∏
        mongodb_status = await client.admin.command('ping')
        
        # Redis ?ÅÌÉú ?ïÏù∏
        redis_status = "healthy"
        redis_info = {}
        try:
            await cache_service.ping()
            redis_info = {"status": "connected", "ping": "pong"}
        except Exception as e:
            redis_status = "unhealthy"
            redis_info = {"status": "disconnected", "error": str(e)}
        
        # ?∞Ïù¥?∞Î≤†?¥Ïä§ ?µÍ≥Ñ
        db_stats = await db.command("dbStats")
        
        return {
            "status": "healthy",
            "timestamp": datetime.utcnow().isoformat(),
            "databases": {
                "mongodb": {
                    "status": "healthy",
                    "ping": mongodb_status,
                    "stats": {
                        "collections": db_stats.get("collections", 0),
                        "dataSize": db_stats.get("dataSize", 0),
                        "storageSize": db_stats.get("storageSize", 0)
                    }
                },
                "redis": {
                    "status": redis_status,
                    "info": redis_info
                }
            }
        }
    except Exception as e:
        raise HTTPException(status_code=503, detail=f"Database unhealthy: {str(e)}")

# API Root endpoint
@app.get("/")
async def root():
    """API Î£®Ìä∏ ?îÎìú?¨Ïù∏??""
    return {
        "message": "?®Îùº???âÍ? ?úÏä§??API",
        "version": "2.0.0",
        "status": "running",
        "timestamp": datetime.utcnow().isoformat(),
        "docs": "/docs",
        "health": "/health",
        "db_status": "/db-status"
    }

# Create a router with the /api prefix
api_router = APIRouter(prefix="/api")

# Models
class User(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    login_id: str
    password_hash: str
    user_name: str
    email: str
    phone: Optional[str] = None
    role: str  # admin, secretary, evaluator
    created_at: datetime = Field(default_factory=datetime.utcnow)
    is_active: bool = True
    last_login: Optional[datetime] = None

class UserCreate(BaseModel):
    login_id: str
    password: str
    user_name: str
    email: str
    role: str
    phone: Optional[str] = None

class EvaluatorCreate(BaseModel):
    user_name: str
    phone: str
    email: str

class SecretarySignupRequest(BaseModel):
    name: str
    phone: str
    email: str
    reason: str

class SecretaryApproval(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    name: str
    phone: str
    email: str
    reason: str
    status: str = "pending"  # pending, approved, rejected
    created_at: datetime = Field(default_factory=datetime.utcnow)
    reviewed_at: Optional[datetime] = None
    reviewed_by: Optional[str] = None

class UserResponse(BaseModel):
    id: str
    login_id: str
    user_name: str
    email: str
    phone: Optional[str] = None
    role: str
    created_at: datetime
    is_active: bool
    last_login: Optional[datetime] = None

class Token(BaseModel):
    access_token: str
    token_type: str
    user: UserResponse

class Project(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    name: str
    description: str
    deadline: datetime
    created_by: str  # secretary ?êÎäî admin user_id
    created_at: datetime = Field(default_factory=datetime.utcnow)
    is_active: bool = True
    total_companies: int = 0
    total_evaluations: int = 0
    completed_evaluations: int = 0

class ProjectCreate(BaseModel):
    name: str
    description: str
    deadline: str
    # created_by???ÖÎ†•Î∞õÏ? ?äÍ≥† ?úÎ≤Ñ?êÏÑú current_user.idÎ°??êÎèô ?†Îãπ

class Company(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    name: str
    business_number: str
    address: str
    project_id: str
    files: List[Dict[str, Any]] = []  # Enhanced file metadata
    created_at: datetime = Field(default_factory=datetime.utcnow)
    evaluation_status: str = "pending"  # pending, in_progress, completed

class CompanyCreate(BaseModel):
    name: str
    business_number: str
    address: str
    project_id: str

class EvaluationItem(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    name: str
    description: str
    max_score: int
    weight: float = 1.0
    project_id: str

class EvaluationItemCreate(BaseModel):
    name: str
    description: str
    max_score: int
    weight: float = 1.0

class SharePermission(BaseModel): # ?àÎ°ú??Î™®Îç∏
    user_id: str
    permission: Literal["view", "edit"]

class EvaluationTemplate(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    name: str
    description: str
    project_id: str
    items: List[EvaluationItem]
    created_by: str
    created_at: datetime = Field(default_factory=datetime.utcnow)
    is_active: bool = True
    version: int = 1
    version_created_at: datetime = Field(default_factory=datetime.utcnow)
    cloned_from: Optional[str] = None
    shared_with: List[SharePermission] = [] # ?Ä??Î≥ÄÍ≤?Î∞?Í∏∞Î≥∏Í∞?[]
    status: str = "draft" # "draft", "active", "archived"
    last_modified: Optional[datetime] = None

class EvaluationTemplateCreate(BaseModel):
    name: str
    description: str
    items: List[EvaluationItemCreate]

class ShareRequest(BaseModel): # ?àÎ°ú??Î™®Îç∏
    user_id: str
    permission: Literal["view", "edit"]

class StatusUpdateRequest(BaseModel): # ?àÎ°ú??Î™®Îç∏
    status: Literal["draft", "active", "archived"]

class EvaluationSheet(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    evaluator_id: str
    company_id: str
    project_id: str
    template_id: str
    status: str  # draft, submitted, reviewed
    deadline: Optional[datetime] = None
    created_at: datetime = Field(default_factory=datetime.utcnow)
    submitted_at: Optional[datetime] = None
    last_modified: datetime = Field(default_factory=datetime.utcnow)
    total_score: Optional[float] = None
    weighted_score: Optional[float] = None
    created_by: Optional[str] = None  # ?âÍ?Î•??ùÏÑ±???¨Ïö©??ID
    is_active: bool = True  # ??†ú ?¨Î? Ï≤¥ÌÅ¨

class EvaluationScore(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    sheet_id: str
    item_id: str
    score: int
    opinion: str
    created_at: datetime = Field(default_factory=datetime.utcnow)

class EvaluationSubmission(BaseModel):
    evaluation_id: str
    user_id: str
    responses: Dict[str, Any]
    total_score: Optional[float] = None
    completion_time: Optional[int] = None  # in seconds

class BulkExportRequest(BaseModel):
    project_id: str
    template_id: Optional[str] = None
    format: str = "excel"  # pdf, excel
    export_type: str = "separate"  # separate, combined

class ExportableEvaluation(BaseModel):
    evaluation_id: str
    project_name: str
    company_name: str
    template_name: str
    evaluator_name: str
    submitted_at: Optional[datetime]
    total_score: Optional[float]
    weighted_score: Optional[float]

class AssignmentCreate(BaseModel):
    evaluator_ids: List[str]
    company_ids: List[str]
    template_id: str
    deadline: Optional[str] = None

class BatchAssignmentCreate(BaseModel):
    assignments: List[AssignmentCreate]

class FileMetadata(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    filename: str
    original_filename: str
    file_path: str
    file_size: int
    file_type: str
    uploaded_by: str
    uploaded_at: datetime = Field(default_factory=datetime.utcnow)
    company_id: str
    is_processed: bool = False

# Utility functions
def verify_password(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)

def get_password_hash(password):
    return pwd_context.hash(password)

def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=15)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt

def generate_evaluator_credentials(name: str, phone: str):
    """Generate login credentials from name and phone"""
    # Remove spaces and special characters from name
    clean_name = re.sub(r'[^Í∞Ä-?£a-zA-Z]', '', name)
    # Remove hyphens and spaces from phone
    clean_phone = re.sub(r'[^0-9]', '', phone)
    
    login_id = f"{clean_name}{clean_phone[-4:]}"  # name + last 4 digits
    password = clean_phone[-8:] if len(clean_phone) >= 8 else clean_phone  # last 8 digits of phone
    
    # Debug logging
    logging.info(f"Generated credentials for {name}: login_id={login_id}, password={password}")
    
    return login_id, password

async def get_current_user(token: str = Depends(oauth2_scheme)):
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="?êÍ≤© Ï¶ùÎ™Ö???ïÏù∏?????ÜÏäµ?àÎã§",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        user_id_from_payload = payload.get("sub")
        if user_id_from_payload is None:
            raise credentials_exception
        user_id: str = str(user_id_from_payload) # Î™ÖÏãú???ïÎ???
    except JWTError:
        raise credentials_exception
    
    user_data = await db.users.find_one({"id": user_id})
    if user_data is None:
        raise credentials_exception
    
    return User(**user_data)

async def get_current_user_optional(token: Optional[str] = Depends(oauth2_scheme)):
    """?†ÌÉù???¨Ïö©???∏Ï¶ù (?†ÌÅ∞???àÏúºÎ©?Í≤ÄÏ¶? ?ÜÏúºÎ©?None Î∞òÌôò)"""
    if not token:
        return None
    
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        user_id_from_payload = payload.get("sub")
        if user_id_from_payload is None:
            return None # ?†ÌÅ∞???†Ìö®?òÏ? ?äÍ±∞??user_idÎ•??¨Ìï®?òÏ? ?äÏùå
        user_id: str = str(user_id_from_payload) # Î™ÖÏãú???ïÎ???
            
        user_data = await db.users.find_one({"id": user_id})
        if user_data is None:
            return None # ?¨Ïö©?êÎ? Ï∞æÏùÑ ???ÜÏùå
            
        return User(**user_data) # ?¨Ïö©???ïÏù∏ Î∞?Í≤ÄÏ¶??ÑÎ£å
    except JWTError:
        return None # ?†ÌÅ∞ ?îÏΩî???§Ìå®

def check_admin_or_secretary(user: User):
    if user.role not in ["admin", "secretary"]:
        raise HTTPException(status_code=403, detail="Í¥ÄÎ¶¨Ïûê ?êÎäî Í∞ÑÏÇ¨Îß??ëÍ∑º?????àÏäµ?àÎã§")

async def calculate_evaluation_scores(sheet_id: str, scores_data: List[Dict[str, Any]]):
    """Calculate total and weighted scores"""
    template_data = await db.evaluation_sheets.find_one({"id": sheet_id})
    if not template_data:
        return 0, 0
    
    template = await db.evaluation_templates.find_one({"id": template_data["template_id"]})
    if not template:
        return 0, 0
    
    total_score = 0
    weighted_total = 0
    total_weight = 0
    
    for score_data in scores_data:
        item = next((item for item in template["items"] if item["id"] == score_data["item_id"]), None)
        if item:
            score = score_data["score"]
            weight = item["weight"]
            total_score += score
            weighted_total += score * weight
            total_weight += weight
    
    avg_total_score = total_score / len(scores_data) if scores_data else 0
    avg_weighted_score = weighted_total / total_weight if total_weight > 0 else 0
    
    return avg_total_score, avg_weighted_score

async def update_project_statistics(project_id: str):
    """Update project statistics asynchronously"""
    companies_count = await db.companies.count_documents({"project_id": project_id})
    evaluations_count = await db.evaluation_sheets.count_documents({"project_id": project_id})
    completed_count = await db.evaluation_sheets.count_documents({
        "project_id": project_id, 
        "status": "submitted"
    })
      await db.projects.update_one(
        {"id": project_id},
        {"$set": {
            "total_companies": companies_count,
            "total_evaluations": evaluations_count,
            "completed_evaluations": completed_count
        }
    )

async def background_file_processing(file_path: str, file_id: str):
    """Background task for file processing"""
    try:
        # Simulate file processing (virus scan, format validation, etc.)
        await asyncio.sleep(1)
        
        # Mark file as processed
        await db.file_metadata.update_one(
            {"id": file_id},
            {"$set": {"is_processed": True}
        )
        
        logging.info(f"File {file_id} processed successfully")
    except Exception as e:
        logging.error(f"File processing failed for {file_id}: {e}")

# Authentication routes
@api_router.post("/auth/login", response_model=Token)
async def login(form_data: OAuth2PasswordRequestForm = Depends()):
    user_data = await db.users.find_one({"login_id": form_data.username})
    if not user_data or not verify_password(form_data.password, user_data["password_hash"]):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="?ÑÏù¥???êÎäî ÎπÑÎ?Î≤àÌò∏Í∞Ä ?òÎ™ª?òÏóà?µÎãà??,
            headers={"WWW-Authenticate": "Bearer"},
        )
    
    # Update last login time
    await db.users.update_one(
        {"id": user_data["id"]},
        {"$set": {"last_login": datetime.utcnow()}
    )
    
    user = User(**user_data)
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": user.id}, expires_delta=access_token_expires
    )
    user_response = UserResponse(**user.dict())
    return {"access_token": access_token, "token_type": "bearer", "user": user_response}

@api_router.get("/auth/me", response_model=UserResponse)
async def get_current_user_info(current_user: User = Depends(get_current_user)):
    """?ÑÏû¨ Î°úÍ∑∏?∏Ìïú ?¨Ïö©???ïÎ≥¥ Ï°∞Ìöå"""
    return UserResponse(**current_user.dict())

@api_router.post("/auth/secretary-signup")
async def secretary_signup(request: SecretarySignupRequest):
    """Í∞ÑÏÇ¨ ?åÏõêÍ∞Ä???†Ï≤≠"""
    # Ï§ëÎ≥µ ?¥Î©î???êÎäî ?ÑÌôîÎ≤àÌò∏ Ï≤¥ÌÅ¨
    existing_user = await db.users.find_one({
        "$or": [
            {"email": request.email},
            {"phone": request.phone}
        ]
    })
    
    if existing_user:
        raise HTTPException(
            status_code=400,
            detail="?¥Î? ?±Î°ù???¥Î©î???êÎäî ?ÑÌôîÎ≤àÌò∏?ÖÎãà??
        )
    
    # ?¥Î? ?†Ï≤≠???¥Ïó≠???àÎäîÏßÄ Ï≤¥ÌÅ¨
    existing_request = await db.secretary_requests.find_one({
        "$or": [
            {"email": request.email},
            {"phone": request.phone}
        ]
    })
    
    if existing_request:
        raise HTTPException(
            status_code=400,
            detail="?¥Î? ?†Ï≤≠???¥Ïó≠???àÏäµ?àÎã§. Í¥ÄÎ¶¨Ïûê ?πÏù∏??Í∏∞Îã§?§Ï£º?∏Ïöî."
        )
    
    # ?†Ï≤≠ ?¥Ïó≠ ?Ä??
    approval_request = SecretaryApproval(
        name=request.name,
        phone=request.phone,
        email=request.email,
        reason=request.reason
    )
    await db.secretary_requests.insert_one(approval_request.dict())
    return {
        "message": "Í∞ÑÏÇ¨ ?åÏõêÍ∞Ä???†Ï≤≠???ÑÎ£å?òÏóà?µÎãà?? Í¥ÄÎ¶¨Ïûê ?πÏù∏ ??Î°úÍ∑∏?∏Ïù¥ Í∞Ä?•Ìï©?àÎã§.",
        "request_id": approval_request.id
    }

@api_router.get("/admin/secretary-requests")
async def get_secretary_requests(current_user: User = Depends(get_current_user)):
    """Í∞ÑÏÇ¨ ?†Ï≤≠ Î™©Î°ù Ï°∞Ìöå (Í¥ÄÎ¶¨ÏûêÎß?"""
    if current_user.role != "admin":
        raise HTTPException(status_code=403, detail="Í¥ÄÎ¶¨ÏûêÎß??ëÍ∑º Í∞Ä?•Ìï©?àÎã§")
    
    requests = await db.secretary_requests.find({"status": "pending"}).to_list(None)
    return requests

@api_router.post("/admin/secretary-requests/{request_id}/approve")
async def approve_secretary_request(
    request_id: str, 
    current_user: User = Depends(get_current_user)
):
    """Í∞ÑÏÇ¨ ?†Ï≤≠ ?πÏù∏ (Í¥ÄÎ¶¨ÏûêÎß?"""
    if current_user.role != "admin":
        raise HTTPException(status_code=403, detail="Í¥ÄÎ¶¨ÏûêÎß??ëÍ∑º Í∞Ä?•Ìï©?àÎã§")
    
    # ?†Ï≤≠ ?¥Ïó≠ Ï∞æÍ∏∞
    request_data = await db.secretary_requests.find_one({"id": request_id})
    if not request_data:
        raise HTTPException(status_code=404, detail="?†Ï≤≠ ?¥Ïó≠??Ï∞æÏùÑ ???ÜÏäµ?àÎã§")
    
    if request_data["status"] != "pending":
        raise HTTPException(status_code=400, detail="?¥Î? Ï≤òÎ¶¨???†Ï≤≠?ÖÎãà??)
    
    # ?¨Ïö©??Í≥ÑÏ†ï ?ùÏÑ±
    user_id = str(uuid.uuid4())
    login_id = request_data["name"]  # ?¥Î¶Ñ??Î°úÍ∑∏??IDÎ°??¨Ïö©
    password_hash = get_password_hash(request_data["phone"].replace("-", ""))  # ?ÑÌôîÎ≤àÌò∏Î•?ÎπÑÎ?Î≤àÌò∏Î°??¨Ïö©
    
    user_data = {
        "id": user_id,
        "login_id": login_id,
        "password_hash": password_hash,
        "user_name": request_data["name"],
        "email": request_data["email"],
        "phone": request_data["phone"],
        "role": "secretary",
        "created_at": datetime.utcnow(),
        "is_active": True
    }
    
    # ?¨Ïö©???ùÏÑ±
    await db.users.insert_one(user_data)
    
    # ?†Ï≤≠ ?ÅÌÉú ?ÖÎç∞?¥Ìä∏
    await db.secretary_requests.update_one(
        {"id": request_id},
        {
            "$set": {
                "status": "approved",
                "reviewed_at": datetime.utcnow(),
                "reviewed_by": current_user.id
            }
        }
    )
    
    return {
        "message": "Í∞ÑÏÇ¨ Í≥ÑÏ†ï???ùÏÑ±?òÏóà?µÎãà??,
        "login_id": login_id,
        "user_id": user_id
    }

@api_router.post("/admin/secretary-requests/{request_id}/reject")
async def reject_secretary_request(
    request_id: str,
    current_user: User = Depends(get_current_user)
):
    """Í∞ÑÏÇ¨ ?†Ï≤≠ Í±∞Î? (Í¥ÄÎ¶¨ÏûêÎß?"""
    if current_user.role != "admin":
        raise HTTPException(status_code=403, detail="Í¥ÄÎ¶¨ÏûêÎß??ëÍ∑º Í∞Ä?•Ìï©?àÎã§")
    
    # ?†Ï≤≠ ?¥Ïó≠ Ï∞æÍ∏∞
    request_data = await db.secretary_requests.find_one({"id": request_id})
    if not request_data:
        raise HTTPException(status_code=404, detail="?†Ï≤≠ ?¥Ïó≠??Ï∞æÏùÑ ???ÜÏäµ?àÎã§")
    
    if request_data["status"] != "pending":
        raise HTTPException(status_code=400, detail="?¥Î? Ï≤òÎ¶¨???†Ï≤≠?ÖÎãà??)
    
    # ?†Ï≤≠ ?ÅÌÉú ?ÖÎç∞?¥Ìä∏
    await db.secretary_requests.update_one(
        {"id": request_id},
        {
            "$set": {
                "status": "rejected",
                "reviewed_at": datetime.utcnow(),
                "reviewed_by": current_user.id
            }
        }
    )
    
    return {"message": "Í∞ÑÏÇ¨ ?†Ï≤≠??Í±∞Î??òÏóà?µÎãà??}

# ===== Í¥ÄÎ¶¨Ïûê???¨Ïö©??Í¥ÄÎ¶?API =====
@api_router.get("/admin/users")
async def get_admin_users(current_user: User = Depends(get_current_user)):
    """Í¥ÄÎ¶¨Ïûê???¨Ïö©??Î™©Î°ù Ï°∞Ìöå"""
    if current_user.role != "admin":
        raise HTTPException(status_code=403, detail="Í¥ÄÎ¶¨ÏûêÎß??ëÍ∑º Í∞Ä?•Ìï©?àÎã§")
    
    users = await db.users.find({"is_active": True}).to_list(1000)
    return [
        {
            "id": user.get("id"),
            "username": user.get("login_id"),
            "user_name": user.get("user_name"),
            "email": user.get("email", ""),
            "role": user.get("role"),
            "created_at": user.get("created_at"),
            "is_active": user.get("is_active", True)
        }
        for user in users
    ]

@api_router.post("/admin/users")
async def create_admin_user(
    user_data: dict, 
    current_user: User = Depends(get_current_user)
):
    """Í¥ÄÎ¶¨Ïûê???¨Ïö©???ùÏÑ±"""
    if current_user.role != "admin":
        raise HTTPException(status_code=403, detail="Í¥ÄÎ¶¨ÏûêÎß??ëÍ∑º Í∞Ä?•Ìï©?àÎã§")
    
    # Ï§ëÎ≥µ ?ïÏù∏
    existing_user = await db.users.find_one({"login_id": user_data["username"]})
    if existing_user:
        raise HTTPException(status_code=400, detail="?¥Î? Ï°¥Ïû¨?òÎäî ?¨Ïö©??ID?ÖÎãà??)
    
    # ?¨Ïö©???∞Ïù¥???ùÏÑ±
    user_id = str(uuid.uuid4())
    hashed_password = get_password_hash(user_data["password"])
    
    new_user_data = {
        "id": user_id,
        "login_id": user_data["username"],
        "password_hash": hashed_password,
        "user_name": user_data["user_name"],
        "email": user_data.get("email", ""),
        "role": user_data["role"],
        "created_at": datetime.utcnow(),
        "is_active": True
    }
    
    await db.users.insert_one(new_user_data)
    
    return {
        "id": user_id,
        "username": user_data["username"],
        "user_name": user_data["user_name"],
        "role": user_data["role"],
        "message": "?¨Ïö©?êÍ? ?±Í≥µ?ÅÏúºÎ°??ùÏÑ±?òÏóà?µÎãà??
    }

@api_router.put("/admin/users/{user_id}")
async def update_admin_user(
    user_id: str,
    user_data: dict, 
    current_user: User = Depends(get_current_user)
):
    """Í¥ÄÎ¶¨Ïûê???¨Ïö©???òÏ†ï"""
    if current_user.role != "admin":
        raise HTTPException(status_code=403, detail="Í¥ÄÎ¶¨ÏûêÎß??ëÍ∑º Í∞Ä?•Ìï©?àÎã§")
    
    existing_user = await db.users.find_one({"id": user_id})
    if not existing_user:
        raise HTTPException(status_code=404, detail="?¨Ïö©?êÎ? Ï∞æÏùÑ ???ÜÏäµ?àÎã§")
    
    update_fields = {
        "user_name": user_data["user_name"],
        "role": user_data["role"],
        "email": user_data.get("email", existing_user.get("email")),
        "updated_at": datetime.utcnow()
    }
    
    if "username" in user_data and user_data["username"] != existing_user["login_id"]:
        duplicate_user = await db.users.find_one({"login_id": user_data["username"]})
        if duplicate_user:
            raise HTTPException(status_code=400, detail="?¥Î? Ï°¥Ïû¨?òÎäî ?¨Ïö©??ID?ÖÎãà??)
        update_fields["login_id"] = user_data["username"]
    
    if user_data.get("password"):
        update_fields["password_hash"] = get_password_hash(user_data["password"])
    
    await db.users.update_one(
        {"id": user_id},
        {"$set": update_fields}
    )
    
    return {"message": "?¨Ïö©?êÍ? ?±Í≥µ?ÅÏúºÎ°??òÏ†ï?òÏóà?µÎãà??}

@api_router.delete("/admin/users/{user_id}")
async def delete_admin_user(
    user_id: str,
    current_user: User = Depends(get_current_user)
):
    """Í¥ÄÎ¶¨Ïûê???¨Ïö©????†ú"""
    if current_user.role != "admin":
        raise HTTPException(status_code=403, detail="Í¥ÄÎ¶¨ÏûêÎß??ëÍ∑º Í∞Ä?•Ìï©?àÎã§")

    if user_id == current_user.id:
        raise HTTPException(status_code=400, detail="?êÍ∏∞ ?êÏã†?Ä ??†ú?????ÜÏäµ?àÎã§")
    
    existing_user = await db.users.find_one({"id": user_id})
    if not existing_user:
        raise HTTPException(status_code=404, detail="?¨Ïö©?êÎ? Ï∞æÏùÑ ???ÜÏäµ?àÎã§")
    
    await db.users.update_one(
        {"id": user_id},
        {"$set": {"is_active": False, "deleted_at": datetime.utcnow()}
    )
    
    return {"message": "?¨Ïö©?êÍ? ?±Í≥µ?ÅÏúºÎ°???†ú?òÏóà?µÎãà??}

# ===== Í∞ÑÏÇ¨ Î∞??âÍ??êÏö© API =====
@api_router.get("/secretary/projects")
async def get_secretary_projects(current_user: User = Depends(get_current_user)):
    """Í∞ÑÏÇ¨Í∞Ä Í¥ÄÎ¶¨Ìïò???ÑÎ°ú?ùÌä∏ Î™©Î°ù Ï°∞Ìöå"""
    if current_user.role != "secretary":
        raise HTTPException(status_code=403, detail="Í∞ÑÏÇ¨Îß??ëÍ∑º Í∞Ä?•Ìï©?àÎã§")
    
    projects = await db.projects.find({"created_by": current_user.id}).to_list(100)
    return [
        {
            "id": project.get("id"),
            "name": project.get("name"),
            "description": project.get("description"),
            "deadline": project.get("deadline"),
            "created_at": project.get("created_at"),
            "is_active": project.get("is_active"),
            "total_companies": project.get("total_companies"),
            "total_evaluations": project.get("total_evaluations"),
            "completed_evaluations": project.get("completed_evaluations")
        }
        for project in projects
    ]

@api_router.post("/secretary/projects")
async def create_secretary_project(
    project_data: ProjectCreate,
    current_user: User = Depends(get_current_user)
):
    """?àÎ°ú???ÑÎ°ú?ùÌä∏ ?ùÏÑ±"""
    if current_user.role != "secretary":
        raise HTTPException(status_code=403, detail="Í∞ÑÏÇ¨Îß??ëÍ∑º Í∞Ä?•Ìï©?àÎã§")
    
    project_id = str(uuid.uuid4())
    project = Project(
        id=project_id,
        name=project_data.name,
        description=project_data.description,
        deadline=datetime.strptime(project_data.deadline, "%Y-%m-%d %H:%M:%S"),
        created_by=current_user.id
    )
    
    await db.projects.insert_one(project.dict())
    return {"id": project_id, "message": "?ÑÎ°ú?ùÌä∏Í∞Ä ?±Í≥µ?ÅÏúºÎ°??ùÏÑ±?òÏóà?µÎãà??}

@api_router.put("/secretary/projects/{project_id}")
async def update_secretary_project(
    project_id: str,
    project_data: ProjectCreate,
    current_user: User = Depends(get_current_user)
):
    """?ÑÎ°ú?ùÌä∏ ?ïÎ≥¥ ?òÏ†ï"""
    if current_user.role != "secretary":
        raise HTTPException(status_code=403, detail="Í∞ÑÏÇ¨Îß??ëÍ∑º Í∞Ä?•Ìï©?àÎã§")
    
    result = await db.projects.update_one(
        {"id": project_id, "created_by": current_user.id},
        {"$set": {
            "name": project_data.name,
            "description": project_data.description,
            "deadline": datetime.strptime(project_data.deadline, "%Y-%m-%d %H:%M:%S"),
            "updated_at": datetime.utcnow()
        }
    )
    
    if result.modified_count == 0:
        raise HTTPException(status_code=404, detail="?ÑÎ°ú?ùÌä∏Î•?Ï∞æÏùÑ ???ÜÍ±∞???òÏ†ï??Í∂åÌïú???ÜÏäµ?àÎã§")
    
    return {"message": "?ÑÎ°ú?ùÌä∏Í∞Ä ?±Í≥µ?ÅÏúºÎ°??òÏ†ï?òÏóà?µÎãà??}

@api_router.delete("/secretary/projects/{project_id}")
async def delete_secretary_project(
    project_id: str,
    current_user: User = Depends(get_current_user)
):
    """?ÑÎ°ú?ùÌä∏ ??†ú"""
    if current_user.role != "secretary":
        raise HTTPException(status_code=403, detail="Í∞ÑÏÇ¨Îß??ëÍ∑º Í∞Ä?•Ìï©?àÎã§")

    result = await db.projects.update_one(
        {"id": project_id, "created_by": current_user.id},
        {"$set": {"is_active": False, "deleted_at": datetime.utcnow()}
    )
    
    if result.modified_count == 0:
        raise HTTPException(status_code=404, detail="?ÑÎ°ú?ùÌä∏Î•?Ï∞æÏùÑ ???ÜÍ±∞????†ú??Í∂åÌïú???ÜÏäµ?àÎã§")
    
    return {"message": "?ÑÎ°ú?ùÌä∏Í∞Ä ?±Í≥µ?ÅÏúºÎ°???†ú?òÏóà?µÎãà??}

@api_router.get("/secretary/companies")
async def get_secretary_companies(current_user: User = Depends(get_current_user)):
    """Í∞ÑÏÇ¨Í∞Ä Í¥ÄÎ¶¨Ìïò??Í∏∞ÏóÖ Î™©Î°ù Ï°∞Ìöå"""
    if current_user.role != "secretary":
        raise HTTPException(status_code=403, detail="Í∞ÑÏÇ¨Îß??ëÍ∑º Í∞Ä?•Ìï©?àÎã§")
    
    companies = await db.companies.find({"created_by": current_user.id}).to_list(100)
    return [
        {
            "id": company.get("id"),
            "name": company.get("name"),
            "business_number": company.get("business_number"),
            "address": company.get("address"),
            "project_id": company.get("project_id"),
            "created_at": company.get("created_at"),
            "evaluation_status": company.get("evaluation_status")
        }
        for company in companies
    ]

@api_router.post("/secretary/companies")
async def create_secretary_company(
    company_data: CompanyCreate,
    current_user: User = Depends(get_current_user)
):
    """?àÎ°ú??Í∏∞ÏóÖ ?ùÏÑ±"""
    if current_user.role != "secretary":
        raise HTTPException(status_code=403, detail="Í∞ÑÏÇ¨Îß??ëÍ∑º Í∞Ä?•Ìï©?àÎã§")
    
    company_id = str(uuid.uuid4())
    company = Company(
        id=company_id,
        name=company_data.name,
        business_number=company_data.business_number,
        address=company_data.address,
        project_id=company_data.project_id,
        created_by=current_user.id
    )
    
    await db.companies.insert_one(company.dict())
    return {"id": company_id, "message": "Í∏∞ÏóÖ???±Í≥µ?ÅÏúºÎ°??ùÏÑ±?òÏóà?µÎãà??}

@api_router.put("/secretary/companies/{company_id}")
async def update_secretary_company(
    company_id: str,
    company_data: CompanyCreate,
    current_user: User = Depends(get_current_user)
):    """Í∏∞ÏóÖ ?ïÎ≥¥ ?òÏ†ï"""
    if current_user.role != "secretary":
        raise HTTPException(status_code=403, detail="Í∞ÑÏÇ¨Îß??ëÍ∑º Í∞Ä?•Ìï©?àÎã§")
    
    result = await db.companies.update_one(
        {"id": company_id, "created_by": current_user.id},
        {"$set": {
            "name": company_data.name,
            "business_number": company_data.business_number,
            "address": company_data.address,
            "updated_at": datetime.utcnow()
        }
    )
    
    if result.modified_count == 0:
        raise HTTPException(status_code=404, detail="Í∏∞ÏóÖ??Ï∞æÏùÑ ???ÜÍ±∞???òÏ†ï??Í∂åÌïú???ÜÏäµ?àÎã§")
    
    return {"message": "Í∏∞ÏóÖ ?ïÎ≥¥Í∞Ä ?±Í≥µ?ÅÏúºÎ°??òÏ†ï?òÏóà?µÎãà??}

@api_router.delete("/secretary/companies/{company_id}")
async def delete_secretary_company(
    company_id: str,
    current_user: User = Depends(get_current_user)
):
    """Í∏∞ÏóÖ ??†ú"""
    if current_user.role != "secretary":
        raise HTTPException(status_code=403, detail="Í∞ÑÏÇ¨Îß??ëÍ∑º Í∞Ä?•Ìï©?àÎã§")

    result = await db.companies.update_one(
        {"id": company_id, "created_by": current_user.id},
        {"$set": {"is_active": False, "deleted_at": datetime.utcnow()}
    )
    
    if result.modified_count == 0:
        raise HTTPException(status_code=404, detail="Í∏∞ÏóÖ??Ï∞æÏùÑ ???ÜÍ±∞????†ú??Í∂åÌïú???ÜÏäµ?àÎã§")
    
    return {"message": "Í∏∞ÏóÖ???±Í≥µ?ÅÏúºÎ°???†ú?òÏóà?µÎãà??}

@api_router.get("/secretary/evaluations")
async def get_secretary_evaluations(current_user: User = Depends(get_current_user)):
    """Í∞ÑÏÇ¨Í∞Ä Í¥ÄÎ¶¨Ìïò???âÍ? Î™©Î°ù Ï°∞Ìöå"""
    if current_user.role != "secretary":
        raise HTTPException(status_code=403, detail="Í∞ÑÏÇ¨Îß??ëÍ∑º Í∞Ä?•Ìï©?àÎã§")
    
    evaluations = await db.evaluation_sheets.find({"created_by": current_user.id}).to_list(100)
    return [
        {
            "id": evaluation.get("id"),
            "evaluator_id": evaluation.get("evaluator_id"),
            "company_id": evaluation.get("company_id"),
            "project_id": evaluation.get("project_id"),
            "template_id": evaluation.get("template_id"),
            "status": evaluation.get("status"),
            "deadline": evaluation.get("deadline"),
            "created_at": evaluation.get("created_at"),
            "submitted_at": evaluation.get("submitted_at"),
            "total_score": evaluation.get("total_score"),
            "weighted_score": evaluation.get("weighted_score")
        }
        for evaluation in evaluations
    ]

@api_router.post("/secretary/evaluations")
async def create_secretary_evaluation(
    evaluation_data: EvaluationSheet,
    current_user: User = Depends(get_current_user)
):
    """?àÎ°ú???âÍ? ?ùÏÑ±"""
    if current_user.role != "secretary":
        raise HTTPException(status_code=403, detail="Í∞ÑÏÇ¨Îß??ëÍ∑º Í∞Ä?•Ìï©?àÎã§")
    
    evaluation_id = str(uuid.uuid4())
    evaluation = EvaluationSheet(
        id=evaluation_id,
        evaluator_id=evaluation_data.evaluator_id,
        company_id=evaluation_data.company_id,
        project_id=evaluation_data.project_id,
        template_id=evaluation_data.template_id,
        status="draft",
        created_by=current_user.id
    )
    
    await db.evaluation_sheets.insert_one(evaluation.dict())
    return {"id": evaluation_id, "message": "?âÍ?Í∞Ä ?±Í≥µ?ÅÏúºÎ°??ùÏÑ±?òÏóà?µÎãà??}

@api_router.put("/secretary/evaluations/{evaluation_id}")
async def update_secretary_evaluation(
    evaluation_id: str,
    evaluation_data: EvaluationSheet,
    current_user: User = Depends(get_current_user)
):
    """?âÍ? ?ïÎ≥¥ ?òÏ†ï"""
    if current_user.role != "secretary":
        raise HTTPException(status_code=403, detail="Í∞ÑÏÇ¨Îß??ëÍ∑º Í∞Ä?•Ìï©?àÎã§")
      result = await db.evaluation_sheets.update_one(
        {"id": evaluation_id, "created_by": current_user.id},
        {"$set": {
            "evaluator_id": evaluation_data.evaluator_id,
            "company_id": evaluation_data.company_id,
            "project_id": evaluation_data.project_id,
            "template_id": evaluation_data.template_id,
            "status": evaluation_data.status,
            "deadline": evaluation_data.deadline,
            "updated_at": datetime.utcnow()
        }
    )
    
    if result.modified_count == 0:
        raise HTTPException(status_code=404, detail="?âÍ?Î•?Ï∞æÏùÑ ???ÜÍ±∞???òÏ†ï??Í∂åÌïú???ÜÏäµ?àÎã§")
    
    return {"message": "?âÍ? ?ïÎ≥¥Í∞Ä ?±Í≥µ?ÅÏúºÎ°??òÏ†ï?òÏóà?µÎãà??}

@api_router.delete("/secretary/evaluations/{evaluation_id}")
async def delete_secretary_evaluation(
    evaluation_id: str,
    current_user: User = Depends(get_current_user)
):
    """?âÍ? ??†ú"""
    if current_user.role != "secretary":
        raise HTTPException(status_code=403, detail="Í∞ÑÏÇ¨Îß??ëÍ∑º Í∞Ä?•Ìï©?àÎã§")

    result = await db.evaluation_sheets.update_one(
        {"id": evaluation_id, "created_by": current_user.id},
        {"$set": {"is_active": False, "deleted_at": datetime.utcnow()}
    )
    
    if result.modified_count == 0:
        raise HTTPException(status_code=404, detail="?âÍ?Î•?Ï∞æÏùÑ ???ÜÍ±∞????†ú??Í∂åÌïú???ÜÏäµ?àÎã§")
    
    return {"message": "?âÍ?Í∞Ä ?±Í≥µ?ÅÏúºÎ°???†ú?òÏóà?µÎãà??}

@api_router.get("/evaluator/projects")
async def get_evaluator_projects(current_user: User = Depends(get_current_user)):
    """?âÍ??êÍ? Ï∞∏Ïó¨ Ï§ëÏù∏ ?ÑÎ°ú?ùÌä∏ Î™©Î°ù Ï°∞Ìöå"""
    if current_user.role != "evaluator":
        raise HTTPException(status_code=403, detail="?âÍ??êÎßå ?ëÍ∑º Í∞Ä?•Ìï©?àÎã§")
    
    evaluations = await db.evaluation_sheets.find({"evaluator_id": current_user.id}).to_list(100)
    project_ids = list({evaluation["project_id"] for evaluation in evaluations})
    
    projects = await db.projects.find({"id": {"$in": project_ids}).to_list(100)
    return [
        {
            "id": project.get("id"),
            "name": project.get("name"),
            "description": project.get("description"),
            "deadline": project.get("deadline"),
            "created_at": project.get("created_at"),
            "is_active": project.get("is_active"),
            "total_companies": project.get("total_companies"),
            "total_evaluations": project.get("total_evaluations"),
            "completed_evaluations": project.get("completed_evaluations")
        }
        for project in projects
    ]

@api_router.get("/evaluator/companies")
async def get_evaluator_companies(current_user: User = Depends(get_current_user)):
    """?âÍ??êÍ? ?âÍ???Í∏∞ÏóÖ Î™©Î°ù Ï°∞Ìöå"""
    if current_user.role != "evaluator":
        raise HTTPException(status_code=403, detail="?âÍ??êÎßå ?ëÍ∑º Í∞Ä?•Ìï©?àÎã§")
    
    evaluations = await db.evaluation_sheets.find({"evaluator_id": current_user.id}).to_list(100)
    company_ids = list({evaluation["company_id"] for evaluation in evaluations})
    
    companies = await db.companies.find({"id": {"$in": company_ids}).to_list(100)
    return [
        {
            "id": company.get("id"),
            "name": company.get("name"),
            "business_number": company.get("business_number"),
            "address": company.get("address"),
            "project_id": company.get("project_id"),
            "created_at": company.get("created_at"),
            "evaluation_status": company.get("evaluation_status")
        }
        for company in companies
    ]

@api_router.get("/evaluator/evaluations")
async def get_evaluator_evaluations(current_user: User = Depends(get_current_user)):
    """?âÍ??êÍ? ?òÌñâ???âÍ? Î™©Î°ù Ï°∞Ìöå"""
    if current_user.role != "evaluator":
        raise HTTPException(status_code=403, detail="?âÍ??êÎßå ?ëÍ∑º Í∞Ä?•Ìï©?àÎã§")
    
    evaluations = await db.evaluation_sheets.find({"evaluator_id": current_user.id}).to_list(100)
    return [
        {
            "id": evaluation.get("id"),
            "company_id": evaluation.get("company_id"),
            "project_id": evaluation.get("project_id"),
            "template_id": evaluation.get("template_id"),
            "status": evaluation.get("status"),
            "deadline": evaluation.get("deadline"),
            "created_at": evaluation.get("created_at"),
            "submitted_at": evaluation.get("submitted_at"),
            "total_score": evaluation.get("total_score"),
            "weighted_score": evaluation.get("weighted_score")
        }
        for evaluation in evaluations
    ]

@api_router.get("/export/evaluations")
async def export_evaluations(
    project_id: str,
    template_id: Optional[str] = None,
    format: str = "excel",
    export_type: str = "separate",
    current_user: User = Depends(get_current_user)
):
    """?âÍ? Í≤∞Í≥º ?¥Î≥¥?¥Í∏∞"""
    if current_user.role not in ["admin", "secretary"]:
        raise HTTPException(status_code=403, detail="Í¥ÄÎ¶¨Ïûê ?êÎäî Í∞ÑÏÇ¨Îß??ëÍ∑º Í∞Ä?•Ìï©?àÎã§")
    
    # ?ÑÎ°ú?ùÌä∏ Î∞??úÌîåÎ¶??†Ìö®??Í≤Ä??
    project = await db.projects.find_one({"id": project_id})
    if not project:
        raise HTTPException(status_code=404, detail="?ÑÎ°ú?ùÌä∏Î•?Ï∞æÏùÑ ???ÜÏäµ?àÎã§")
    
    if template_id:
        template = await db.evaluation_templates.find_one({"id": template_id})
        if not template:
            raise HTTPException(status_code=404, detail="?úÌîåÎ¶øÏùÑ Ï∞æÏùÑ ???ÜÏäµ?àÎã§")
    
    # ?âÍ???Ï°∞Ìöå
    evaluations = await db.evaluation_sheets.find({"project_id": project_id}).to_list(1000)
    if not evaluations:
        raise HTTPException(status_code=404, detail="?âÍ? Í≤∞Í≥ºÍ∞Ä ?ÜÏäµ?àÎã§")
    
    # ?ëÏ? ?êÎäî PDFÎ°??¥Î≥¥?¥Í∏∞
    if format == "excel":
        # ?ëÏ? ?åÏùºÎ°??¥Î≥¥?¥Í∏∞
        file_path = f"/tmp/evaluations_{project_id}.xlsx"
        await exporter.export_evaluations_to_excel(evaluations, file_path)
        
        return FileResponse(file_path, media_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
    elif format == "pdf":
        # PDF ?åÏùºÎ°??¥Î≥¥?¥Í∏∞
        file_path = f"/tmp/evaluations_{project_id}.pdf"
        await exporter.export_evaluations_to_pdf(evaluations, file_path)
        
        return FileResponse(file_path, media_type="application/pdf")
    else:
        raise HTTPException(status_code=400, detail="ÏßÄ?êÌïòÏßÄ ?äÎäî ?¨Îß∑?ÖÎãà??)

# ===== ?âÍ? ?úÌîåÎ¶?Í¥ÄÎ¶?API =====
@api_router.post("/templates", response_model=EvaluationTemplate)
async def create_template(
    template_data: EvaluationTemplateCreate, 
    current_user: User = Depends(get_current_user)
):
    """?àÎ°ú???âÍ? ?úÌîåÎ¶??ùÏÑ±"""
    check_admin_or_secretary(current_user) # Í∂åÌïú ?ïÏù∏

    # project_id???îÏ≤≠ Î≥∏Î¨∏???ÜÏúºÎØÄÎ°? ?ÑÏãúÎ°?"default_project" ?êÎäî ?§Î•∏ Î°úÏßÅ?ºÎ°ú ?§Ï†ï?¥Ïïº ?©Îãà??
    # ?¨Í∏∞?úÎäî ?àÏãúÎ°?"default_project"Î•??¨Ïö©?©Îãà?? ?§Ï†ú Íµ¨ÌòÑ ?úÏóê???ÅÏ†à??project_idÎ•?Î∞õÏïÑ???©Îãà??
    # ?êÎäî EvaluationTemplateCreate Î™®Îç∏??project_idÎ•?Ï∂îÍ??¥Ïïº ?©Îãà??
    # ???àÏ†ú?êÏÑú??EvaluationTemplateCreate??project_idÍ∞Ä ?ÜÎã§Í≥?Í∞Ä?ïÌïòÍ≥?ÏßÑÌñâ?©Îãà??
    # ?§Ï†ú ?ÑÎ°ú?ùÌä∏?êÏÑú????Î∂ÄÎ∂ÑÏùÑ Î∞òÎìú???òÏ†ï?¥Ïïº ?©Îãà??
    
    # EvaluationItem Í∞ùÏ≤¥ ?ùÏÑ±
    items = []
    for item_data in template_data.items:
        # Í∞???™©??project_idÎ•??†Îãπ?¥Ïïº ?òÏ?Îß? ?ÑÏû¨ EvaluationItemCreate?êÎäî project_id ?ÑÎìúÍ∞Ä ?ÜÏäµ?àÎã§.
        # EvaluationItem Î™®Îç∏?êÎäî project_idÍ∞Ä ?ÑÏàò?ÖÎãà??
        # ??Î∂ÄÎ∂ÑÎèÑ ?§Ï†ú ?ÑÎ°ú?ùÌä∏?êÏÑú???òÏ†ï???ÑÏöî?©Îãà?? ?ÑÏãúÎ°?"default_project" ?¨Ïö©
        items.append(EvaluationItem(
            id=str(uuid.uuid4()), # Í∞??ÑÏù¥?úÏóê??Í≥†Ïú† ID Î∂Ä??
            name=item_data.name,
            description=item_data.description,
            max_score=item_data.max_score,
            weight=item_data.weight,
            project_id="default_project" # ?ÑÏãúÍ∞? ?òÏ†ï ?ÑÏöî
        ))

    new_template = EvaluationTemplate(
        name=template_data.name,
        description=template_data.description,
        project_id="default_project", # ?ÑÏãúÍ∞? ?òÏ†ï ?ÑÏöî
        items=items,
        created_by=current_user.id,
        last_modified=datetime.utcnow() # ?ùÏÑ± ??last_modified ?ÖÎç∞?¥Ìä∏
    )
    await db.evaluation_templates.insert_one(new_template.dict())
    return new_template

@api_router.get("/templates", response_model=List[EvaluationTemplate])
async def get_templates(
    project_id: Optional[str] = None, 
    current_user: User = Depends(get_current_user)
):
    """?âÍ? ?úÌîåÎ¶?Î™©Î°ù Ï°∞Ìöå"""
    query = {}
    if project_id:
        query["project_id"] = project_id
    
    # Í≥µÏú†???úÌîåÎ¶øÎèÑ ?¨Ìï® (Î≥∏Ïù∏???ùÏÑ±?àÍ±∞?? shared_with???êÏã†???àÍ±∞??
    # ?¨Ïö©?êÍ? ?ëÍ∑º?????àÎäî ?úÌîåÎ¶? ?êÏã†???ùÏÑ±?àÍ±∞?? ?êÏã†?êÍ≤å Í≥µÏú†???úÌîåÎ¶?
    # ?êÎäî Í¥ÄÎ¶¨Ïûê/Í∞ÑÏÇ¨??Î™®Îì† ?úÌîåÎ¶?Ï°∞Ìöå Í∞Ä??(?†ÌÉù??
    if current_user.role not in ["admin", "secretary"]:
        query["$or"] = [
            {"created_by": current_user.id},
            {"shared_with": {"$elemMatch": {"user_id": current_user.id}} 
        ]

    templates = await db.evaluation_templates.find(query).to_list(1000)
    return templates

@api_router.get("/templates/{template_id}", response_model=EvaluationTemplate)
async def get_template(template_id: str, current_user: User = Depends(get_current_user)):
    """?πÏ†ï ?âÍ? ?úÌîåÎ¶?Ï°∞Ìöå"""
    template = await db.evaluation_templates.find_one({"id": template_id})
    if not template:
        raise HTTPException(status_code=404, detail="?úÌîåÎ¶øÏùÑ Ï∞æÏùÑ ???ÜÏäµ?àÎã§")
    
    # ?ëÍ∑º Í∂åÌïú ?ïÏù∏
    if current_user.role not in ["admin", "secretary"] and \
       template["created_by"] != current_user.id and \
       not any(s["user_id"] == current_user.id for s in template.get("shared_with", [])):
        raise HTTPException(status_code=403, detail="?úÌîåÎ¶øÏóê ?ëÍ∑º??Í∂åÌïú???ÜÏäµ?àÎã§")
        
    return template

@api_router.put("/templates/{template_id}", response_model=EvaluationTemplate)
async def update_template(
    template_id: str, 
    template_data: EvaluationTemplateCreate, 
    current_user: User = Depends(get_current_user)
):
    """?âÍ? ?úÌîåÎ¶??òÏ†ï"""
    existing_template_doc = await db.evaluation_templates.find_one({"id": template_id})
    if not existing_template_doc:
        raise HTTPException(status_code=404, detail="?úÌîåÎ¶øÏùÑ Ï∞æÏùÑ ???ÜÏäµ?àÎã§")

    existing_template = EvaluationTemplate(**existing_template_doc)

    # ?òÏ†ï Í∂åÌïú ?ïÏù∏
    can_edit = False
    if current_user.role in ["admin", "secretary"]:
        can_edit = True
    elif existing_template.created_by == current_user.id:
        can_edit = True
    elif any(s.user_id == current_user.id and s.permission == "edit" for s in existing_template.shared_with):
        can_edit = True

    if not can_edit:
        raise HTTPException(status_code=403, detail="?úÌîåÎ¶øÏùÑ ?òÏ†ï??Í∂åÌïú???ÜÏäµ?àÎã§")

    # EvaluationItem Í∞ùÏ≤¥ ?ÖÎç∞?¥Ìä∏ ?êÎäî ?ùÏÑ±
    updated_items = []
    for item_data in template_data.items:
        # ???àÏ†ú?êÏÑú??EvaluationItemCreate??IDÍ∞Ä ?ÜÏúºÎØÄÎ°? ??ÉÅ ?àÎ°ú ÎßåÎì†?§Í≥† Í∞Ä?ïÌï©?àÎã§.
        # ?§Ï†úÎ°úÎäî IDÎ•?Í∏∞Ï??ºÎ°ú Í∏∞Ï°¥ ?ÑÏù¥?úÏùÑ Ï∞æÏïÑ ?ÖÎç∞?¥Ìä∏?òÍ±∞?? ???ÑÏù¥?úÏùÑ Ï∂îÍ??¥Ïïº ?©Îãà??
        updated_items.append(EvaluationItem(
            id=str(uuid.uuid4()), # ???ÑÏù¥?úÏúºÎ°?Í∞ÑÏ£º?òÍ≥† ??ID Î∂Ä??
            name=item_data.name,
            description=item_data.description,
            max_score=item_data.max_score,
            weight=item_data.weight,
            project_id=existing_template.project_id # Í∏∞Ï°¥ ?úÌîåÎ¶øÏùò project_id ?¨Ïö©
        ))

    update_fields = {
        "name": template_data.name,
        "description": template_data.description,
        "items": [item.dict() for item in updated_items],
        "last_modified": datetime.utcnow(),
        "version": existing_template.version + 1, # Î≤ÑÏ†Ñ Ï¶ùÍ?
        "version_created_at": datetime.utcnow()
    }
    
    await db.evaluation_templates.update_one({"id": template_id}, {"$set": update_fields})
    updated_template_doc = await db.evaluation_templates.find_one({"id": template_id})
    return EvaluationTemplate(**updated_template_doc)

@api_router.delete("/templates/{template_id}", status_code=status.HTTP_204_NO_CONTENT)
async def delete_template(template_id: str, current_user: User = Depends(get_current_user)):
    """?âÍ? ?úÌîåÎ¶???†ú"""
    template = await db.evaluation_templates.find_one({"id": template_id})
    if not template:
        raise HTTPException(status_code=404, detail="?úÌîåÎ¶øÏùÑ Ï∞æÏùÑ ???ÜÏäµ?àÎã§")

    # ??†ú Í∂åÌïú ?ïÏù∏ (?ùÏÑ±???êÎäî Í¥ÄÎ¶¨Ïûê/Í∞ÑÏÇ¨)
    if current_user.role not in ["admin", "secretary"] and template["created_by"] != current_user.id:
        raise HTTPException(status_code=403, detail="?úÌîåÎ¶øÏùÑ ??†ú??Í∂åÌïú???ÜÏäµ?àÎã§")

    # ?§Ï†ú ??†ú ?Ä??is_activeÎ•?falseÎ°?Î≥ÄÍ≤ΩÌïòÍ±∞ÎÇò statusÎ•?"archived"Î°?Î≥ÄÍ≤ΩÌïò??Í≤ÉÏùÑ Í≥†Î†§
    # ?¨Í∏∞?úÎäî statusÎ•?"archived"Î°?Î≥ÄÍ≤?
    # result = await db.evaluation_templates.delete_one({"id": template_id})
    result = await db.evaluation_templates.update_one(
        {"id": template_id},
        {"$set": {"status": "archived", "is_active": False, "last_modified": datetime.utcnow()}
    )
    
    if result.modified_count == 0:
        raise HTTPException(status_code=404, detail="?úÌîåÎ¶øÏùÑ Ï∞æÏùÑ ???ÜÍ±∞????†ú??Í∂åÌïú???ÜÏäµ?àÎã§")
    
    return {"message": "?úÌîåÎ¶øÏù¥ ?±Í≥µ?ÅÏúºÎ°???†ú?òÏóà?µÎãà??}

@api_router.patch("/templates/{template_id}/status", response_model=EvaluationTemplate)
async def update_template_status(
    template_id: str, 
    status_update: StatusUpdateRequest, 
    current_user: User = Depends(get_current_user)
):
    """?úÌîåÎ¶??ÅÌÉú Î≥ÄÍ≤?(draft, active, archived)"""
    template_doc = await db.evaluation_templates.find_one({"id": template_id})
    if not template_doc:
        raise HTTPException(status_code=404, detail="?úÌîåÎ¶øÏùÑ Ï∞æÏùÑ ???ÜÏäµ?àÎã§")
    
    template = EvaluationTemplate(**template_doc)

    # ?ÅÌÉú Î≥ÄÍ≤?Í∂åÌïú ?ïÏù∏ (?ùÏÑ±???êÎäî Í¥ÄÎ¶¨Ïûê/Í∞ÑÏÇ¨)
    if current_user.role not in ["admin", "secretary"] and template.created_by != current_user.id:
        raise HTTPException(status_code=403, detail="?úÌîåÎ¶??ÅÌÉúÎ•?Î≥ÄÍ≤ΩÌï† Í∂åÌïú???ÜÏäµ?àÎã§")

    update_fields = {"status": status_update.status, "last_modified": datetime.utcnow()}
    if status_update.status == "archived":
        update_fields["is_active"] = False
    elif status_update.status == "active":
        update_fields["is_active"] = True
    # draft ?ÅÌÉú??is_activeÎ•?Î≥ÄÍ≤ΩÌïòÏßÄ ?äÍ±∞?? TrueÎ°??§Ï†ï?????àÏùå (?ïÏ±Ö???∞Îùº)
    # ?¨Í∏∞?úÎäî active???åÎßå TrueÎ°?Î™ÖÏãú?ÅÏúºÎ°??§Ï†ï

    await db.evaluation_templates.update_one(
        {"id": template_id},
        {"$set": update_fields}
    ) # Í¥ÑÌò∏ ?òÏ†ï
    
    updated_template_doc = await db.evaluation_templates.find_one({"id": template_id})
    if not updated_template_doc: # Ï∂îÍ???None Ï≤¥ÌÅ¨
        raise HTTPException(status_code=404, detail="?úÌîåÎ¶??ÅÌÉú ?ÖÎç∞?¥Ìä∏ ??Î¨∏ÏÑúÎ•?Ï∞æÏùÑ ???ÜÏäµ?àÎã§.")
    return EvaluationTemplate(**updated_template_doc)

# ===== Í¥ÄÎ¶¨Ïûê/Í∞ÑÏÇ¨ Í≥µÌÜµ ?ÑÎ°ú?ùÌä∏ Í¥ÄÎ¶?API =====
@api_router.get("/projects")
async def get_projects(current_user: User = Depends(get_current_user)):
    """?ÑÎ°ú?ùÌä∏ Î™©Î°ù Ï°∞Ìöå (Í¥ÄÎ¶¨Ïûê: ?ÑÏ≤¥, Í∞ÑÏÇ¨: Î≥∏Ïù∏ ?ùÏÑ±)"""
    if current_user.role == "admin":
        projects = await db.projects.find({"is_active": True}).to_list(1000)
    elif current_user.role == "secretary":
        projects = await db.projects.find({"created_by": current_user.id, "is_active": True}).to_list(100)
    else:
        raise HTTPException(status_code=403, detail="?ÑÎ°ú?ùÌä∏ Î™©Î°ù Ï°∞Ìöå Í∂åÌïú???ÜÏäµ?àÎã§")
    return [
        {
            "id": project.get("id"),
            "name": project.get("name"),
            "description": project.get("description"),
            "deadline": project.get("deadline"),
            "created_at": project.get("created_at"),
            "is_active": project.get("is_active", True),
            "total_companies": project.get("total_companies", 0),
            "total_evaluations": project.get("total_evaluations", 0),
            "completed_evaluations": project.get("completed_evaluations", 0)
        }
        for project in projects
    ]

@api_router.post("/projects")
async def create_project(
    project_data: ProjectCreate,
    current_user: User = Depends(get_current_user)
):
    """?ÑÎ°ú?ùÌä∏ ?ùÏÑ± (Í¥ÄÎ¶¨Ïûê/Í∞ÑÏÇ¨)"""
    if current_user.role not in ["admin", "secretary"]:
        raise HTTPException(status_code=403, detail="?ÑÎ°ú?ùÌä∏ ?ùÏÑ± Í∂åÌïú???ÜÏäµ?àÎã§")
    project_id = str(uuid.uuid4())
    try:
        deadline_dt = datetime.strptime(project_data.deadline, "%Y-%m-%d")
    except Exception:
        deadline_dt = datetime.utcnow()
    project = Project(
        id=project_id,
        name=project_data.name,
        description=project_data.description,
        deadline=deadline_dt,
        created_by=current_user.id
    )
    await db.projects.insert_one(project.dict())
    return {
        "id": project_id,
        "name": project.name,
        "description": project.description,
        "deadline": project.deadline,
        "created_at": project.created_at,
        "is_active": project.is_active,
        "total_companies": project.total_companies,
        "total_evaluations": project.total_evaluations,
        "completed_evaluations": project.completed_evaluations
    }

@api_router.post("/upload")
async def upload_file(
    company_id: str = Form(...),
    file: UploadFile = File(...),
    current_user: User = Depends(get_current_user)
):
    """Í∏∞ÏóÖÎ≥?PDF/Î¨∏ÏÑú ?åÏùº ?ÖÎ°ú??""
    # Í∂åÌïú Ï≤¥ÌÅ¨: Í¥ÄÎ¶¨Ïûê ?êÎäî Í∞ÑÏÇ¨Îß??ÖÎ°ú??Í∞Ä??
    if current_user.role not in ["admin", "secretary"]:
        raise HTTPException(status_code=403, detail="?åÏùº ?ÖÎ°ú??Í∂åÌïú???ÜÏäµ?àÎã§")

    # Í∏∞ÏóÖ Ï°¥Ïû¨ ?¨Î? ?ïÏù∏
    company = await db.companies.find_one({"id": company_id})
    if not company:
        raise HTTPException(status_code=404, detail="Í∏∞ÏóÖ??Ï∞æÏùÑ ???ÜÏäµ?àÎã§")

    # ?åÏùº ?Ä??Í≤ΩÎ°ú Î∞??¥Î¶Ñ ?ùÏÑ±
    upload_dir = ROOT_DIR / "uploads"
    os.makedirs(upload_dir, exist_ok=True)
    file_id = str(uuid.uuid4())
    ext = os.path.splitext(file.filename)[-1]
    save_name = f"{file_id}{ext}"
    save_path = upload_dir / save_name

    # ?åÏùº ?Ä??
    with open(save_path, "wb") as f:
        content = await file.read()
        f.write(content)

    # ?åÏùº Î©îÌ??∞Ïù¥???Ä??
    file_meta = FileMetadata(
        id=file_id,
        filename=save_name,
        original_filename=file.filename,
        file_path=str(save_path),
        file_size=len(content),
        file_type=file.content_type,
        uploaded_by=current_user.id,
        company_id=company_id
    )
    await db.file_metadata.insert_one(file_meta.dict())

    # Í∏∞ÏóÖ??files ?ÑÎìú???åÏùº ?ïÎ≥¥ Ï∂îÍ?
    await db.companies.update_one(
        {"id": company_id},
        {"$push": {"files": file_meta.dict()}
    )

    # Î∞±Í∑∏?ºÏö¥?úÏóê???åÏùº Ï≤òÎ¶¨
    # background_tasks.add_task(background_file_processing, str(save_path), file_id)

    return {
        "file_id": file_id,
        "filename": file.filename,
        "file_size": len(content),
        "uploaded_at": file_meta.uploaded_at.isoformat(),
        "message": "?åÏùº ?ÖÎ°ú?úÍ? ?ÑÎ£å?òÏóà?µÎãà??
    }

@api_router.get("/upload/{file_id}")
async def get_uploaded_file(
    file_id: str,
    current_user: User = Depends(get_current_user_optional)
):
    """?ÖÎ°ú?úÎêú ?åÏùº Ï°∞Ìöå Î∞??§Ïö¥Î°úÎìú"""
    # ?åÏùº Î©îÌ??∞Ïù¥??Ï°∞Ìöå
    file_meta = await db.file_metadata.find_one({"id": file_id})
    if not file_meta:
        raise HTTPException(status_code=404, detail="?åÏùº??Ï∞æÏùÑ ???ÜÏäµ?àÎã§")

    # Í∂åÌïú ?ïÏù∏ (Í¥ÄÎ¶¨Ïûê, Í∞ÑÏÇ¨, ?¥Îãπ Í∏∞ÏóÖ???âÍ???
    if current_user:
        if current_user.role in ["admin", "secretary"]:
            pass  # Í¥ÄÎ¶¨Ïûê/Í∞ÑÏÇ¨??Î™®Îì† ?åÏùº ?ëÍ∑º Í∞Ä??
        elif current_user.role == "evaluator":
            # ?âÍ??êÎäî ?êÏã†???âÍ??òÎäî Í∏∞ÏóÖ???åÏùºÎß??ëÍ∑º Í∞Ä??
            evaluation_sheet = await db.evaluation_sheets.find_one({
                "evaluator_id": current_user.id,
                "company_id": file_meta["company_id"]
            })
            if not evaluation_sheet:
                raise HTTPException(status_code=403, detail="?¥Îãπ ?åÏùº???ëÍ∑º??Í∂åÌïú???ÜÏäµ?àÎã§")
        else:
            raise HTTPException(status_code=403, detail="?åÏùº ?ëÍ∑º Í∂åÌïú???ÜÏäµ?àÎã§")
    else:
        raise HTTPException(status_code=401, detail="Î°úÍ∑∏?∏Ïù¥ ?ÑÏöî?©Îãà??)

    # ?åÏùº Ï°¥Ïû¨ ?¨Î? ?ïÏù∏
    file_path = Path(file_meta["file_path"])
    if not file_path.exists():
        raise HTTPException(status_code=404, detail="?åÏùº??Ï°¥Ïû¨?òÏ? ?äÏäµ?àÎã§")

    return FileResponse(
        path=str(file_path),
        filename=file_meta["original_filename"],
        media_type=file_meta["file_type"]
    )

@api_router.get("/companies/{company_id}/files")
async def get_company_files(
    company_id: str,
    current_user: User = Depends(get_current_user)
):
    """?πÏ†ï Í∏∞ÏóÖ???åÏùº Î™©Î°ù Ï°∞Ìöå"""
    # Í∂åÌïú ?ïÏù∏
    if current_user.role in ["admin", "secretary"]:
        pass  # Í¥ÄÎ¶¨Ïûê/Í∞ÑÏÇ¨??Î™®Îì† Í∏∞ÏóÖ ?åÏùº Ï°∞Ìöå Í∞Ä??
    elif current_user.role == "evaluator":
        # ?âÍ??êÎäî ?êÏã†???âÍ??òÎäî Í∏∞ÏóÖ???åÏùºÎß?Ï°∞Ìöå Í∞Ä??
        evaluation_sheet = await db.evaluation_sheets.find_one({
            "evaluator_id": current_user.id,
            "company_id": company_id
        })
        if not evaluation_sheet:
            raise HTTPException(status_code=403, detail="?¥Îãπ Í∏∞ÏóÖ???åÏùº???ëÍ∑º??Í∂åÌïú???ÜÏäµ?àÎã§")
    else:
        raise HTTPException(status_code=403, detail="?åÏùº Ï°∞Ìöå Í∂åÌïú???ÜÏäµ?àÎã§")

    # Í∏∞ÏóÖ ?åÏùº Î™©Î°ù Ï°∞Ìöå
    files = await db.file_metadata.find({"company_id": company_id}).to_list(None)
    
    return [
        {
            "id": file_data["id"],
            "filename": file_data["original_filename"],
            "file_size": file_data["file_size"],
            "file_type": file_data["file_type"],
            "uploaded_at": file_data["uploaded_at"],
            "uploaded_by": file_data["uploaded_by"],
            "is_processed": file_data.get("is_processed", False)
        }
        for file_data in files
    ]

@api_router.delete("/upload/{file_id}")
async def delete_uploaded_file(
    file_id: str,
    current_user: User = Depends(get_current_user)
):
    """?ÖÎ°ú?úÎêú ?åÏùº ??†ú"""
    # Í¥ÄÎ¶¨Ïûê ?êÎäî Í∞ÑÏÇ¨Îß??åÏùº ??†ú Í∞Ä??
    if current_user.role not in ["admin", "secretary"]:
        raise HTTPException(status_code=403, detail="?åÏùº ??†ú Í∂åÌïú???ÜÏäµ?àÎã§")

    # ?åÏùº Î©îÌ??∞Ïù¥??Ï°∞Ìöå
    file_meta = await db.file_metadata.find_one({"id": file_id})
    if not file_meta:
        raise HTTPException(status_code=404, detail="?åÏùº??Ï∞æÏùÑ ???ÜÏäµ?àÎã§")

    # ?§Ï†ú ?åÏùº ??†ú
    file_path = Path(file_meta["file_path"])
    if file_path.exists():
        os.remove(file_path)

    # ?∞Ïù¥?∞Î≤†?¥Ïä§?êÏÑú ?åÏùº Î©îÌ??∞Ïù¥????†ú
    await db.file_metadata.delete_one({"id": file_id})

    # Í∏∞ÏóÖ??files Î∞∞Ïó¥?êÏÑú ?åÏùº ?ïÎ≥¥ ?úÍ±∞
    await db.companies.update_one(
        {"id": file_meta["company_id"]},
        {"$pull": {"files": {"id": file_id}}
    )

    return {"message": "?åÏùº???±Í≥µ?ÅÏúºÎ°???†ú?òÏóà?µÎãà??}

# ===== ?µÌï© ?âÍ? Í¥ÄÎ¶?API =====
@api_router.get("/evaluations")
async def get_evaluations(
    project_id: Optional[str] = None,
    status: Optional[str] = None,
    current_user: User = Depends(get_current_user)
):
    """??ï†Î≥??âÍ? Î™©Î°ù Ï°∞Ìöå (?µÌï© ?îÎìú?¨Ïù∏??"""
    query = {}
    
    # ??ï†Î≥??ëÍ∑º Í∂åÌïú ?úÏñ¥
    if current_user.role == "admin":
        # Í¥ÄÎ¶¨Ïûê: Î™®Îì† ?âÍ? Ï°∞Ìöå Í∞Ä??
        pass
    elif current_user.role == "secretary":
        # Í∞ÑÏÇ¨: ?êÏã†???ùÏÑ±???âÍ?Îß?Ï°∞Ìöå
        query["created_by"] = current_user.id
    elif current_user.role == "evaluator":
        # ?âÍ??? ?êÏã†?êÍ≤å ?†Îãπ???âÍ?Îß?Ï°∞Ìöå
        query["evaluator_id"] = current_user.id
    else:
        raise HTTPException(status_code=403, detail="?âÍ? Î™©Î°ù Ï°∞Ìöå Í∂åÌïú???ÜÏäµ?àÎã§")
    
    # ?ÑÌÑ∞ Ï°∞Í±¥ Ï∂îÍ?
    if project_id:
        query["project_id"] = project_id
    if status:
        query["status"] = status
    
    # is_activeÍ∞Ä False??(??†ú?? ?âÍ????úÏô∏
    query["is_active"] = {"$ne": False}
    
    evaluations = await db.evaluation_sheets.find(query).to_list(1000)
    return [
        {
            "id": evaluation.get("id"),
            "evaluator_id": evaluation.get("evaluator_id"),
            "company_id": evaluation.get("company_id"),
            "project_id": evaluation.get("project_id"),
            "template_id": evaluation.get("template_id"),
            "status": evaluation.get("status"),
            "deadline": evaluation.get("deadline"),
            "created_at": evaluation.get("created_at"),
            "submitted_at": evaluation.get("submitted_at"),
            "total_score": evaluation.get("total_score"),
            "weighted_score": evaluation.get("weighted_score"),
            "created_by": evaluation.get("created_by"),
            "is_active": evaluation.get("is_active")  # is_active ?ÑÎìú Ï∂îÍ?
        }
        for evaluation in evaluations
    ]

@api_router.post("/evaluations")
async def create_evaluation(
    evaluation_data: dict,
    current_user: User = Depends(get_current_user)
):
    """?àÎ°ú???âÍ? ?ùÏÑ± (Í¥ÄÎ¶¨Ïûê/Í∞ÑÏÇ¨)"""
    if current_user.role not in ["admin", "secretary"]:
        raise HTTPException(status_code=403, detail="?âÍ? ?ùÏÑ± Í∂åÌïú???ÜÏäµ?àÎã§")
    
    evaluation_id = str(uuid.uuid4())
    evaluation = {
        "id": evaluation_id,
        "evaluator_id": evaluation_data.get("evaluator_id"),
        "company_id": evaluation_data.get("company_id"),
        "project_id": evaluation_data.get("project_id"),
        "template_id": evaluation_data.get("template_id"),
        "status": "draft",
        "deadline": evaluation_data.get("deadline"),
        "created_at": datetime.utcnow(),
        "last_modified": datetime.utcnow(),
        "created_by": current_user.id,
        "is_active": True,
        "total_score": None,
        "weighted_score": None,
        "submitted_at": None
    }
    
    await db.evaluation_sheets.insert_one(evaluation)
    return {"id": evaluation_id, "message": "?âÍ?Í∞Ä ?±Í≥µ?ÅÏúºÎ°??ùÏÑ±?òÏóà?µÎãà??}

@api_router.get("/evaluations/{evaluation_id}")
async def get_evaluation(
    evaluation_id: str,
    current_user: User = Depends(get_current_user)
):
    """?πÏ†ï ?âÍ? Ï°∞Ìöå"""
    evaluation = await db.evaluation_sheets.find_one({"id": evaluation_id, "is_active": {"$ne": False})
    if not evaluation:
        raise HTTPException(status_code=404, detail="?âÍ?Î•?Ï∞æÏùÑ ???ÜÏäµ?àÎã§")
    
    # Í∂åÌïú ?ïÏù∏
    if current_user.role == "admin":
        # Í¥ÄÎ¶¨Ïûê: Î™®Îì† ?âÍ? Ï°∞Ìöå Í∞Ä??
        pass
    elif current_user.role == "secretary":
        # Í∞ÑÏÇ¨: ?êÏã†???ùÏÑ±???âÍ?Îß?Ï°∞Ìöå
        if evaluation.get("created_by") != current_user.id:
            raise HTTPException(status_code=403, detail="?¥Îãπ ?âÍ????ëÍ∑º??Í∂åÌïú???ÜÏäµ?àÎã§")
    elif current_user.role == "evaluator":
        # ?âÍ??? ?êÏã†?êÍ≤å ?†Îãπ???âÍ?Îß?Ï°∞Ìöå
        if evaluation.get("evaluator_id") != current_user.id:
            raise HTTPException(status_code=403, detail="?¥Îãπ ?âÍ????ëÍ∑º??Í∂åÌïú???ÜÏäµ?àÎã§")
    else:
        raise HTTPException(status_code=403, detail="?âÍ? Ï°∞Ìöå Í∂åÌïú???ÜÏäµ?àÎã§")
    
    return {
        "id": evaluation.get("id"),
        "evaluator_id": evaluation.get("evaluator_id"),
        "company_id": evaluation.get("company_id"),
        "project_id": evaluation.get("project_id"),
        "template_id": evaluation.get("template_id"),
        "status": evaluation.get("status"),
        "deadline": evaluation.get("deadline"),
        "created_at": evaluation.get("created_at"),
        "submitted_at": evaluation.get("submitted_at"),
        "total_score": evaluation.get("total_score"),
        "weighted_score": evaluation.get("weighted_score"),
        "created_by": evaluation.get("created_by")
    }

@api_router.put("/evaluations/{evaluation_id}")
async def update_evaluation(
    evaluation_id: str,
    evaluation_data: dict,
    current_user: User = Depends(get_current_user)
):
    """?âÍ? ?ïÎ≥¥ ?òÏ†ï"""
    # Í∏∞Ï°¥ ?âÍ? Ï°∞Ìöå
    existing_evaluation = await db.evaluation_sheets.find_one({"id": evaluation_id, "is_active": {"$ne": False})
    if not existing_evaluation:
        raise HTTPException(status_code=404, detail="?âÍ?Î•?Ï∞æÏùÑ ???ÜÏäµ?àÎã§")
    
    # Í∂åÌïú ?ïÏù∏ Î∞??ÖÎç∞?¥Ìä∏ ?∞Ïù¥???§Ï†ï
    update_data = {"last_modified": datetime.utcnow()}
    
    if current_user.role == "admin":
        # Í¥ÄÎ¶¨Ïûê: Î™®Îì† ?âÍ? ?òÏ†ï Í∞Ä??
        update_data.update({
            key: value for key, value in evaluation_data.items()
            if key in ["evaluator_id", "company_id", "project_id", "template_id", "status", "deadline", "total_score", "weighted_score"]
        })
    elif current_user.role == "secretary":
        # Í∞ÑÏÇ¨: ?êÏã†???ùÏÑ±???âÍ?Îß??òÏ†ï
        if existing_evaluation.get("created_by") != current_user.id:
            raise HTTPException(status_code=403, detail="?¥Îãπ ?âÍ?Î•??òÏ†ï??Í∂åÌïú???ÜÏäµ?àÎã§")
        update_data.update({
            key: value for key, value in evaluation_data.items()
            if key in ["evaluator_id", "company_id", "project_id", "template_id", "status", "deadline", "total_score", "weighted_score"]
        })
    elif current_user.role == "evaluator":
        # ?âÍ??? ?êÏã†?êÍ≤å ?†Îãπ???âÍ????ÅÌÉú?Ä ?êÏàòÎß??òÏ†ï Í∞Ä??
        if existing_evaluation.get("evaluator_id") != current_user.id:
            raise HTTPException(status_code=403, detail="?¥Îãπ ?âÍ?Î•??òÏ†ï??Í∂åÌïú???ÜÏäµ?àÎã§")
        # ?âÍ??êÎäî status, total_score, weighted_scoreÎß??òÏ†ï Í∞Ä??
        allowed_fields = ["status", "total_score", "weighted_score"]
        update_data.update({
            key: value for key, value in evaluation_data.items()
            if key in allowed_fields
        })
    else:
        raise HTTPException(status_code=403, detail="?âÍ? ?òÏ†ï Í∂åÌïú???ÜÏäµ?àÎã§")
    
    # ?úÏ∂ú ?ÅÌÉú????submitted_at ?§Ï†ï
    if evaluation_data.get("status") == "submitted":
        update_data["submitted_at"] = datetime.utcnow()
    
    result = await db.evaluation_sheets.update_one(
        {"id": evaluation_id},
        {"$set": update_data}
    )
    
    if result.modified_count == 0:
        raise HTTPException(status_code=404, detail="?âÍ? ?òÏ†ï???§Ìå®?àÏäµ?àÎã§")
    
    return {"message": "?âÍ? ?ïÎ≥¥Í∞Ä ?±Í≥µ?ÅÏúºÎ°??òÏ†ï?òÏóà?µÎãà??}

@api_router.delete("/evaluations/{evaluation_id}")
async def delete_evaluation(
    evaluation_id: str,
    current_user: User = Depends(get_current_user)
):
    """?âÍ? ??†ú (Í¥ÄÎ¶¨Ïûê/Í∞ÑÏÇ¨)"""
    if current_user.role not in ["admin", "secretary"]:
        raise HTTPException(status_code=403, detail="?âÍ? ??†ú Í∂åÌïú???ÜÏäµ?àÎã§")
    
    # Í∏∞Ï°¥ ?âÍ? Ï°∞Ìöå
    existing_evaluation = await db.evaluation_sheets.find_one({"id": evaluation_id, "is_active": {"$ne": False})
    if not existing_evaluation:
        raise HTTPException(status_code=404, detail="?âÍ?Î•?Ï∞æÏùÑ ???ÜÏäµ?àÎã§")
    
    # Í∞ÑÏÇ¨??Í≤ΩÏö∞ ?êÏã†???ùÏÑ±???âÍ?Îß???†ú Í∞Ä??
    if current_user.role == "secretary":
        if existing_evaluation.get("created_by") != current_user.id:
            raise HTTPException(status_code=403, detail="?¥Îãπ ?âÍ?Î•???†ú??Í∂åÌïú???ÜÏäµ?àÎã§")
    
    result = await db.evaluation_sheets.update_one(
        {"id": evaluation_id},
        {"$set": {"is_active": False, "deleted_at": datetime.utcnow()}
    )
    
    if result.modified_count == 0:
        raise HTTPException(status_code=404, detail="?âÍ? ??†ú???§Ìå®?àÏäµ?àÎã§")
    
    return {"message": "?âÍ?Í∞Ä ?±Í≥µ?ÅÏúºÎ°???†ú?òÏóà?µÎãà??}

# ===== ?àÎ°ú???âÍ? ?úÏ∂ú Î∞?Í≤∞Í≥º API =====
@api_router.post("/evaluations/submit")
async def submit_evaluation(
    submission: EvaluationSubmission,
    current_user: User = Depends(get_current_user)
):
    """?âÍ? ?ëÎãµ ?úÏ∂ú"""
    try:
        # Í∏∞Ï°¥ ?âÍ? ?ïÏù∏
        evaluation = await db.evaluation_sheets.find_one({"id": submission.evaluation_id})
        if not evaluation:
            raise HTTPException(status_code=404, detail="?âÍ?Î•?Ï∞æÏùÑ ???ÜÏäµ?àÎã§")
        
        # Í∂åÌïú ?ïÏù∏ (?âÍ???Î≥∏Ïù∏Îß??úÏ∂ú Í∞Ä??
        if current_user.role == "evaluator" and evaluation.get("evaluator_id") != current_user.id:
            raise HTTPException(status_code=403, detail="?¥Îãπ ?âÍ?Î•??úÏ∂ú??Í∂åÌïú???ÜÏäµ?àÎã§")
        
        # ?úÏ∂ú ?∞Ïù¥???ùÏÑ±
        submission_id = str(uuid.uuid4())
        submission_data = {
            "id": submission_id,
            "evaluation_id": submission.evaluation_id,
            "user_id": submission.user_id,
            "responses": submission.responses,
            "total_score": submission.total_score,
            "completion_time": submission.completion_time,
            "submitted_at": datetime.utcnow(),
            "submitted_by": current_user.id
        }
        
        # ?úÏ∂ú ?∞Ïù¥???Ä??
        await db.evaluation_submissions.insert_one(submission_data)
        
        # ?âÍ? ?ÅÌÉú ?ÖÎç∞?¥Ìä∏
        await db.evaluation_sheets.update_one(
            {"id": submission.evaluation_id},
            {"$set": {
                "status": "submitted",
                "submitted_at": datetime.utcnow(),
                "total_score": submission.total_score
            }
        )
        
        return {
            "message": "?âÍ?Í∞Ä ?±Í≥µ?ÅÏúºÎ°??úÏ∂ú?òÏóà?µÎãà??,
            "submission_id": submission_id,
            "submitted_at": submission_data["submitted_at"]
        }
        
    except Exception as e:
        if isinstance(e, HTTPException):
            raise e
        raise HTTPException(status_code=500, detail=f"?âÍ? ?úÏ∂ú Ï§??§Î•òÍ∞Ä Î∞úÏÉù?àÏäµ?àÎã§: {str(e)}")

@api_router.get("/evaluations/results/{evaluation_id}")
async def get_evaluation_results(
    evaluation_id: str,
    current_user: User = Depends(get_current_user)
):
    """?âÍ? Í≤∞Í≥º Ï°∞Ìöå"""
    try:
        # ?âÍ? Í∏∞Î≥∏ ?ïÎ≥¥ Ï°∞Ìöå
        evaluation = await db.evaluation_sheets.find_one({"id": evaluation_id})
        if not evaluation:
            raise HTTPException(status_code=404, detail="?âÍ?Î•?Ï∞æÏùÑ ???ÜÏäµ?àÎã§")
        
        # Í∂åÌïú ?ïÏù∏
        if current_user.role == "evaluator" and evaluation.get("evaluator_id") != current_user.id:
            raise HTTPException(status_code=403, detail="?¥Îãπ ?âÍ? Í≤∞Í≥º???ëÍ∑º??Í∂åÌïú???ÜÏäµ?àÎã§")
        elif current_user.role == "secretary" and evaluation.get("created_by") != current_user.id:
            raise HTTPException(status_code=403, detail="?¥Îãπ ?âÍ? Í≤∞Í≥º???ëÍ∑º??Í∂åÌïú???ÜÏäµ?àÎã§")
        
        # ?úÏ∂ú???ëÎãµ Ï°∞Ìöå
        submission = await db.evaluation_submissions.find_one({"evaluation_id": evaluation_id})
        
        return {
            "evaluation_id": evaluation_id,
            "status": evaluation.get("status"),
            "total_score": evaluation.get("total_score"),
            "weighted_score": evaluation.get("weighted_score"),
            "submitted_at": evaluation.get("submitted_at"),
            "responses": submission.get("responses", {}) if submission else {},
            "completion_time": submission.get("completion_time") if submission else None
        }
        
    except Exception as e:
        if isinstance(e, HTTPException):
            raise e
        raise HTTPException(status_code=500, detail=f"?âÍ? Í≤∞Í≥º Ï°∞Ìöå Ï§??§Î•òÍ∞Ä Î∞úÏÉù?àÏäµ?àÎã§: {str(e)}")

@api_router.get("/evaluations/user/{user_id}")
async def get_user_evaluations(
    user_id: str,
    current_user: User = Depends(get_current_user)
):
    """?¨Ïö©?êÎ≥Ñ ?âÍ? Î™©Î°ù Ï°∞Ìöå"""
    try:
        # Í∂åÌïú ?ïÏù∏ (Î≥∏Ïù∏ ?êÎäî Í¥ÄÎ¶¨Ïûê/Í∞ÑÏÇ¨Îß?Ï°∞Ìöå Í∞Ä??
        if current_user.role == "evaluator" and current_user.id != user_id:
            raise HTTPException(status_code=403, detail="Î≥∏Ïù∏???âÍ?Îß?Ï°∞Ìöå?????àÏäµ?àÎã§")
        
        # ?¨Ïö©???âÍ? Î™©Î°ù Ï°∞Ìöå
        if current_user.role == "evaluator":
            evaluations = await db.evaluation_sheets.find({"evaluator_id": user_id}).to_list(100)
        else:
            # Í¥ÄÎ¶¨Ïûê/Í∞ÑÏÇ¨??Î™®Îì† ?âÍ? Ï°∞Ìöå Í∞Ä??
            evaluations = await db.evaluation_sheets.find({
                "$or": [
                    {"evaluator_id": user_id},
                    {"created_by": user_id}
               
                ]
            }).to_list(100)
        
        return [
            {
                "id": evaluation.get("id"),
                "project_id": evaluation.get("project_id"),
                "company_id": evaluation.get("company_id"),
                "template_id": evaluation.get("template_id"),
                "status": evaluation.get("status"),
                "total_score": evaluation.get("total_score"),
                "deadline": evaluation.get("deadline"),
                "created_at": evaluation.get("created_at"),
                "submitted_at": evaluation.get("submitted_at")
            }
            for evaluation in evaluations
        ]
        
    except Exception as e:
        if isinstance(e, HTTPException):
            raise e
        raise HTTPException(status_code=500, detail=f"?¨Ïö©???âÍ? Î™©Î°ù Ï°∞Ìöå Ï§??§Î•òÍ∞Ä Î∞úÏÉù?àÏäµ?àÎã§: {str(e)}")

@api_router.get("/evaluations/statistics")
async def get_evaluation_statistics(
    current_user: User = Depends(get_current_user)
):
    """?âÍ? ?µÍ≥Ñ Ï°∞Ìöå"""
    try:
        # Í∂åÌïú ?ïÏù∏ (Í¥ÄÎ¶¨Ïûê/Í∞ÑÏÇ¨Îß??ëÍ∑º Í∞Ä??
        if current_user.role not in ["admin", "secretary"]:
            raise HTTPException(status_code=403, detail="?µÍ≥Ñ Ï°∞Ìöå Í∂åÌïú???ÜÏäµ?àÎã§")
        
        # ?ÑÏ≤¥ ?âÍ? ?µÍ≥Ñ
        total_evaluations = await db.evaluation_sheets.count_documents({"is_active": {"$ne": False})
        completed_evaluations = await db.evaluation_sheets.count_documents({"status": "submitted"})
        draft_evaluations = await db.evaluation_sheets.count_documents({"status": "draft"})
        in_progress_evaluations = await db.evaluation_sheets.count_documents({"status": "in_progress"})
        
        # ?âÍ∑† ?êÏàò Í≥ÑÏÇ∞
        pipeline = [
            {"$match": {"status": "submitted", "total_score": {"$ne": None}},
            {"$group": {"_id": None, "avg_score": {"$avg": "$total_score"}}
        ]
        avg_result = await db.evaluation_sheets.aggregate(pipeline).to_list(1)
        average_score = avg_result[0]["avg_score"] if avg_result else 0
        
        # ?ÑÎ£å??Í≥ÑÏÇ∞
        completion_rate = (completed_evaluations / total_evaluations * 100) if total_evaluations > 0 else 0
          # ?ÑÎ°ú?ùÌä∏Î≥??µÍ≥Ñ
        project_pipeline = [
            {"$match": {"is_active": {"$ne": False}},            {"$group": {
                "_id": "$project_id",
                "total": {"$sum": 1},
                "completed": {"$sum": {"$cond": [{"$eq": ["$status", "submitted"]}, 1, 0]}
            }
        ]
        project_stats = await db.evaluation_sheets.aggregate(project_pipeline).to_list(100)
        
        return {
            "total_evaluations": total_evaluations,
            "completed_evaluations": completed_evaluations,
            "draft_evaluations": draft_evaluations,
            "in_progress_evaluations": in_progress_evaluations,
            "completion_rate": round(completion_rate, 2),
            "average_score": round(average_score, 2) if average_score else 0,
            "project_statistics": [
                {
                    "project_id": stat["_id"],
                    "total_evaluations": stat["total"],
                    "completed_evaluations": stat["completed"],
                    "completion_rate": round(stat["completed"] / stat["total"] * 100, 2) if stat["total"] > 0 else 0
                }
                for stat in project_stats
            ]
        }
        
    except Exception as e:
        if isinstance(e, HTTPException):
            raise e
        raise HTTPException(status_code=500, detail=f"?âÍ? ?µÍ≥Ñ Ï°∞Ìöå Ï§??§Î•òÍ∞Ä Î∞úÏÉù?àÏäµ?àÎã§: {str(e)}")

# Add the API router to the app
app.include_router(api_router)
