"""
Simple test to verify export functionality without requiring full auth setup
"""
from export_utils import exporter
import asyncio
from datetime import datetime

async def test_export_functions():
    print("üß™ Testing Export Functions")
    print("=" * 40)
    
    # Test data
    test_evaluation_data = {
        "evaluation": {
            "id": "test_123",
            "submitted_at": datetime.now().isoformat(),
            "total_score": 85,
            "max_score": 100
        },
        "template": {
            "name": "ÌÖåÏä§Ìä∏ ÌèâÍ∞ÄÌëú",
            "items": [
                {"id": "item1", "text": "Í∏∞Ïà†Î†• ÌèâÍ∞Ä", "max_score": 50},
                {"id": "item2", "text": "ÏÇ¨ÏóÖÏÑ± ÌèâÍ∞Ä", "max_score": 30},
                {"id": "item3", "text": "ÌåÄ Ïó≠Îüâ ÌèâÍ∞Ä", "max_score": 20}
            ]
        },
        "company": {
            "name": "ÌÖåÏä§Ìä∏ Í∏∞ÏóÖ"
        },
        "project": {
            "name": "ÌÖåÏä§Ìä∏ ÌîÑÎ°úÏ†ùÌä∏"
        },
        "evaluator": {
            "name": "ÌÖåÏä§Ìä∏ ÌèâÍ∞ÄÏúÑÏõê"
        },
        "scores": [
            {"item_id": "item1", "score": 42, "opinion": "Ïö∞ÏàòÌïú Í∏∞Ïà†Î†•ÏùÑ Î≥¥Ïú†ÌïòÍ≥† ÏûàÏùå"},
            {"item_id": "item2", "score": 25, "opinion": "ÏÇ¨ÏóÖÏÑ±Ïù¥ ÏñëÌò∏Ìï®"},
            {"item_id": "item3", "score": 18, "opinion": "ÌåÄ Íµ¨ÏÑ±Ïù¥ Ïûò ÎêòÏñ¥ ÏûàÏùå"}
        ]
    }
    
    try:
        # Test filename generation
        print("üìÅ Testing filename generation...")
        filename = exporter.generate_filename(
            company_name="ÌÖåÏä§Ìä∏ Í∏∞ÏóÖ",
            project_name="ÌÖåÏä§Ìä∏ ÌîÑÎ°úÏ†ùÌä∏", 
            format_type="pdf"
        )
        print(f"‚úÖ Generated filename: {filename}")
        
        # Test PDF export
        print("\nüìÑ Testing PDF export...")
        pdf_buffer = await exporter.export_single_evaluation_pdf(test_evaluation_data)
        
        if pdf_buffer and len(pdf_buffer.getvalue()) > 0:
            print(f"‚úÖ PDF generated successfully! Size: {len(pdf_buffer.getvalue())} bytes")
            
            # Save test PDF
            with open("test_export_sample.pdf", "wb") as f:
                f.write(pdf_buffer.getvalue())
            print("   Sample PDF saved as: test_export_sample.pdf")
        else:
            print("‚ùå PDF generation failed!")
            
        # Test Excel export  
        print("\nüìä Testing Excel export...")
        excel_buffer = await exporter.export_single_evaluation_excel(test_evaluation_data)
        
        if excel_buffer and len(excel_buffer.getvalue()) > 0:
            print(f"‚úÖ Excel generated successfully! Size: {len(excel_buffer.getvalue())} bytes")
            
            # Save test Excel
            with open("test_export_sample.xlsx", "wb") as f:
                f.write(excel_buffer.getvalue())
            print("   Sample Excel saved as: test_export_sample.xlsx")
        else:
            print("‚ùå Excel generation failed!")
            
        print("\n" + "=" * 40)
        print("‚úÖ Export functionality test completed!")
        
    except Exception as e:
        print(f"‚ùå Error during testing: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_export_functions())
