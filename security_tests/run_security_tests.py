#!/usr/bin/env python3
"""
AI 모델 관리 시스템 - 보안 테스트 실행 스크립트
모든 보안 테스트를 통합 실행하는 메인 스크립트
"""

import asyncio
import argparse
import json
import os
import sys
from datetime import datetime
from pathlib import Path

# 프로젝트 루트를 Python 경로에 추가
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from security_tests.python.security_test_runner import SecurityTestRunner
from security_tests.tools.vulnerability_scanner import VulnerabilityScanner

class SecurityTestOrchestrator:
    """보안 테스트 오케스트레이터"""
    
    def __init__(self, target_url: str, api_url: str, test_mode: str = 'safe'):
        self.target_url = target_url
        self.api_url = api_url
        self.test_mode = test_mode
        self.results = {}
        
    async def run_all_security_tests(self):
        """모든 보안 테스트 실행"""
        print("🔒 AI 모델 관리 시스템 - 종합 보안 테스트 시작")
        print("=" * 60)
        
        # 1. 동적 보안 테스트 (웹 애플리케이션)
        print("🌐 동적 보안 테스트 실행 중...")
        await self._run_dynamic_security_tests()
        
        # 2. 정적 보안 분석 (코드 및 설정)
        print("🔍 정적 보안 분석 실행 중...")
        await self._run_static_security_analysis()
        
        # 3. 결과 통합 및 리포트 생성
        print("📊 결과 분석 및 리포트 생성 중...")
        await self._generate_comprehensive_report()
        
        print("✅ 보안 테스트 완료!")
        
    async def _run_dynamic_security_tests(self):
        """동적 보안 테스트 실행"""
        try:
            # SecurityTestRunner 인스턴스 생성
            security_runner = SecurityTestRunner(
                target_url=self.target_url,
                api_url=self.api_url,
                test_mode=self.test_mode
            )
            
            await security_runner.setup_session()
            
            # 인증 보안 테스트
            print("  🔐 인증 보안 테스트...")
            auth_results = await security_runner.test_authentication_security()
            
            # 입력 검증 테스트
            print("  📝 입력 검증 테스트...")
            input_results = await security_runner.test_input_validation()
            
            # API 보안 테스트
            print("  🔌 API 보안 테스트...")
            api_results = await security_runner.test_api_security()
            
            # 세션 보안 테스트
            print("  🕒 세션 보안 테스트...")
            session_results = await security_runner.test_session_security()
            
            # SSL/TLS 보안 테스트
            print("  🔒 SSL/TLS 보안 테스트...")
            ssl_results = await security_runner.test_ssl_security()
            
            await security_runner.cleanup_session()
            
            # 결과 저장
            self.results['dynamic_tests'] = {\n                'authentication': [self._convert_result_to_dict(r) for r in auth_results],\n                'input_validation': [self._convert_result_to_dict(r) for r in input_results],\n                'api_security': [self._convert_result_to_dict(r) for r in api_results],\n                'session_security': [self._convert_result_to_dict(r) for r in session_results],\n                'ssl_tls': [self._convert_result_to_dict(r) for r in ssl_results]\n            }\n            \n            print(f\"  ✅ 동적 테스트 완료: {len(auth_results + input_results + api_results + session_results + ssl_results)}개 결과\")\n            \n        except Exception as e:\n            print(f\"  ❌ 동적 테스트 실패: {e}\")\n            self.results['dynamic_tests'] = {'error': str(e)}\n            \n    async def _run_static_security_analysis(self):\n        \"\"\"정적 보안 분석 실행\"\"\"\n        try:\n            # VulnerabilityScanner 인스턴스 생성\n            scanner = VulnerabilityScanner()\n            \n            # 취약점 스캔 실행\n            findings = await scanner.scan_all()\n            \n            # 스캔 리포트 생성\n            scan_report = scanner.generate_report()\n            \n            # 결과 저장\n            self.results['static_analysis'] = scan_report\n            \n            print(f\"  ✅ 정적 분석 완료: {len(findings)}개 취약점 발견\")\n            \n        except Exception as e:\n            print(f\"  ❌ 정적 분석 실패: {e}\")\n            self.results['static_analysis'] = {'error': str(e)}\n            \n    def _convert_result_to_dict(self, result):\n        \"\"\"SecurityTestResult를 딕셔너리로 변환\"\"\"\n        if hasattr(result, '__dict__'):\n            result_dict = result.__dict__.copy()\n            # datetime 객체를 문자열로 변환\n            if 'timestamp' in result_dict and hasattr(result_dict['timestamp'], 'isoformat'):\n                result_dict['timestamp'] = result_dict['timestamp'].isoformat()\n            return result_dict\n        return result\n        \n    async def _generate_comprehensive_report(self):\n        \"\"\"종합 보안 리포트 생성\"\"\"\n        timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n        \n        # 전체 요약 통계\n        summary = self._calculate_security_summary()\n        \n        # 종합 리포트 구조\n        comprehensive_report = {\n            'test_info': {\n                'timestamp': datetime.now().isoformat(),\n                'target_url': self.target_url,\n                'api_url': self.api_url,\n                'test_mode': self.test_mode\n            },\n            'summary': summary,\n            'dynamic_tests': self.results.get('dynamic_tests', {}),\n            'static_analysis': self.results.get('static_analysis', {}),\n            'recommendations': self._generate_security_recommendations(summary)\n        }\n        \n        # JSON 리포트 저장\n        json_filename = f\"comprehensive_security_report_{timestamp}.json\"\n        with open(json_filename, 'w', encoding='utf-8') as f:\n            json.dump(comprehensive_report, f, indent=2, ensure_ascii=False)\n            \n        # 텍스트 리포트 생성 및 저장\n        text_report = self._generate_text_report(comprehensive_report)\n        text_filename = f\"comprehensive_security_report_{timestamp}.txt\"\n        with open(text_filename, 'w', encoding='utf-8') as f:\n            f.write(text_report)\n            \n        # HTML 리포트 생성\n        html_report = self._generate_html_report(comprehensive_report)\n        html_filename = f\"comprehensive_security_report_{timestamp}.html\"\n        with open(html_filename, 'w', encoding='utf-8') as f:\n            f.write(html_report)\n            \n        print(f\"\\n📄 보고서 파일:\")\n        print(f\"   JSON: {json_filename}\")\n        print(f\"   Text: {text_filename}\")\n        print(f\"   HTML: {html_filename}\")\n        \n    def _calculate_security_summary(self):\n        \"\"\"보안 테스트 요약 통계 계산\"\"\"\n        summary = {\n            'total_issues': 0,\n            'critical_issues': 0,\n            'high_issues': 0,\n            'medium_issues': 0,\n            'low_issues': 0,\n            'info_issues': 0,\n            'dynamic_test_results': 0,\n            'static_analysis_findings': 0,\n            'overall_security_score': 0\n        }\n        \n        # 동적 테스트 결과 분석\n        dynamic_tests = self.results.get('dynamic_tests', {})\n        for test_category, results in dynamic_tests.items():\n            if isinstance(results, list):\n                summary['dynamic_test_results'] += len(results)\n                for result in results:\n                    if isinstance(result, dict) and 'severity' in result:\n                        severity = result['severity']\n                        summary[f'{severity}_issues'] = summary.get(f'{severity}_issues', 0) + 1\n                        summary['total_issues'] += 1\n                        \n        # 정적 분석 결과 분석\n        static_analysis = self.results.get('static_analysis', {})\n        if 'findings' in static_analysis:\n            findings = static_analysis['findings']\n            summary['static_analysis_findings'] = len(findings)\n            \n            for finding in findings:\n                severity = finding.get('severity', 'info')\n                summary[f'{severity}_issues'] = summary.get(f'{severity}_issues', 0) + 1\n                summary['total_issues'] += 1\n                \n        # 보안 점수 계산 (100점 만점)\n        critical_weight = summary['critical_issues'] * 20\n        high_weight = summary['high_issues'] * 10\n        medium_weight = summary['medium_issues'] * 5\n        low_weight = summary['low_issues'] * 2\n        \n        total_penalty = critical_weight + high_weight + medium_weight + low_weight\n        summary['overall_security_score'] = max(0, 100 - total_penalty)\n        \n        return summary\n        \n    def _generate_security_recommendations(self, summary):\n        \"\"\"보안 개선 권장사항 생성\"\"\"\n        recommendations = []\n        \n        if summary['critical_issues'] > 0:\n            recommendations.append({\n                'priority': 'critical',\n                'title': '즉시 수정 필요한 치명적 보안 취약점',\n                'description': f\"{summary['critical_issues']}개의 치명적 보안 취약점이 발견되었습니다. 즉시 수정이 필요합니다.\",\n                'action': '개발팀에 즉시 알리고 긴급 패치를 적용하세요.'\n            })\n            \n        if summary['high_issues'] > 0:\n            recommendations.append({\n                'priority': 'high',\n                'title': '높은 위험도 보안 취약점',\n                'description': f\"{summary['high_issues']}개의 높은 위험도 취약점이 발견되었습니다.\",\n                'action': '가능한 빨리 수정하고 보안 패치를 적용하세요.'\n            })\n            \n        if summary['overall_security_score'] < 70:\n            recommendations.append({\n                'priority': 'medium',\n                'title': '전반적인 보안 강화 필요',\n                'description': f\"현재 보안 점수: {summary['overall_security_score']}/100\",\n                'action': '보안 정책을 검토하고 포괄적인 보안 강화 계획을 수립하세요.'\n            })\n            \n        if summary['medium_issues'] > 5:\n            recommendations.append({\n                'priority': 'medium',\n                'title': '중간 위험도 취약점 다수 발견',\n                'description': f\"{summary['medium_issues']}개의 중간 위험도 취약점이 발견되었습니다.\",\n                'action': '정기적인 보안 점검과 코드 리뷰를 강화하세요.'\n            })\n            \n        # 기본 권장사항\n        recommendations.extend([\n            {\n                'priority': 'general',\n                'title': '정기적인 보안 테스트',\n                'description': '보안 취약점은 지속적으로 발견될 수 있습니다.',\n                'action': '월 1회 이상 정기적인 보안 테스트를 실시하세요.'\n            },\n            {\n                'priority': 'general',\n                'title': '보안 교육 및 인식 제고',\n                'description': '개발팀의 보안 인식이 중요합니다.',\n                'action': '정기적인 보안 교육과 보안 코딩 가이드라인을 제공하세요.'\n            }\n        ])\n        \n        return recommendations\n        \n    def _generate_text_report(self, report):\n        \"\"\"텍스트 형태의 보안 리포트 생성\"\"\"\n        lines = []\n        lines.append(\"=\" * 70)\n        lines.append(\"AI 모델 관리 시스템 - 종합 보안 테스트 리포트\")\n        lines.append(\"=\" * 70)\n        \n        # 테스트 정보\n        test_info = report['test_info']\n        lines.append(f\"테스트 시간: {test_info['timestamp']}\")\n        lines.append(f\"대상 URL: {test_info['target_url']}\")\n        lines.append(f\"API URL: {test_info['api_url']}\")\n        lines.append(f\"테스트 모드: {test_info['test_mode']}\")\n        lines.append(\"\")\n        \n        # 요약\n        summary = report['summary']\n        lines.append(\"📊 보안 테스트 요약\")\n        lines.append(\"-\" * 40)\n        lines.append(f\"전체 보안 점수: {summary['overall_security_score']}/100\")\n        lines.append(f\"총 발견된 문제: {summary['total_issues']}개\")\n        lines.append(f\"  - 치명적: {summary['critical_issues']}개\")\n        lines.append(f\"  - 높음: {summary['high_issues']}개\")\n        lines.append(f\"  - 보통: {summary['medium_issues']}개\")\n        lines.append(f\"  - 낮음: {summary['low_issues']}개\")\n        lines.append(f\"  - 정보: {summary['info_issues']}개\")\n        lines.append(\"\")\n        \n        # 동적 테스트 결과\n        lines.append(\"🌐 동적 보안 테스트 결과\")\n        lines.append(\"-\" * 40)\n        dynamic_tests = report.get('dynamic_tests', {})\n        for category, results in dynamic_tests.items():\n            if isinstance(results, list):\n                lines.append(f\"  {category}: {len(results)}개 결과\")\n                # 심각한 문제만 표시\n                for result in results:\n                    if isinstance(result, dict) and result.get('severity') in ['critical', 'high']:\n                        lines.append(f\"    - {result.get('test_name', 'Unknown')}: {result.get('severity', 'Unknown')}\")\n        lines.append(\"\")\n        \n        # 정적 분석 결과\n        lines.append(\"🔍 정적 보안 분석 결과\")\n        lines.append(\"-\" * 40)\n        static_analysis = report.get('static_analysis', {})\n        if 'findings' in static_analysis:\n            findings = static_analysis['findings']\n            lines.append(f\"총 {len(findings)}개 취약점 발견\")\n            \n            # 심각도별 상위 5개씩 표시\n            for severity in ['critical', 'high', 'medium']:\n                severity_findings = [f for f in findings if f.get('severity') == severity]\n                if severity_findings:\n                    lines.append(f\"\\n  {severity.upper()} 등급:\")\n                    for finding in severity_findings[:5]:\n                        lines.append(f\"    - {finding.get('title', 'Unknown')} ({finding.get('location', 'Unknown')})\")\n                    if len(severity_findings) > 5:\n                        lines.append(f\"    ... 및 {len(severity_findings) - 5}개 더\")\n        lines.append(\"\")\n        \n        # 권장사항\n        lines.append(\"💡 보안 개선 권장사항\")\n        lines.append(\"-\" * 40)\n        recommendations = report.get('recommendations', [])\n        for i, rec in enumerate(recommendations, 1):\n            lines.append(f\"{i}. [{rec['priority'].upper()}] {rec['title']}\")\n            lines.append(f\"   {rec['description']}\")\n            lines.append(f\"   조치: {rec['action']}\")\n            lines.append(\"\")\n            \n        return \"\\n\".join(lines)\n        \n    def _generate_html_report(self, report):\n        \"\"\"HTML 형태의 보안 리포트 생성\"\"\"\n        summary = report['summary']\n        \n        # 보안 점수에 따른 색상 결정\n        score = summary['overall_security_score']\n        if score >= 80:\n            score_color = \"#28a745\"  # 녹색\n        elif score >= 60:\n            score_color = \"#ffc107\"  # 노란색\n        else:\n            score_color = \"#dc3545\"  # 빨간색\n            \n        html = f\"\"\"\n<!DOCTYPE html>\n<html lang=\"ko\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>AI 모델 관리 시스템 - 보안 테스트 리포트</title>\n    <style>\n        body {{ font-family: Arial, sans-serif; margin: 20px; background-color: #f5f5f5; }}\n        .container {{ max-width: 1200px; margin: 0 auto; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}\n        .header {{ text-align: center; margin-bottom: 30px; }}\n        .score {{ font-size: 48px; font-weight: bold; color: {score_color}; }}\n        .summary {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin: 30px 0; }}\n        .summary-card {{ background: #f8f9fa; padding: 20px; border-radius: 8px; text-align: center; }}\n        .severity-critical {{ background: #dc3545; color: white; }}\n        .severity-high {{ background: #fd7e14; color: white; }}\n        .severity-medium {{ background: #ffc107; color: black; }}\n        .severity-low {{ background: #20c997; color: white; }}\n        .section {{ margin: 30px 0; }}\n        .section h2 {{ border-bottom: 2px solid #007bff; padding-bottom: 10px; }}\n        .finding {{ background: #f8f9fa; border-left: 4px solid #007bff; padding: 15px; margin: 10px 0; }}\n        .finding.critical {{ border-left-color: #dc3545; }}\n        .finding.high {{ border-left-color: #fd7e14; }}\n        .finding.medium {{ border-left-color: #ffc107; }}\n        .recommendation {{ background: #e7f3ff; border: 1px solid #b3d9ff; padding: 15px; margin: 10px 0; border-radius: 5px; }}\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <h1>🔒 AI 모델 관리 시스템 보안 테스트 리포트</h1>\n            <p>테스트 시간: {report['test_info']['timestamp']}</p>\n            <div class=\"score\">{score}/100</div>\n            <p>전체 보안 점수</p>\n        </div>\n        \n        <div class=\"summary\">\n            <div class=\"summary-card severity-critical\">\n                <h3>치명적</h3>\n                <div style=\"font-size: 24px;\">{summary['critical_issues']}</div>\n            </div>\n            <div class=\"summary-card severity-high\">\n                <h3>높음</h3>\n                <div style=\"font-size: 24px;\">{summary['high_issues']}</div>\n            </div>\n            <div class=\"summary-card severity-medium\">\n                <h3>보통</h3>\n                <div style=\"font-size: 24px;\">{summary['medium_issues']}</div>\n            </div>\n            <div class=\"summary-card severity-low\">\n                <h3>낮음</h3>\n                <div style=\"font-size: 24px;\">{summary['low_issues']}</div>\n            </div>\n        </div>\n        \n        <div class=\"section\">\n            <h2>🎯 주요 발견사항</h2>\n        \"\"\"\n        \n        # 정적 분석 결과의 주요 발견사항 추가\n        static_analysis = report.get('static_analysis', {})\n        if 'findings' in static_analysis:\n            findings = static_analysis['findings']\n            high_priority_findings = [f for f in findings if f.get('severity') in ['critical', 'high']]\n            \n            for finding in high_priority_findings[:10]:  # 상위 10개만 표시\n                severity = finding.get('severity', 'info')\n                html += f\"\"\"\n            <div class=\"finding {severity}\">\n                <h4>{finding.get('title', 'Unknown Issue')}</h4>\n                <p><strong>위치:</strong> {finding.get('location', 'Unknown')}</p>\n                <p><strong>설명:</strong> {finding.get('description', 'No description')}</p>\n                <p><strong>권장 조치:</strong> {finding.get('remediation', 'No remediation provided')}</p>\n            </div>\n                \"\"\"\n                \n        html += \"\"\"\n        </div>\n        \n        <div class=\"section\">\n            <h2>💡 권장사항</h2>\n        \"\"\"\n        \n        # 권장사항 추가\n        recommendations = report.get('recommendations', [])\n        for rec in recommendations:\n            html += f\"\"\"\n            <div class=\"recommendation\">\n                <h4>[{rec['priority'].upper()}] {rec['title']}</h4>\n                <p>{rec['description']}</p>\n                <p><strong>조치:</strong> {rec['action']}</p>\n            </div>\n            \"\"\"\n            \n        html += \"\"\"\n        </div>\n        \n        <div class=\"section\">\n            <p><small>이 리포트는 AI 모델 관리 시스템 보안 테스트 도구에 의해 자동 생성되었습니다.</small></p>\n        </div>\n    </div>\n</body>\n</html>\n        \"\"\"\n        \n        return html\n\nasync def main():\n    \"\"\"메인 함수\"\"\"\n    parser = argparse.ArgumentParser(description='AI Model Management Security Test Suite')\n    parser.add_argument('--target-url', default='http://localhost:3000', \n                       help='Frontend target URL')\n    parser.add_argument('--api-url', default='http://localhost:8000',\n                       help='Backend API URL')\n    parser.add_argument('--test-mode', choices=['safe', 'aggressive'], default='safe',\n                       help='Test mode (safe: 기본 테스트, aggressive: 강화 테스트)')\n    \n    args = parser.parse_args()\n    \n    # 보안 테스트 오케스트레이터 생성 및 실행\n    orchestrator = SecurityTestOrchestrator(\n        target_url=args.target_url,\n        api_url=args.api_url,\n        test_mode=args.test_mode\n    )\n    \n    await orchestrator.run_all_security_tests()\n    \nif __name__ == \"__main__\":\n    asyncio.run(main())