
services:
  # Redis Ï∫êÏãú ÏÑúÎ≤Ñ - Í∞úÎ∞ú ÌôòÍ≤Ω
  redis:
    image: redis:7-alpine
    container_name: online-evaluation-redis-dev
    restart: unless-stopped
    ports:
      - "6479:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data_dev:/data
    networks:
      - dev-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # MongoDB Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ - Í∞úÎ∞ú ÌôòÍ≤Ω
  mongodb:
    image: mongo:7
    container_name: online-evaluation-mongodb-dev
    restart: unless-stopped
    ports:
      - "27117:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: dev123
      MONGO_INITDB_DATABASE: online_evaluation
    volumes:
      - mongodb_data_dev:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping').ok"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - dev-network
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: development
    container_name: online-evaluation-backend-dev
    restart: unless-stopped
    ports:
      - "8180:8080"
    env_file:
      - ./.env
    environment:
      MONGO_URL: "mongodb://admin:dev123@mongodb:27017/online_evaluation?authSource=admin"
      DB_NAME: "evaluation_db_dev"
      REDIS_URL: "redis://redis:6379"
      JWT_SECRET_KEY: "dev-jwt-secret-key-not-for-production"
      JWT_ALGORITHM: "HS256"
      JWT_ACCESS_TOKEN_EXPIRE_MINUTES: "120"
      JWT_REFRESH_TOKEN_EXPIRE_DAYS: "30"
      CORS_ORIGINS: "http://localhost:3000"
      CORS_ALLOW_CREDENTIALS: "true"
      SECURITY_HEADERS_ENABLED: "true"
      RATE_LIMIT_REQUESTS_PER_MINUTE: "1000"
      RATE_LIMIT_BURST: "100"
      MAX_FILE_SIZE_MB: "100"
      ALLOWED_FILE_TYPES: "pdf,doc,docx,xls,xlsx,ppt,pptx,jpg,jpeg,png,gif,txt,json"
      UPLOAD_PATH: "/app/uploads"
      ENVIRONMENT: "development"
      DEBUG: "true"
      LOG_LEVEL: "DEBUG"
      RELOAD: "true"
      API_TITLE: "Online Evaluation System API - Development"
      API_DESCRIPTION: "Development environment for evaluation management platform"
      PYTHONIOENCODING: "utf-8"
    volumes:
      - ./backend:/app:rw
      - uploads_data_dev:/app/uploads
      - logs_data_dev:/app/logs
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dev-network
    command: bash -c "uvicorn server:app --host 0.0.0.0 --port 8080 --reload"
    healthcheck:
      test: ["CMD", "curl", "f", "http://localhost:8080/docs"]
      interval: 10s
      timeout: 5s
      retries: 3

  # ÌîÑÎ°†Ìä∏ÏóîÎìú Ïõπ ÏÑúÎ≤Ñ - Í∞úÎ∞ú ÌôòÍ≤Ω
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      target: development
    container_name: online-evaluation-frontend-dev
    restart: unless-stopped
    ports:
      - "3100:3000"
    environment:
      REACT_APP_BACKEND_URL: "http://localhost:8180"
      REACT_APP_WS_URL: "ws://localhost:8180"
      REACT_APP_ENV: "development"
      CHOKIDAR_USEPOLLING: "true"
      WATCHPACK_POLLING: "true"
    volumes:
      - ./frontend/src:/app/src:rw
      - ./frontend/public:/app/public:rw
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - dev-network
    healthcheck:
      test: ["CMD", "curl", "f", "http://localhost:3000"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Í∞úÎ∞ú ÎèÑÍµ¨: MongoDB Express
  mongo-express:
    image: mongo-express:1.0.0-alpha
    container_name: online-evaluation-mongo-express-dev
    restart: unless-stopped
    ports:
      - "8181:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: dev123
      ME_CONFIG_MONGODB_URL: "mongodb://admin:dev123@mongodb:27017/"
      ME_CONFIG_BASICAUTH_USERNAME: "admin"
      ME_CONFIG_BASICAUTH_PASSWORD: "admin"
    depends_on:
      - mongodb
    networks:
      - dev-network
    profiles:
      - debug

  # Í∞úÎ∞ú ÎèÑÍµ¨: Redis Commander
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: online-evaluation-redis-commander-dev
    restart: unless-stopped
    ports:
      - "8182:8081"
    environment:
      REDIS_HOSTS: "redis:redis:6379"
    depends_on:
      - redis
    networks:
      - dev-network
    profiles:
      - debug

  # MongoDB Ï¥àÍ∏∞Ìôî ÏÑúÎπÑÏä§
  mongo-init:
    image: mongo:7
    container_name: online-evaluation-mongo-init-dev
    depends_on:
      mongodb:
        condition: service_healthy
    volumes:
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - dev-network
    command: >
      bash -c "
        echo 'üöÄ MongoDB Ï¥àÍ∏∞Ìôî ÏãúÏûë...'
        mongosh --host mongodb:27017 -u admin -p dev123 --authenticationDatabase admin /docker-entrypoint-initdb.d/init-mongo.js && \
        echo '‚úÖ MongoDB Ï¥àÍ∏∞Ìôî ÏôÑÎ£å!'
      "
  # MONITORING STACK - DEVELOPMENT
  # =====================================================

  # Prometheus - Í∞úÎ∞ú ÌôòÍ≤Ω
  prometheus-dev:
    image: prom/prometheus:v2.47.0
    container_name: online-evaluation-prometheus-dev
    restart: unless-stopped
    ports:
      - "9190:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
      - '--log.level=info'
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data_dev:/prometheus
    networks:
      - dev-network
    depends_on:
      - backend
    profiles:
      - monitoring

  # Grafana - Í∞úÎ∞ú ÌôòÍ≤Ω
  grafana-dev:
    image: grafana/grafana:10.1.0
    container_name: online-evaluation-grafana-dev
    restart: unless-stopped
    ports:
      - "3101:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: "admin"
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_INSTALL_PLUGINS: "grafana-piechart-panel"
      GF_LOG_LEVEL: "info"
    volumes:
      - grafana_data_dev:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    networks:
      - dev-network
    depends_on:
      - prometheus-dev
    profiles:
      - monitoring

  # =====================================================
  # ELK STACK - DEVELOPMENT LOGGING
  # =====================================================

  # Elasticsearch - Í∞úÎ∞ú ÌôòÍ≤Ω (Îã®Ïùº ÎÖ∏Îìú) - ÏÑ±Îä• ÏµúÏ†ÅÌôî
  elasticsearch-dev:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.0
    container_name: online-evaluation-elasticsearch-dev
    restart: unless-stopped
    ports:
      - "9302:9200"
      - "9400:9300"
    networks:
      - dev-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health?wait_for_status=green&timeout=1s || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Logstash - Í∞úÎ∞ú ÌôòÍ≤Ω - ÏÑ±Îä• ÏµúÏ†ÅÌôî
  logstash-dev:
    image: docker.elastic.co/logstash/logstash:8.15.0
    container_name: online-evaluation-logstash-dev
    restart: unless-stopped
    ports:
      - "5144:5044"
      - "9700:9600"
      - "5100:5000"
    environment:
      - "LS_JAVA_OPTS=-Xms1g -Xmx1g"
      - ELASTICSEARCH_HOSTS=http://elasticsearch-dev:9200
      - MONITORING_ENABLED=false
      - PIPELINE_WORKERS=2
      - PIPELINE_BATCH_SIZE=1000
      - PIPELINE_BATCH_DELAY=50
    deploy:
      resources:
        limits:
          memory: 2g
          cpus: '1.5'
        reservations:
          memory: 1g
          cpus: '0.5'
    volumes:
      - ./logging/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./logging/logstash/patterns:/usr/share/logstash/patterns:ro
      - ./logging/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./logging/logstash/jvm.options:/usr/share/logstash/config/jvm.options:ro
      - logstash_data_dev:/usr/share/logstash/data
    networks:
      - dev-network
    depends_on:
      elasticsearch-dev:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9600 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    profiles:
      - logging

  # Kibana - Í∞úÎ∞ú ÌôòÍ≤Ω
  kibana-dev:
    image: docker.elastic.co/kibana/kibana:8.15.0
    container_name: online-evaluation-kibana-dev
    restart: unless-stopped
    ports:
      - "5701:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch-dev:9200"
      - SERVER_NAME=kibana-dev
      - SERVER_HOST=0.0.0.0
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=
      - XPACK_SECURITY_ENABLED=false
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=dev-encryption-key-not-for-production
      - LOGGING_ROOT_LEVEL=info
    volumes:
      - ./logging/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
      - ./logging/kibana/dashboards:/usr/share/kibana/dashboards:ro
      - ./logging/kibana/provisioning:/etc/grafana/provisioning:ro
      - kibana_data_dev:/usr/share/kibana/data
    networks:
      - dev-network
    depends_on:
      elasticsearch-dev:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    profiles:
      - logging
  filebeat-dev:
    image: docker.elastic.co/beats/filebeat:8.15.0
    container_name: online-evaluation-filebeat-dev
    restart: unless-stopped
    user: root
    environment:
      - ENVIRONMENT=development
      - DATACENTER=local
      - LOGSTASH_HOST=logstash-dev
      - LOGSTASH_PORT=5044
      - ELASTICSEARCH_HOST=elasticsearch-dev
      - ELASTICSEARCH_PORT=9200
    volumes:
      - ./logging/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - ./logging/filebeat/inputs.d:/usr/share/filebeat/inputs.d:ro
      - logs_data_dev:/var/log/app:ro
      - /var/log/docker:/var/log/docker:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - nginx_logs_dev:/var/log/nginx:ro
      - filebeat_data_dev:/usr/share/filebeat/data
    networks:
      - dev-network
    depends_on:
      logstash-dev:
        condition: service_healthy
    profiles:
      - logging

  # Elasticsearch Ï¥àÍ∏∞Ìôî
  elasticsearch-setup-dev:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.0
    container_name: online-evaluation-elasticsearch-setup-dev
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch-dev:9200
    volumes:
      - ./logging/elasticsearch:/setup:ro
    networks:
      - dev-network
    depends_on:
      elasticsearch-dev:
        condition: service_healthy
    command: >
      bash -c "
        shopt -s nullglob # Enable nullglob to prevent unexpanded globs
        echo 'üöÄ Elasticsearch Ï¥àÍ∏∞Ìôî ÏãúÏûë...'
        
        for template_file in /setup/index-templates/*.json; do
          if [ -f "${template_file:-}" ]; then # Use curly braces and default value
            template_name=$(basename "${template_file:-}" .json) # Use curly braces and default value
            echo "üìã Ïù∏Îç±Ïä§ ÌÖúÌîåÎ¶ø ÏÉùÏÑ±: ${template_name:-}" # Use curly braces and default value
            curl -X PUT "elasticsearch-dev:9200/_index_template/${template_name:-}" \
              -H 'Content-Type: application/json' \
              -d @"${template_file:-}" || echo "‚ö†Ô∏è ÌÖúÌîåÎ¶ø ÏÉùÏÑ± Ïã§Ìå®: ${template_name:-}"
          fi
        done
        
        for policy_file in /setup/ilm-policies/*.json; do
          if [ -f "${policy_file:-}" ]; then # Use curly braces and default value
            policy_name=$(basename "${policy_file:-}" .json) # Use curly braces and default value
            echo "üìÖ ILM Ï†ïÏ±Ö ÏÉùÏÑ±: ${policy_name:-}" # Use curly braces and default value
            curl -X PUT "elasticsearch-dev:9200/_ilm/policy/${policy_name:-}" \
              -H 'Content-Type: application/json' \
              -d @"${policy_file:-}" || echo "‚ö†Ô∏è Ï†ïÏ±Ö ÏÉùÏÑ± Ïã§Ìå®: ${policy_name:-}"
          fi
        done
        
        echo '‚úÖ Elasticsearch Ï¥àÍ∏∞Ìôî ÏôÑÎ£å!'
      "
    profiles:
      - logging-init

  # Kibana ÎåÄÏãúÎ≥¥Îìú Ï¥àÍ∏∞Ìôî
  kibana-setup-dev:
    image: curlimages/curl:latest
    container_name: online-evaluation-kibana-setup-dev
    environment:
      - KIBANA_URL=http://kibana-dev:5601
      - DASHBOARD_DIR=/setup/dashboards
      - INDEX_PATTERN_DIR=/setup/provisioning/index-patterns
    volumes:
      - ./logging/kibana:/setup:ro
      - ./logging/kibana/setup-dashboards.sh:/setup/setup-dashboards.sh:ro
    networks:
      - dev-network
    depends_on:
      kibana-dev:
        condition: service_healthy
    command: >
      sh -c "
        shopt -s nullglob # Enable nullglob to prevent unexpanded globs
        echo 'üéØ Kibana ÎåÄÏãúÎ≥¥Îìú ÏÑ§Ï†ï ÏãúÏûë...'
        apk add --no-cache bash jq
        chmod +x /setup/setup-dashboards.sh
        /setup/setup-dashboards.sh
      "
    profiles:
      - logging-init

volumes:
  mongodb_data_dev:
    driver: local
  redis_data_dev:
    driver: local
  uploads_data_dev:
    driver: local
  logs_data_dev:
    driver: local
  prometheus_data_dev:
    driver: local
  grafana_data_dev:
    driver: local
  logstash_data_dev:
    driver: local
  kibana_data_dev:
    driver: local
  filebeat_data_dev:
    driver: local
  nginx_logs_dev:
    driver: local

networks:
  dev-network:
    driver: bridge
    name: online-evaluation-dev-network
