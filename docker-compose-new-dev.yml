version: '3.8'

services:
  # Redis 캐시 서버 - 개발 환경
  redis:
    image: redis:7-alpine
    container_name: online-evaluation-redis-dev
    restart: unless-stopped
    ports:
      - "6479:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data_dev:/data
    networks:
      - dev-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # MongoDB 데이터베이스 - 개발 환경
  mongodb:
    image: mongo:7
    container_name: online-evaluation-mongodb-dev
    restart: unless-stopped
    ports:
      - "27117:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: dev123
      MONGO_INITDB_DATABASE: online_evaluation_dev
    volumes:
      - mongodb_data_dev:/data/db
    networks:
      - dev-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 3

  # 백엔드 API 서버 - 개발 환경
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: development
    container_name: online-evaluation-backend-dev
    restart: unless-stopped
    ports:
      - "8180:8080"
    environment:
      MONGO_URL: "mongodb://admin:dev123@mongodb:27017/evaluation_db_dev?authSource=admin"
      DB_NAME: "evaluation_db_dev"
      REDIS_URL: "redis://redis:6379"
      JWT_SECRET_KEY: "dev-jwt-secret-key-not-for-production"
      JWT_ALGORITHM: "HS256"
      JWT_ACCESS_TOKEN_EXPIRE_MINUTES: "120"
      JWT_REFRESH_TOKEN_EXPIRE_DAYS: "30"
      CORS_ORIGINS: "*"
      CORS_ALLOW_CREDENTIALS: "true"
      SECURITY_HEADERS_ENABLED: "true"
      RATE_LIMIT_REQUESTS_PER_MINUTE: "1000"
      RATE_LIMIT_BURST: "100"
      MAX_FILE_SIZE_MB: "100"
      ALLOWED_FILE_TYPES: "pdf,doc,docx,xls,xlsx,ppt,pptx,jpg,jpeg,png,gif,txt,json"
      UPLOAD_PATH: "/app/uploads"
      ENVIRONMENT: "development"
      DEBUG: "true"
      LOG_LEVEL: "DEBUG"
      RELOAD: "true"
      API_TITLE: "Online Evaluation System API - Development"
      API_DESCRIPTION: "Development environment for evaluation management platform"
    volumes:
      - ./backend:/app:rw
      - uploads_data_dev:/app/uploads
      - logs_data_dev:/app/logs
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dev-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # 프론트엔드 웹 서버 - 개발 환경
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      target: development
    container_name: online-evaluation-frontend-dev
    restart: unless-stopped
    ports:
      - "3100:3000"
    environment:
      REACT_APP_BACKEND_URL: "http://localhost:8180"
      REACT_APP_WS_URL: "ws://localhost:8180"
      REACT_APP_ENV: "development"
      CHOKIDAR_USEPOLLING: "true"
      WATCHPACK_POLLING: "true"
    volumes:
      - ./frontend/src:/app/src:rw
      - ./frontend/public:/app/public:rw
      - /app/node_modules
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - dev-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 10s
      timeout: 5s
      retries: 3

  # =====================================================
  # ELK STACK - DEVELOPMENT LOGGING
  # =====================================================  # Elasticsearch - 개발 환경 (단일 노드)
  elasticsearch-dev:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.0
    container_name: online-evaluation-elasticsearch-dev
    restart: unless-stopped
    ports:
      - "9300:9200"
      - "9400:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
      - cluster.name=online-evaluation-dev
      - node.name=elasticsearch-dev
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data_dev:/usr/share/elasticsearch/data
    networks:
      - dev-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
        # Logstash - 개발 환경
  logstash-dev:
    image: docker.elastic.co/logstash/logstash:8.15.0
    container_name: online-evaluation-logstash-dev
    restart: unless-stopped
    ports:
      - "5144:5044"
      - "9700:9600"
      - "5100:5000"
    environment:
      - "LS_JAVA_OPTS=-Xms512m -Xmx512m"
      - ELASTICSEARCH_HOSTS=http://elasticsearch-dev:9200
    volumes:
      - logstash_data_dev:/usr/share/logstash/data
    networks:
      - dev-network
    depends_on:
      elasticsearch-dev:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9600 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
  # Kibana - 개발 환경
  kibana-dev:
    image: docker.elastic.co/kibana/kibana:8.15.0
    container_name: online-evaluation-kibana-dev
    restart: unless-stopped
    ports:
      - "5701:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch-dev:9200
      - SERVER_NAME=kibana-dev
      - SERVER_HOST=0.0.0.0
      - XPACK_SECURITY_ENABLED=false
    volumes:
      - kibana_data_dev:/usr/share/kibana/data
    networks:
      - dev-network
    depends_on:
      elasticsearch-dev:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mongodb_data_dev:
    driver: local
  redis_data_dev:
    driver: local
  uploads_data_dev:
    driver: local
  logs_data_dev:
    driver: local
  elasticsearch_data_dev:
    driver: local
  logstash_data_dev:
    driver: local
  kibana_data_dev:
    driver: local

networks:
  dev-network:
    driver: bridge
    name: online-evaluation-dev-network
