# 🚀 AI 모델 관리 시스템 - Terraform Plan 시뮬레이션 결과
# 생성일: 2025-06-27

Terraform Plan Output:
=====================

Terraform used the selected providers to generate the following execution plan.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_vpc.main will be created
  + resource "aws_vpc" "main" {
      + arn                              = (known after apply)
      + cidr_block                       = "10.1.0.0/16"
      + enable_dns_hostnames             = true
      + enable_dns_support               = true
      + id                               = (known after apply)
      + instance_tenancy                 = "default"
      + tags                             = {
          + "Name" = "ai-model-mgmt-staging-vpc"
        }
    }

  # aws_subnet.public[0] will be created
  + resource "aws_subnet" "public" {
      + availability_zone                = "ap-northeast-2a"
      + cidr_block                      = "10.1.1.0/24"
      + map_public_ip_on_launch         = true
      + tags                            = {
          + "Name" = "ai-model-mgmt-staging-public-1"
          + "Type" = "public"
        }
      + vpc_id                          = (known after apply)
    }

  # aws_subnet.public[1] will be created
  + resource "aws_subnet" "public" {
      + availability_zone                = "ap-northeast-2b"
      + cidr_block                      = "10.1.2.0/24"
      + map_public_ip_on_launch         = true
      + tags                            = {
          + "Name" = "ai-model-mgmt-staging-public-2"
          + "Type" = "public"
        }
      + vpc_id                          = (known after apply)
    }

  # aws_subnet.private[0] will be created
  + resource "aws_subnet" "private" {
      + availability_zone                = "ap-northeast-2a"
      + cidr_block                      = "10.1.10.0/24"
      + tags                            = {
          + "Name" = "ai-model-mgmt-staging-private-1"
          + "Type" = "private"
        }
      + vpc_id                          = (known after apply)
    }

  # aws_subnet.private[1] will be created
  + resource "aws_subnet" "private" {
      + availability_zone                = "ap-northeast-2b"
      + cidr_block                      = "10.1.11.0/24"
      + tags                            = {
          + "Name" = "ai-model-mgmt-staging-private-2"
          + "Type" = "private"
        }
      + vpc_id                          = (known after apply)
    }

  # aws_docdb_cluster.main will be created
  + resource "aws_docdb_cluster" "main" {
      + cluster_identifier              = "ai-model-mgmt-staging-docdb"
      + engine                         = "docdb"
      + engine_version                 = "5.0.0"
      + master_username                = "admin"
      + master_password                = (sensitive value)
      + endpoint                       = (known after apply)
      + hosted_zone_id                 = (known after apply)
      + storage_encrypted              = true
      + backup_retention_period        = 7
      + preferred_backup_window        = "03:00-04:00"
      + preferred_maintenance_window   = "sun:04:00-sun:05:00"
    }

  # aws_docdb_cluster_instance.main[0] will be created
  + resource "aws_docdb_cluster_instance" "main" {
      + identifier                     = "ai-model-mgmt-staging-docdb-1"
      + instance_class                 = "db.t3.medium"
      + cluster_identifier             = (known after apply)
    }

  # aws_docdb_cluster_instance.main[1] will be created
  + resource "aws_docdb_cluster_instance" "main" {
      + identifier                     = "ai-model-mgmt-staging-docdb-2"
      + instance_class                 = "db.t3.medium"
      + cluster_identifier             = (known after apply)
    }

  # aws_elasticache_replication_group.main will be created
  + resource "aws_elasticache_replication_group" "main" {
      + replication_group_id           = "ai-model-mgmt-staging-redis"
      + description                    = "Redis cluster for ai-model-mgmt staging"
      + port                          = 6379
      + node_type                     = "cache.t3.micro"
      + num_cache_clusters            = 2
      + at_rest_encryption_enabled    = true
      + transit_encryption_enabled    = true
      + automatic_failover_enabled    = true
      + multi_az_enabled              = true
    }

  # aws_lb.main will be created
  + resource "aws_lb" "main" {
      + name                          = "ai-model-mgmt-staging-alb"
      + internal                      = false
      + load_balancer_type            = "application"
      + dns_name                      = (known after apply)
      + zone_id                       = (known after apply)
      + enable_deletion_protection    = false
    }

  # aws_autoscaling_group.backend will be created
  + resource "aws_autoscaling_group" "backend" {
      + name                          = "ai-model-mgmt-staging-backend-asg"
      + min_size                      = 2
      + max_size                      = 6
      + desired_capacity              = 3
      + health_check_type             = "ELB"
      + health_check_grace_period     = 300
    }

  # aws_launch_template.backend will be created
  + resource "aws_launch_template" "backend" {
      + image_id                      = "ami-0c2d3e23e757b5d84"  # Ubuntu 22.04 LTS
      + instance_type                 = "t3.large"
      + name_prefix                   = "ai-model-mgmt-staging-backend-"
    }

  # aws_ecr_repository.backend will be created
  + resource "aws_ecr_repository" "backend" {
      + name                          = "ai-model-mgmt/backend"
      + image_tag_mutability          = "MUTABLE"
      + repository_url                = (known after apply)
    }

Plan: 25 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + alb_dns_name       = (known after apply)
  + api_domain_name    = "api-staging.ai-model-mgmt.com"
  + docdb_endpoint     = (known after apply)
  + domain_name        = "staging.ai-model-mgmt.com"
  + ecr_repository_url = (known after apply)
  + redis_endpoint     = (known after apply)
  + vpc_id             = (known after apply)

────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" later.

🎯 Infrastructure Summary:
- VPC with public/private subnets across 2 AZs
- DocumentDB cluster with 2 instances
- ElastiCache Redis cluster with 2 nodes
- Auto Scaling Group with 3 EC2 instances
- Application Load Balancer
- ECR repository for container images
- Security groups with least privilege access
- SSL certificate and Route53 DNS records