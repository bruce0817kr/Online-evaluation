# 애플리케이션 로그 전용 입력 설정
# 파일: inputs.d/app-inputs.yml

- type: log
  enabled: true
  id: fastapi-app-logs
  paths:
    - /app/logs/app.log
    - /app/logs/fastapi.log
    - /var/log/online-evaluation/*.log
    
  # JSON 구조화된 로그 파싱
  json.keys_under_root: true
  json.add_error_key: true
  json.message_key: message
  json.ignore_decoding_error: true
  
  # 서비스 식별 필드
  fields:
    log_type: fastapi_application
    service: online-evaluation-api
    component: backend
    environment: ${ENVIRONMENT:development}
    datacenter: ${DATACENTER:local}
  fields_under_root: false
  
  # 로그 레벨 필터링
  include_lines: [
    '^.*"level":\s*"(INFO|WARN|WARNING|ERROR|FATAL|CRITICAL)".*$',
    '^(INFO|WARN|WARNING|ERROR|FATAL|CRITICAL)'
  ]
  exclude_lines: [
    '^.*"level":\s*"DEBUG".*$',
    '^DEBUG',
    '.*health.*check.*',
    '.*ping.*pong.*'
  ]
  
  # 스택 트레이스 멀티라인 처리
  multiline.pattern: '^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}'
  multiline.negate: true
  multiline.match: after
  multiline.max_lines: 500
  multiline.timeout: 10s
  
  # 성능 최적화
  scan_frequency: 5s
  harvester_buffer_size: 32768
  max_bytes: 52428800  # 50MB
  close_inactive: 5m
  close_renamed: true
  close_removed: true
  close_eof: false
  
  # 파일 추적 설정
  ignore_older: 72h
  clean_inactive: 168h  # 7일
  
  # 사용자 정의 프로세서
  processors:
    # 타임스탬프 파싱
    - timestamp:
        field: timestamp
        target_field: "@timestamp"
        layouts:
          - '2006-01-02T15:04:05.000000Z'
          - '2006-01-02T15:04:05.000Z'
          - '2006-01-02T15:04:05Z'
          - '2006-01-02 15:04:05.000000'
          - '2006-01-02 15:04:05'
        test:
          - '2024-01-15T10:30:45.123456Z'
    
    # 로그 레벨 정규화
    - script:
        lang: javascript
        source: >
          function process(event) {
            var level = event.Get("log.level") || event.Get("level");
            if (level) {
              switch(level.toLowerCase()) {
                case "warn":
                case "warning":
                  event.Put("log.level", "WARN");
                  break;
                case "err":
                case "error":
                  event.Put("log.level", "ERROR");
                  break;
                case "crit":
                case "critical":
                case "fatal":
                  event.Put("log.level", "FATAL");
                  break;
                default:
                  event.Put("log.level", level.toUpperCase());
              }
            }
          }
    
    # 요청 ID 추출
    - dissect:
        tokenizer: '%{} request_id=%{request_id} %{}'
        field: "message"
        target_prefix: "request"
        ignore_failure: true
    
    # HTTP 정보 추출
    - dissect:
        tokenizer: '%{} method=%{method} path=%{path} status=%{status} duration=%{duration}ms %{}'
        field: "message"
        target_prefix: "http"
        ignore_failure: true
    
    # 에러 컨텍스트 추가
    - if:
        contains:
          log.level: "ERROR"
      then:
        - add_fields:
            target: "alert"
            fields:
              severity: "high"
              requires_attention: true
