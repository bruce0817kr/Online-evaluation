{
  "permissions": {
    "allow": [
      "Bash(find:*)",
      "Bash(python:*)",
      "Bash(docker-compose:*)",
      "Bash(grep:*)",
      "Bash(rg:*)",
      "Bash(chmod:*)",
      "Bash(pip install:*)",
      "Bash(pip3 install:*)",
      "Bash(ls:*)",
      "Bash(/usr/bin/python3 -m pip install:*)",
      "Bash(curl:*)",
      "Bash(cat:*)",
      "Bash(docker:*)",
      "Bash(sh:*)",
      "Bash(node:*)",
      "Bash(npm --version)",
      "Bash(mkdir:*)",
      "Bash(# Ïò§ÎûòÎêú Î≥¥Í≥†ÏÑúÎì§ÏùÑ archives/old_reportsÎ°ú Ïù¥Îèô\nmv *_COMPLETION_REPORT.md archives/old_reports/ 2>/dev/null || true\nmv *_STATUS_*.md archives/old_reports/ 2>/dev/null || true\nmv TASK_*.md archives/old_reports/ 2>/dev/null || true\nmv TODAY_WORK_SUMMARY.md archives/old_reports/ 2>/dev/null || true\nmv TOMORROW_CHECKLIST.md archives/old_reports/ 2>/dev/null || true\nmv NEXT_STEPS_PLAN.md archives/old_reports/ 2>/dev/null || true\necho \"Ïò§ÎûòÎêú Î≥¥Í≥†ÏÑú Ïù¥Îèô ÏôÑÎ£å\")",
      "Bash(# ÌÖåÏä§Ìä∏ ÌååÏùºÎì§ÏùÑ archives/test_filesÎ°ú Ïù¥Îèô\nmv *test*.py archives/test_files/ 2>/dev/null || true\nmv *test*.js archives/test_files/ 2>/dev/null || true\nmv *test*.json archives/test_files/ 2>/dev/null || true\nmv *test*.md archives/test_files/ 2>/dev/null || true\nmv simple_validation_report_*.json archives/test_files/ 2>/dev/null || true\necho \"ÌÖåÏä§Ìä∏ ÌååÏùº Ïù¥Îèô ÏôÑÎ£å\")",
      "Bash(# ÏûÑÏãú ÌååÏùºÎì§ÏùÑ archives/temp_filesÎ°ú Ïù¥Îèô\nmv debug_*.py archives/temp_files/ 2>/dev/null || true\nmv check_*.py archives/temp_files/ 2>/dev/null || true\nmv fix_*.py archives/temp_files/ 2>/dev/null || true\nmv create_*.py archives/temp_files/ 2>/dev/null || true\nmv migrate_*.py archives/temp_files/ 2>/dev/null || true\nmv add_*.py archives/temp_files/ 2>/dev/null || true\nmv verify_*.py archives/temp_files/ 2>/dev/null || true\nmv reproduce_*.py archives/temp_files/ 2>/dev/null || true\nmv get-*.* archives/temp_files/ 2>/dev/null || true\nmv *.backup* archives/temp_files/ 2>/dev/null || true\nmv *.tmp archives/temp_files/ 2>/dev/null || true\nmv *.db.backup archives/temp_files/ 2>/dev/null || true\necho \"ÏûÑÏãú ÌååÏùº Ïù¥Îèô ÏôÑÎ£å\")",
      "Bash(# Ïä§ÌÅ¨Î¶∞ÏÉ∑ ÎîîÎ†âÌÜ†Î¶¨Îì§ÏùÑ archives/screenshotsÎ°ú Ïù¥Îèô\nmv *screenshots* archives/screenshots/ 2>/dev/null || true\nmv screenshots archives/screenshots/main_screenshots 2>/dev/null || true\necho \"Ïä§ÌÅ¨Î¶∞ÏÉ∑ ÌååÏùº Ïù¥Îèô ÏôÑÎ£å\")",
      "Bash(# ÏÇ¨Ïö©ÌïòÏßÄ ÏïäÎäî ÏÑ§Ï†ï ÌååÏùºÎì§ Ï†ïÎ¶¨\nmv docker-compose*.yml archives/temp_files/ 2>/dev/null || true\n# Î©îÏù∏ docker-compose.ymlÏùÄ Îã§Ïãú Î≥µÏõê\ncp archives/temp_files/docker-compose.yml . 2>/dev/null || true\ncp archives/temp_files/docker-compose.dev.yml . 2>/dev/null || true\ncp archives/temp_files/docker-compose.prod.yml . 2>/dev/null || true\n\n# Ï§ëÎ≥µÎêú Ìå®ÌÇ§ÏßÄ ÌååÏùºÎì§ Ï†ïÎ¶¨  \nmv yarn.lock archives/temp_files/ 2>/dev/null || true\n\n# Ïò§ÎûòÎêú Ïä§ÌÅ¨Î¶ΩÌä∏Îì§ Ï†ïÎ¶¨\nmv build-and-deploy.* archives/temp_files/ 2>/dev/null || true\nmv port_manager.py archives/temp_files/ 2>/dev/null || true\nmv enhancement_plan.py archives/temp_files/ 2>/dev/null || true\n\necho \"Ï§ëÎ≥µ ÏÑ§Ï†ï ÌååÏùº Ï†ïÎ¶¨ ÏôÑÎ£å\")",
      "Bash(# Î≥µÏõêÎêú docker-compose.yml ÌôïÏù∏ Î∞è ÌïÑÏöîÏãú gitÏóêÏÑú Î≥µÏõê\nif [ ! -s docker-compose.yml ]; then\n    echo \"docker-compose.ymlÏù¥ ÎπÑÏñ¥ÏûàÏùå, Î≥µÏõê Ï§ë...\"\n    git checkout HEAD -- docker-compose.yml 2>/dev/null || echo \"git Î≥µÏõê Ïã§Ìå®\"\nfi\n\n# Í∏∞ÌÉÄ Ï†ïÎ¶¨\nmv *.html archives/temp_files/ 2>/dev/null || true\nmv *.ini archives/temp_files/ 2>/dev/null || true\nmv errors-*.md archives/temp_files/ 2>/dev/null || true\nmv workflow_test_report.json archives/temp_files/ 2>/dev/null || true\nmv allocated_ports.json archives/temp_files/ 2>/dev/null || true\n\necho \"Ï∂îÍ∞Ä ÌååÏùº Ï†ïÎ¶¨ ÏôÑÎ£å\")",
      "Bash(# ConPort Í¥ÄÎ†® ÌååÏùºÎì§ÏùÑ Î≥ÑÎèÑ ÎîîÎ†âÌÜ†Î¶¨Î°ú Ï†ïÎ¶¨\nmkdir -p archives/conport_related\nmv ConPort* archives/conport_related/ 2>/dev/null || true\nmv conport* archives/conport_related/ 2>/dev/null || true\nmv context-portal archives/conport_related/ 2>/dev/null || true\nmv context_portal archives/conport_related/ 2>/dev/null || true\nmv diagnose_conport.py archives/conport_related/ 2>/dev/null || true\nmv init_conport* archives/conport_related/ 2>/dev/null || true\n\necho \"ConPort Í¥ÄÎ†® ÌååÏùº Ï†ïÎ¶¨ ÏôÑÎ£å\")",
      "Bash(# Ï∂îÍ∞Ä Ï†ïÎ¶¨ - ÎÇ®ÏùÄ Î∂àÌïÑÏöîÌïú ÌååÏùºÎì§\nmkdir -p archives/temp_files/verification_results archives/temp_files/old_json_reports\n\n# Í≤ÄÏ¶ù Í≤∞Í≥º ÌååÏùºÎì§ Ï†ïÎ¶¨\nmv auth_status_fix_verification_results_*.json archives/temp_files/verification_results/ 2>/dev/null || true\nmv system_verification_report_*.json archives/temp_files/verification_results/ 2>/dev/null || true\nmv final_e2e_comprehensive_report_*.json archives/temp_files/verification_results/ 2>/dev/null || true\nmv elk_validation_report_*.json archives/temp_files/verification_results/ 2>/dev/null || true\nmv docker_deployment_report.json archives/temp_files/verification_results/ 2>/dev/null || true\n\n# Ïò§ÎûòÎêú JSON Î≥¥Í≥†ÏÑúÎì§ Ï†ïÎ¶¨  \nmv test_results/ archives/temp_files/old_json_reports/ 2>/dev/null || true\nmv test-results/ archives/temp_files/old_json_reports/ 2>/dev/null || true\n\n# Í∏∞ÌÉÄ Ï†ïÎ¶¨\nmv tests_e2e/ archives/temp_files/ 2>/dev/null || true\nmv alembic_conport/ archives/conport_related/ 2>/dev/null || true\nmv test_venv/ archives/temp_files/ 2>/dev/null || true\n\n# ÏÇ¨Ïö©ÌïòÏßÄ ÏïäÎäî Ïä§ÌÅ¨Î¶ΩÌä∏Îì§\nmv update_user*.js archives/temp_files/ 2>/dev/null || true\nmv insert_*.js archives/temp_files/ 2>/dev/null || true\nmv generate_hash.py archives/temp_files/ 2>/dev/null || true\nmv health_monitoring.py archives/temp_files/ 2>/dev/null || true\n\necho \"Ï∂îÍ∞Ä Ï†ïÎ¶¨ ÏôÑÎ£å\")",
      "Bash(# Ï§ëÏöîÌïú ÌååÏùºÎì§Îßå ÎÇ®Í∏∞Í≥† ÏµúÏ¢Ö Ï†ïÎ¶¨\nmkdir -p archives/temp_files/misc_docs\n\n# Í∏∞ÌÉÄ Î¨∏ÏÑúÎì§ Ï†ïÎ¶¨\nmv *Brief*.md archives/temp_files/misc_docs/ 2>/dev/null || true\nmv project_*.md archives/temp_files/misc_docs/ 2>/dev/null || true\nmv database-schema-analysis.md archives/temp_files/misc_docs/ 2>/dev/null || true\nmv security_enhancement_plan.md archives/temp_files/misc_docs/ 2>/dev/null || true\nmv final_completion_roadmap.md archives/temp_files/misc_docs/ 2>/dev/null || true\nmv detailed_module_fix_plan.md archives/temp_files/misc_docs/ 2>/dev/null || true\nmv api_404_final_completion.md archives/temp_files/misc_docs/ 2>/dev/null || true\n\n# ÌïúÍµ≠Ïñ¥ PDF Î¨∏ÏÑúÎì§ Ï†ïÎ¶¨ (Ïö©ÎüâÏù¥ ÌÅ∞ ÌååÏùºÎì§)\nmkdir -p archives/korean_docs\nmv \"Ïò®ÎùºÏù∏ ÌèâÍ∞Ä ÏãúÏä§ÌÖú\"*.pdf archives/korean_docs/ 2>/dev/null || true\nmv *ÌïúÍµ≠Ïñ¥*.md archives/korean_docs/ 2>/dev/null || true\n\necho \"ÏµúÏ¢Ö Ï†ïÎ¶¨ ÏôÑÎ£å\")",
      "Bash(powershell.exe:*)",
      "Bash(sed:*)",
      "Bash(true)",
      "Bash(rm:*)",
      "Bash(sudo apt:*)",
      "Bash(sudo apt install:*)",
      "Bash(for file in *.js)",
      "Bash(do echo \"=== $file ===\")",
      "Bash(done)",
      "Bash(npx taskqueue:*)",
      "Bash(npm install:*)",
      "Bash(mv:*)",
      "Bash(ss:*)",
      "Bash(echo:*)",
      "Bash(npm run build --silent)",
      "Bash(# Universal Port ManagerÎ•º ÏÇ¨Ïö©Ìï¥ÏÑú ÌîÑÎ°úÎçïÏÖò Ìè¨Ìä∏ Ìï†Îãπ\necho \"üöÄ Universal Port ManagerÎ°ú ÌîÑÎ°úÎçïÏÖò Ìè¨Ìä∏ Ìï†Îãπ\"\n\ncd /mnt/c/Project/Online-evaluation\n\n# UPMÏù¥ ÏûàÎäîÏßÄ ÌôïÏù∏\nif [ -d \"universal_port_manager\" ]; then\n  echo \"‚úÖ Universal Port Manager Î∞úÍ≤¨\"\n  \n  # ÌîÑÎ°úÎçïÏÖòÏö© ÏÉàÎ°úÏö¥ ÌîÑÎ°úÏ†ùÌä∏Î°ú Ìè¨Ìä∏ Ìï†Îãπ\n  python -m universal_port_manager --project online-evaluation-prod allocate frontend backend mongodb redis\n  \n  echo -e \"\\nüìä Ìï†ÎãπÎêú ÌîÑÎ°úÎçïÏÖò Ìè¨Ìä∏:\"\n  if [ -f \"ports.json\" ]; then\n    cat ports.json | head -20\n  fi\nelse\n  echo \"‚ùå Universal Port Manager ÏóÜÏùå, ÏàòÎèô Ìè¨Ìä∏ Ìï†Îãπ\"\n  \n  # ÏàòÎèôÏúºÎ°ú ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Ìè¨Ìä∏ Ï∞æÍ∏∞\n  echo -e \"\\nüîç ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Ìè¨Ìä∏ Î≤îÏúÑ Ïä§Ï∫î (3000-9000):\"\n  \n  for port in 3000 3001 8000 8001 8080 8081 27017 6379 5000 5001 9000 9001; do\n    if ! netstat -tuln 2>/dev/null | grep -q \":$port \"; then\n      echo \"‚úÖ Ìè¨Ìä∏ $port: ÏÇ¨Ïö© Í∞ÄÎä•\"\n    else\n      echo \"‚ùå Ìè¨Ìä∏ $port: ÏÇ¨Ïö© Ï§ë\"\n    fi\n  done\nfi)",
      "Bash(./deploy-production.sh deploy:*)",
      "Bash(bash:*)",
      "Bash(dos2unix:*)",
      "Bash(/usr/bin/python3:*)",
      "Bash(export JWT_SECRET=\"your-super-secure-jwt-secret-key-for-production\")",
      "Bash(JWT_SECRET=\"your-super-secure-jwt-secret-key-for-production\" docker-compose -f docker-compose.production.yml up -d)",
      "Bash(MONGO_URL=mongodb://localhost:27036/online_evaluation node scripts/create_test_accounts.js)",
      "Bash(npm ls:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git config:*)",
      "Bash(git push:*)",
      "Bash(git remote set-url:*)",
      "Bash(GIT_ASKPASS=echo git push origin main)",
      "Bash(npm test:*)",
      "Bash(sudo rm:*)",
      "Bash(npx playwright test:*)",
      "Bash(touch:*)",
      "WebFetch(domain:docs.anthropic.com)",
      "Bash(claude mcp add:*)",
      "Bash(claude mcp:*)",
      "Bash(npm run:*)",
      "Bash(npx eslint:*)",
      "Bash(apt list:*)",
      "Bash(npm audit:*)",
      "Bash(safety check:*)",
      "Bash(time npm run build:fast)",
      "Bash(gemini:*)",
      "Bash(GEMINI_USER_ID=\"e0b42c88-5e11-4766-bfa3-bbb40b339333\" gemini -p \"ÌÖåÏä§Ìä∏\")",
      "Bash(pytest:*)",
      "Bash(apt:*)",
      "Bash(apt install:*)",
      "Bash(wget:*)",
      "Bash(source:*)",
      "Bash(timeout 10 docker-compose -f docker-compose.test.yml run --rm backend-test python -c \"\nimport sys\nsys.path.append('/app')\nfrom server import *\nprint('=== Server loaded successfully ===')\n\")"
    ],
    "deny": []
  }
}