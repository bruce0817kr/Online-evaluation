name: 'CI/CD Pipeline - Online Evaluation System'

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    name: 'Run Tests'
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:latest
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: admin123
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
          
      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    
    steps:
    - name: 'Checkout code'
      uses: actions/checkout@v4
      
    - name: 'Setup Node.js'
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'
        
    - name: 'Setup Python'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: 'backend/requirements.txt'
        
    - name: 'Install backend dependencies'
      run: |
        cd backend
        pip install -r requirements.txt
        
    - name: 'Install frontend dependencies'
      run: |
        cd frontend
        npm ci
        
    - name: 'Install Playwright browsers'
      run: npx playwright install --with-deps
      
    - name: 'Lint backend code'
      run: |
        cd backend
        pip install flake8 black
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check .
        
    - name: 'Lint frontend code'
      run: |
        cd frontend
        npm run lint
        
    - name: 'Run backend unit tests'
      run: |
        cd backend
        python -m pytest tests/ -v --cov=. --cov-report=xml
      env:
        MONGODB_URL: mongodb://admin:admin123@localhost:27017/test_db?authSource=admin
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-secret-key
        
    - name: 'Build frontend'
      run: |
        cd frontend
        npm run build
        
    - name: 'Start backend server'
      run: |
        cd backend
        python -m uvicorn server:app --host 0.0.0.0 --port 8080 &
        sleep 10
      env:
        MONGODB_URL: mongodb://admin:admin123@localhost:27017/test_db?authSource=admin
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-secret-key
        
    - name: 'Start frontend server'
      run: |
        cd frontend
        npm start &
        sleep 15
      env:
        REACT_APP_BACKEND_URL: http://localhost:8080
        
    - name: 'Wait for services'
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8080/api/health; do sleep 1; done'
        timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 1; done'
        
    - name: 'Run E2E tests'
      run: npx playwright test
      env:
        BACKEND_URL: http://localhost:8080
        FRONTEND_URL: http://localhost:3000
        
    - name: 'Upload test results'
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          test-results/
          playwright-report/
          backend/coverage.xml
        retention-days: 30
        
    - name: 'Upload Playwright report'
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

  security-scan:
    name: 'Security Scan'
    runs-on: ubuntu-latest
    
    steps:
    - name: 'Checkout code'
      uses: actions/checkout@v4
      
    - name: 'Run Trivy vulnerability scanner'
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: 'Upload Trivy scan results'
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: 'Run CodeQL Analysis'
      uses: github/codeql-action/analyze@v3
      with:
        languages: javascript, python
        
    - name: 'Backend security check'
      run: |
        pip install safety bandit
        cd backend
        safety check -r requirements.txt
        bandit -r . -f json -o bandit-results.json
        
    - name: 'Frontend security check'
      run: |
        cd frontend
        npm audit --audit-level=high
        
    - name: 'Upload security results'
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-results
        path: |
          trivy-results.sarif
          backend/bandit-results.json
        retention-days: 30

  build:
    name: 'Build Docker Images'
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 'Checkout code'
      uses: actions/checkout@v4
      
    - name: 'Set up Docker Buildx'
      uses: docker/setup-buildx-action@v3
      
    - name: 'Login to GitHub Container Registry'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 'Build and push backend image'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.backend
        push: true
        tags: |
          ghcr.io/${{ github.repository }}/backend:latest
          ghcr.io/${{ github.repository }}/backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: 'Build and push frontend image'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.frontend
        push: true
        tags: |
          ghcr.io/${{ github.repository }}/frontend:latest
          ghcr.io/${{ github.repository }}/frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: 'Scan Docker images'
      run: |
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          aquasec/trivy:latest image \
          ghcr.io/${{ github.repository }}/backend:latest
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          aquasec/trivy:latest image \
          ghcr.io/${{ github.repository }}/frontend:latest

  deploy-staging:
    name: 'Deploy to Staging'
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: 'Checkout code'
      uses: actions/checkout@v4
      
    - name: 'Deploy to staging environment'
      run: |
        echo "Deploying to staging..."
        # Add actual deployment steps here
        # This could be:
        # - Updating Kubernetes manifests
        # - Using Docker Compose on staging server
        # - Deploying to cloud platform
        
    - name: 'Run smoke tests'
      run: |
        echo "Running smoke tests on staging..."
        # Add smoke test commands
        
    - name: 'Notify deployment status'
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

  deploy-production:
    name: 'Deploy to Production'
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: 'Checkout code'
      uses: actions/checkout@v4
      
    - name: 'Deploy to production environment'
      run: |
        echo "Deploying to production..."
        # Add actual production deployment steps
        
    - name: 'Run production health checks'
      run: |
        echo "Running production health checks..."
        # Add health check commands
        
    - name: 'Notify deployment status'
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()
