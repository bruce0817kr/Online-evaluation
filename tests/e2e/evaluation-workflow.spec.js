import { test, expect } from '../fixtures';

test.describe('Evaluation Workflow', () => {
  test.beforeEach(async ({ authHelper, apiHelper }) => {
    await authHelper.loginViaUI('admin', 'admin123');
    
    // Create test data if needed
    await apiHelper.ensureTestData();
  });

  test('should complete full evaluation workflow', async ({ page, apiHelper }) => {
    // Create a project with companies and template
    const project = await apiHelper.createProject(
      `ÏõåÌÅ¨ÌîåÎ°úÏö∞ ÌÖåÏä§Ìä∏ ÌîÑÎ°úÏ†ùÌä∏ ${Date.now()}`,
      'Ï†ÑÏ≤¥ ÌèâÍ∞Ä ÏõåÌÅ¨ÌîåÎ°úÏö∞ ÌÖåÏä§Ìä∏'
    );
    
    const template = await apiHelper.createTemplate(
      `ÏõåÌÅ¨ÌîåÎ°úÏö∞ ÌÖúÌîåÎ¶ø ${Date.now()}`,
      'ÏõåÌÅ¨ÌîåÎ°úÏö∞ ÌÖåÏä§Ìä∏Ïö© ÌÖúÌîåÎ¶ø',
      [
        { name: 'Í∏∞Ïà†Î†•', description: 'Í∏∞Ïà†Ï†Å Ïó≠Îüâ', weight: 40, maxScore: 100 },
        { name: 'ÏÇ¨ÏóÖÏÑ±', description: 'ÏÇ¨ÏóÖÏ†Å Í∞ÄÎä•ÏÑ±', weight: 35, maxScore: 100 },
        { name: 'ÏãúÏû•ÏÑ±', description: 'ÏãúÏû• ÏßÑÏûÖ Í∞ÄÎä•ÏÑ±', weight: 25, maxScore: 100 }
      ]
    );
    
    const company = await apiHelper.createCompany(
      `ÏõåÌÅ¨ÌîåÎ°úÏö∞ Í∏∞ÏóÖ ${Date.now()}`,
      '123-45-67890',
      project.data.id
    );
    
    // Navigate to evaluation creation
    await page.click('text=üìä ÌèâÍ∞Ä Í¥ÄÎ¶¨');
    await page.click('text=ÏÉà ÌèâÍ∞Ä ÏÉùÏÑ±');
    
    // Fill evaluation form
    await page.selectOption('select[name="project_id"]', project.data.id);
    await page.selectOption('select[name="template_id"]', template.data.id);
    await page.selectOption('select[name="company_id"]', company.data.id);
    
    // Submit evaluation creation
    await page.click('text=ÌèâÍ∞Ä ÏÉùÏÑ±');
    
    // Verify evaluation was created and redirect to evaluation page
    await expect(page.locator('.evaluation-form, .evaluation-page')).toBeVisible();
    
    // Fill out evaluation scores
    const criteriaCards = await page.locator('.criteria-card, .evaluation-criteria').count();
    expect(criteriaCards).toBe(3);
    
    // Score each criteria
    await page.fill('input[name="scores.Í∏∞Ïà†Î†•"], input[data-criteria="Í∏∞Ïà†Î†•"]', '85');
    await page.fill('textarea[name="comments.Í∏∞Ïà†Î†•"], textarea[data-criteria="Í∏∞Ïà†Î†•"]', 'Ïö∞ÏàòÌïú Í∏∞Ïà†Î†•ÏùÑ Î≥¥Ïú†ÌïòÍ≥† ÏûàÏùå');
    
    await page.fill('input[name="scores.ÏÇ¨ÏóÖÏÑ±"], input[data-criteria="ÏÇ¨ÏóÖÏÑ±"]', '78');
    await page.fill('textarea[name="comments.ÏÇ¨ÏóÖÏÑ±"], textarea[data-criteria="ÏÇ¨ÏóÖÏÑ±"]', 'ÏÇ¨ÏóÖ Î™®Îç∏Ïù¥ Î™ÖÌôïÌïòÍ≥† Ïã§ÌòÑ Í∞ÄÎä•ÏÑ±Ïù¥ ÎÜíÏùå');
    
    await page.fill('input[name="scores.ÏãúÏû•ÏÑ±"], input[data-criteria="ÏãúÏû•ÏÑ±"]', '82');
    await page.fill('textarea[name="comments.ÏãúÏû•ÏÑ±"], textarea[data-criteria="ÏãúÏû•ÏÑ±"]', 'ÏãúÏû• ÏöîÍµ¨Í∞Ä ÎÜíÍ≥† Í≤ΩÏüÅÎ†•Ïù¥ ÏûàÏùå');
    
    // Submit evaluation
    await page.click('text=ÌèâÍ∞Ä Ï†úÏ∂ú, text=ÌèâÍ∞Ä Ï†ÄÏû•');
    
    // Verify success message
    await expect(page.locator('.success-message, .alert-success')).toBeVisible();
    
    // Verify evaluation appears in list
    await page.click('text=ÌèâÍ∞Ä Î™©Î°ù');
    await expect(page.locator(`text=${company.data.name}`)).toBeVisible();
    
    // Calculate expected total score
    const expectedScore = (85 * 0.4) + (78 * 0.35) + (82 * 0.25);
    await expect(page.locator(`text=${expectedScore.toFixed(1)}`)).toBeVisible();
  });

  test('should handle evaluation draft and auto-save', async ({ page, apiHelper }) => {
    // Create test data
    const project = await apiHelper.createProject('Draft Test Project', 'Test project');
    const template = await apiHelper.createTemplate(
      'Draft Template',
      'Test template',
      [{ name: 'ÌÖåÏä§Ìä∏', description: 'ÌÖåÏä§Ìä∏', weight: 100, maxScore: 100 }]
    );
    const company = await apiHelper.createCompany('Draft Company', '111-11-11111', project.data.id);
    
    // Start evaluation
    await page.click('text=üìä ÌèâÍ∞Ä Í¥ÄÎ¶¨');
    await page.click('text=ÏÉà ÌèâÍ∞Ä ÏÉùÏÑ±');
    
    await page.selectOption('select[name="project_id"]', project.data.id);
    await page.selectOption('select[name="template_id"]', template.data.id);
    await page.selectOption('select[name="company_id"]', company.data.id);
    await page.click('text=ÌèâÍ∞Ä ÏÉùÏÑ±');
    
    // Fill partial evaluation
    await page.fill('input[name="scores.ÌÖåÏä§Ìä∏"]', '75');
    await page.fill('textarea[name="comments.ÌÖåÏä§Ìä∏"]', 'Î∂ÄÎ∂ÑÏ†ÅÏúºÎ°ú ÏûëÏÑ±Îêú ÌèâÍ∞ÄÏûÖÎãàÎã§.');
    
    // Save as draft
    if (await page.locator('text=ÏûÑÏãúÏ†ÄÏû•, text=ÎìúÎûòÌîÑÌä∏ Ï†ÄÏû•').isVisible()) {
      await page.click('text=ÏûÑÏãúÏ†ÄÏû•, text=ÎìúÎûòÌîÑÌä∏ Ï†ÄÏû•');
      await expect(page.locator('.success-message')).toBeVisible();
    }
    
    // Navigate away and back
    await page.click('text=üè† ÎåÄÏãúÎ≥¥Îìú');
    await page.click('text=üìä ÌèâÍ∞Ä Í¥ÄÎ¶¨');
    await page.click('text=ÌèâÍ∞Ä Î™©Î°ù');
    
    // Find draft evaluation
    const draftRow = page.locator(`tr:has-text("${company.data.name}"):has-text("ÏûÑÏãúÏ†ÄÏû•, ÎìúÎûòÌîÑÌä∏")`);
    if (await draftRow.isVisible()) {
      await draftRow.locator('text=Í≥ÑÏÜç ÏûëÏÑ±, text=Ìé∏Ïßë').click();
      
      // Verify data was saved
      await expect(page.locator('input[name="scores.ÌÖåÏä§Ìä∏"]')).toHaveValue('75');
      await expect(page.locator('textarea[name="comments.ÌÖåÏä§Ìä∏"]')).toHaveValue('Î∂ÄÎ∂ÑÏ†ÅÏúºÎ°ú ÏûëÏÑ±Îêú ÌèâÍ∞ÄÏûÖÎãàÎã§.');
    }
  });

  test('should validate evaluation input constraints', async ({ page, apiHelper }) => {
    // Create test data
    const project = await apiHelper.createProject('Validation Test', 'Test');
    const template = await apiHelper.createTemplate(
      'Validation Template',
      'Test',
      [{ name: 'Í≤ÄÏ¶ù', description: 'Í≤ÄÏ¶ù', weight: 100, maxScore: 100 }]
    );
    const company = await apiHelper.createCompany('Validation Company', '222-22-22222', project.data.id);
    
    await page.click('text=üìä ÌèâÍ∞Ä Í¥ÄÎ¶¨');
    await page.click('text=ÏÉà ÌèâÍ∞Ä ÏÉùÏÑ±');
    
    await page.selectOption('select[name="project_id"]', project.data.id);
    await page.selectOption('select[name="template_id"]', template.data.id);
    await page.selectOption('select[name="company_id"]', company.data.id);
    await page.click('text=ÌèâÍ∞Ä ÏÉùÏÑ±');
    
    // Test invalid score (over maximum)
    await page.fill('input[name="scores.Í≤ÄÏ¶ù"]', '150');
    await page.click('text=ÌèâÍ∞Ä Ï†úÏ∂ú, text=ÌèâÍ∞Ä Ï†ÄÏû•');
    
    // Should show validation error
    await expect(page.locator('.error-message, .field-error')).toBeVisible();
    
    // Test negative score
    await page.fill('input[name="scores.Í≤ÄÏ¶ù"]', '-10');
    await page.click('text=ÌèâÍ∞Ä Ï†úÏ∂ú, text=ÌèâÍ∞Ä Ï†ÄÏû•');
    
    // Should show validation error
    await expect(page.locator('.error-message, .field-error')).toBeVisible();
    
    // Test empty required fields
    await page.fill('input[name="scores.Í≤ÄÏ¶ù"]', '');
    await page.click('text=ÌèâÍ∞Ä Ï†úÏ∂ú, text=ÌèâÍ∞Ä Ï†ÄÏû•');
    
    // Should show validation error
    await expect(page.locator('.error-message, .field-error')).toBeVisible();
    
    // Test valid input
    await page.fill('input[name="scores.Í≤ÄÏ¶ù"]', '85');
    await page.fill('textarea[name="comments.Í≤ÄÏ¶ù"]', 'Ï†ÅÏ†àÌïú ÌèâÍ∞Ä Ï†êÏàòÏûÖÎãàÎã§.');
    await page.click('text=ÌèâÍ∞Ä Ï†úÏ∂ú, text=ÌèâÍ∞Ä Ï†ÄÏû•');
    
    // Should succeed
    await expect(page.locator('.success-message')).toBeVisible();
  });

  test('should handle file uploads in evaluation', async ({ page, apiHelper }) => {
    // Create test data
    const project = await apiHelper.createProject('File Upload Test', 'Test');
    const template = await apiHelper.createTemplate(
      'File Template',
      'Test',
      [{ name: 'ÌååÏùº', description: 'ÌååÏùº', weight: 100, maxScore: 100 }]
    );
    const company = await apiHelper.createCompany('File Company', '333-33-33333', project.data.id);
    
    await page.click('text=üìä ÌèâÍ∞Ä Í¥ÄÎ¶¨');
    await page.click('text=ÏÉà ÌèâÍ∞Ä ÏÉùÏÑ±');
    
    await page.selectOption('select[name="project_id"]', project.data.id);
    await page.selectOption('select[name="template_id"]', template.data.id);
    await page.selectOption('select[name="company_id"]', company.data.id);
    await page.click('text=ÌèâÍ∞Ä ÏÉùÏÑ±');
    
    // Check if file upload is available
    if (await page.locator('input[type="file"], .file-upload').isVisible()) {
      // Test file upload
      const fileInput = page.locator('input[type="file"]').first();
      
      // Create a test file
      const testFile = {
        name: 'test-document.pdf',
        mimeType: 'application/pdf',
        buffer: Buffer.from('Test PDF content')
      };
      
      await fileInput.setInputFiles(testFile);
      
      // Verify file appears in upload list
      await expect(page.locator('text=test-document.pdf')).toBeVisible();
      
      // Fill evaluation with uploaded file
      await page.fill('input[name="scores.ÌååÏùº"]', '90');
      await page.fill('textarea[name="comments.ÌååÏùº"]', 'Ï≤®Î∂Ä ÌååÏùºÍ≥º Ìï®Íªò ÌèâÍ∞ÄÎ•º ÏßÑÌñâÌñàÏäµÎãàÎã§.');
      
      // Submit evaluation
      await page.click('text=ÌèâÍ∞Ä Ï†úÏ∂ú, text=ÌèâÍ∞Ä Ï†ÄÏû•');
      await expect(page.locator('.success-message')).toBeVisible();
    }
  });

  test('should support batch evaluation creation', async ({ page, apiHelper }) => {
    // Create test data
    const project = await apiHelper.createProject('Batch Test Project', 'Batch evaluation test');
    const template = await apiHelper.createTemplate(
      'Batch Template',
      'Batch test',
      [{ name: 'ÏùºÍ¥Ñ', description: 'ÏùºÍ¥Ñ', weight: 100, maxScore: 100 }]
    );
    
    // Create multiple companies
    const companies = [];
    for (let i = 1; i <= 3; i++) {
      const company = await apiHelper.createCompany(
        `Batch Company ${i}`,
        `${i}${i}${i}-${i}${i}-${i}${i}${i}${i}${i}`,
        project.data.id
      );
      companies.push(company);
    }
    
    await page.click('text=üìä ÌèâÍ∞Ä Í¥ÄÎ¶¨');
    
    // Check if batch creation is available
    if (await page.locator('text=ÏùºÍ¥Ñ ÌèâÍ∞Ä ÏÉùÏÑ±, text=Ïó¨Îü¨ ÌèâÍ∞Ä ÏÉùÏÑ±').isVisible()) {
      await page.click('text=ÏùºÍ¥Ñ ÌèâÍ∞Ä ÏÉùÏÑ±, text=Ïó¨Îü¨ ÌèâÍ∞Ä ÏÉùÏÑ±');
      
      // Select project and template
      await page.selectOption('select[name="project_id"]', project.data.id);
      await page.selectOption('select[name="template_id"]', template.data.id);
      
      // Select all companies
      for (const company of companies) {
        await page.check(`input[value="${company.data.id}"]`);
      }
      
      // Create batch evaluations
      await page.click('text=ÏùºÍ¥Ñ ÏÉùÏÑ±');
      
      // Verify success
      await expect(page.locator('.success-message')).toBeVisible();
      
      // Verify all evaluations were created
      await page.click('text=ÌèâÍ∞Ä Î™©Î°ù');
      for (const company of companies) {
        await expect(page.locator(`text=${company.data.name}`)).toBeVisible();
      }
    }
  });

  test('should export evaluation results', async ({ page, apiHelper }) => {
    // Create evaluation with completed scores
    const project = await apiHelper.createProject('Export Test', 'Export test');
    const template = await apiHelper.createTemplate(
      'Export Template',
      'Export test',
      [
        { name: 'ÏàòÏ∂ú1', description: 'ÏàòÏ∂ú1', weight: 50, maxScore: 100 },
        { name: 'ÏàòÏ∂ú2', description: 'ÏàòÏ∂ú2', weight: 50, maxScore: 100 }
      ]
    );
    const company = await apiHelper.createCompany('Export Company', '444-44-44444', project.data.id);
    
    // Create evaluation via API for faster setup
    const evaluation = await apiHelper.createEvaluation(
      project.data.id,
      company.data.id,
      template.data.id,
      { 'ÏàòÏ∂ú1': 80, 'ÏàòÏ∂ú2': 90 },
      { 'ÏàòÏ∂ú1': 'Ï¢ãÏùÄ Ï†êÏàò', 'ÏàòÏ∂ú2': 'Îß§Ïö∞ Ï¢ãÏùÄ Ï†êÏàò' }
    );
    
    await page.click('text=üìä ÌèâÍ∞Ä Í¥ÄÎ¶¨');
    await page.click('text=ÌèâÍ∞Ä Î™©Î°ù');
    
    // Find evaluation and export
    const evaluationRow = page.locator(`tr:has-text("${company.data.name}")`);
    
    // Test individual export
    const downloadPromise = page.waitForEvent('download');
    await evaluationRow.locator('text=ÎÇ¥Î≥¥ÎÇ¥Í∏∞, text=Îã§Ïö¥Î°úÎìú').click();
    const download = await downloadPromise;
    
    expect(download.suggestedFilename()).toMatch(/.*\.(pdf|xlsx|json)$/);
    
    // Test bulk export if available
    if (await page.locator('text=Ï†ÑÏ≤¥ ÎÇ¥Î≥¥ÎÇ¥Í∏∞, text=ÏùºÍ¥Ñ ÎÇ¥Î≥¥ÎÇ¥Í∏∞').isVisible()) {
      const bulkDownloadPromise = page.waitForEvent('download');
      await page.click('text=Ï†ÑÏ≤¥ ÎÇ¥Î≥¥ÎÇ¥Í∏∞, text=ÏùºÍ¥Ñ ÎÇ¥Î≥¥ÎÇ¥Í∏∞');
      const bulkDownload = await bulkDownloadPromise;
      
      expect(bulkDownload.suggestedFilename()).toMatch(/.*\.(zip|xlsx)$/);
    }
  });

  test('should handle evaluation comments and feedback', async ({ page, apiHelper }) => {
    // Create test data
    const project = await apiHelper.createProject('Comment Test', 'Comment test');
    const template = await apiHelper.createTemplate(
      'Comment Template',
      'Comment test',
      [{ name: 'ÎåìÍ∏Ä', description: 'ÎåìÍ∏Ä', weight: 100, maxScore: 100 }]
    );
    const company = await apiHelper.createCompany('Comment Company', '555-55-55555', project.data.id);
    
    await page.click('text=üìä ÌèâÍ∞Ä Í¥ÄÎ¶¨');
    await page.click('text=ÏÉà ÌèâÍ∞Ä ÏÉùÏÑ±');
    
    await page.selectOption('select[name="project_id"]', project.data.id);
    await page.selectOption('select[name="template_id"]', template.data.id);
    await page.selectOption('select[name="company_id"]', company.data.id);
    await page.click('text=ÌèâÍ∞Ä ÏÉùÏÑ±');
    
    // Fill evaluation with detailed comments
    await page.fill('input[name="scores.ÎåìÍ∏Ä"]', '88');
    
    const detailedComment = `
ÏÉÅÏÑ∏ ÌèâÍ∞Ä ÏùòÍ≤¨:
1. Í∏∞Ïà†Ï†Å Ïö∞ÏàòÏÑ±: ÏµúÏã† Í∏∞Ïà†ÏùÑ Ï†ÅÏ†àÌûà ÌôúÏö©ÌïòÍ≥† ÏûàÏùå
2. ÏãúÏû• Ï†ëÍ∑ºÏÑ±: ÌÉÄÍ≤ü ÏãúÏû•Ïù¥ Î™ÖÌôïÌïòÍ≥† ÏßÑÏûÖ Ï†ÑÎûµÏù¥ Íµ¨Ï≤¥Ï†ÅÏûÑ
3. ÌåÄ Ïó≠Îüâ: ÌïµÏã¨ Ïù∏Î†•Ïùò Ï†ÑÎ¨∏ÏÑ±Ïù¥ ÎÜíÏùå
4. Í∞úÏÑ†ÏÇ¨Ìï≠: ÎßàÏºÄÌåÖ Ï†ÑÎûµÏùò Íµ¨Ï≤¥Ìôî ÌïÑÏöî

Ï†ÑÎ∞òÏ†ÅÏúºÎ°ú Ïö∞ÏàòÌïú ÌèâÍ∞Ä ÎåÄÏÉÅÏúºÎ°ú ÌåêÎã®Îê®.
    `.trim();
    
    await page.fill('textarea[name="comments.ÎåìÍ∏Ä"]', detailedComment);
    
    // Add overall evaluation summary if available
    if (await page.locator('textarea[name="overall_comments"], textarea[name="summary"]').isVisible()) {
      await page.fill(
        'textarea[name="overall_comments"], textarea[name="summary"]',
        'Ï¢ÖÌï©Ï†ÅÏúºÎ°ú Ìà¨Ïûê Í∞ÄÏπòÍ∞Ä ÎÜíÏùÄ Í∏∞ÏóÖÏúºÎ°ú ÌèâÍ∞ÄÎê©ÎãàÎã§.'
      );
    }
    
    // Submit evaluation
    await page.click('text=ÌèâÍ∞Ä Ï†úÏ∂ú');
    await expect(page.locator('.success-message')).toBeVisible();
    
    // Verify comments are saved by viewing the evaluation
    await page.click('text=ÌèâÍ∞Ä Î™©Î°ù');
    const evaluationRow = page.locator(`tr:has-text("${company.data.name}")`);
    await evaluationRow.locator('text=Î≥¥Í∏∞, text=ÏÉÅÏÑ∏').click();
    
    // Verify detailed comments are displayed
    await expect(page.locator('text=Í∏∞Ïà†Ï†Å Ïö∞ÏàòÏÑ±')).toBeVisible();
    await expect(page.locator('text=ÎßàÏºÄÌåÖ Ï†ÑÎûµÏùò Íµ¨Ï≤¥Ìôî')).toBeVisible();
  });

  test('should track evaluation history and revisions', async ({ page, apiHelper }) => {
    // Create test data
    const project = await apiHelper.createProject('History Test', 'History test');
    const template = await apiHelper.createTemplate(
      'History Template',
      'History test',
      [{ name: 'Ïù¥Î†•', description: 'Ïù¥Î†•', weight: 100, maxScore: 100 }]
    );
    const company = await apiHelper.createCompany('History Company', '666-66-66666', project.data.id);
    
    // Create initial evaluation
    await page.click('text=üìä ÌèâÍ∞Ä Í¥ÄÎ¶¨');
    await page.click('text=ÏÉà ÌèâÍ∞Ä ÏÉùÏÑ±');
    
    await page.selectOption('select[name="project_id"]', project.data.id);
    await page.selectOption('select[name="template_id"]', template.data.id);
    await page.selectOption('select[name="company_id"]', company.data.id);
    await page.click('text=ÌèâÍ∞Ä ÏÉùÏÑ±');
    
    // Initial evaluation
    await page.fill('input[name="scores.Ïù¥Î†•"]', '75');
    await page.fill('textarea[name="comments.Ïù¥Î†•"]', 'Ï¥àÍ∏∞ ÌèâÍ∞Ä ÏùòÍ≤¨ÏûÖÎãàÎã§.');
    await page.click('text=ÌèâÍ∞Ä Ï†úÏ∂ú');
    await expect(page.locator('.success-message')).toBeVisible();
    
    // Edit evaluation if possible
    await page.click('text=ÌèâÍ∞Ä Î™©Î°ù');
    const evaluationRow = page.locator(`tr:has-text("${company.data.name}")`);
    
    if (await evaluationRow.locator('text=ÏàòÏ†ï, text=Ìé∏Ïßë').isVisible()) {
      await evaluationRow.locator('text=ÏàòÏ†ï, text=Ìé∏Ïßë').click();
      
      // Modify scores
      await page.fill('input[name="scores.Ïù¥Î†•"]', '85');
      await page.fill('textarea[name="comments.Ïù¥Î†•"]', 'ÏàòÏ†ïÎêú ÌèâÍ∞Ä ÏùòÍ≤¨ÏûÖÎãàÎã§. Ï∂îÍ∞ÄÏ†ÅÏù∏ Ï†ïÎ≥¥Î•º Î∞òÏòÅÌñàÏäµÎãàÎã§.');
      await page.click('text=Î≥ÄÍ≤ΩÏÇ¨Ìï≠ Ï†ÄÏû•');
      await expect(page.locator('.success-message')).toBeVisible();
      
      // Check if revision history is available
      if (await page.locator('text=Ïù¥Î†• Î≥¥Í∏∞, text=Î≥ÄÍ≤Ω Í∏∞Î°ù').isVisible()) {
        await page.click('text=Ïù¥Î†• Î≥¥Í∏∞, text=Î≥ÄÍ≤Ω Í∏∞Î°ù');
        
        // Verify both versions are shown
        await expect(page.locator('text=75')).toBeVisible(); // Original score
        await expect(page.locator('text=85')).toBeVisible(); // Updated score
        await expect(page.locator('text=Ï¥àÍ∏∞ ÌèâÍ∞Ä ÏùòÍ≤¨')).toBeVisible();
        await expect(page.locator('text=ÏàòÏ†ïÎêú ÌèâÍ∞Ä ÏùòÍ≤¨')).toBeVisible();
      }
    }
  });

  test('should handle evaluation status workflow', async ({ page, apiHelper }) => {
    // Create test data
    const project = await apiHelper.createProject('Status Test', 'Status workflow test');
    const template = await apiHelper.createTemplate(
      'Status Template',
      'Status test',
      [{ name: 'ÏÉÅÌÉú', description: 'ÏÉÅÌÉú', weight: 100, maxScore: 100 }]
    );
    const company = await apiHelper.createCompany('Status Company', '777-77-77777', project.data.id);
    
    await page.click('text=üìä ÌèâÍ∞Ä Í¥ÄÎ¶¨');
    await page.click('text=ÏÉà ÌèâÍ∞Ä ÏÉùÏÑ±');
    
    await page.selectOption('select[name="project_id"]', project.data.id);
    await page.selectOption('select[name="template_id"]', template.data.id);
    await page.selectOption('select[name="company_id"]', company.data.id);
    await page.click('text=ÌèâÍ∞Ä ÏÉùÏÑ±');
    
    // Fill evaluation
    await page.fill('input[name="scores.ÏÉÅÌÉú"]', '92');
    await page.fill('textarea[name="comments.ÏÉÅÌÉú"]', 'ÏÉÅÌÉú Î≥ÄÌôî ÌÖåÏä§Ìä∏ ÌèâÍ∞Ä');
    
    // Submit for review if workflow exists
    if (await page.locator('text=Í≤ÄÌÜ† ÏöîÏ≤≠, text=ÏäπÏù∏ ÏöîÏ≤≠').isVisible()) {
      await page.click('text=Í≤ÄÌÜ† ÏöîÏ≤≠, text=ÏäπÏù∏ ÏöîÏ≤≠');
      await expect(page.locator('.success-message')).toBeVisible();
      
      // Check status in list
      await page.click('text=ÌèâÍ∞Ä Î™©Î°ù');
      const statusCell = page.locator(`tr:has-text("${company.data.name}") .status, tr:has-text("${company.data.name}") td:has-text("Í≤ÄÌÜ†")`);
      await expect(statusCell).toBeVisible();
      
      // If there's an approve/reject function
      if (await page.locator('text=ÏäπÏù∏, text=Î∞òÎ†§').isVisible()) {
        await page.click('text=ÏäπÏù∏');
        await expect(page.locator('text=ÏäπÏù∏Îê®, text=ÏôÑÎ£å')).toBeVisible();
      }
    } else {
      // Simple submit
      await page.click('text=ÌèâÍ∞Ä Ï†úÏ∂ú');
      await expect(page.locator('.success-message')).toBeVisible();
    }
  });
});