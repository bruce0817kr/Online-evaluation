{
  "info": {
    "name": "Online Evaluation System API Tests",
    "description": "Comprehensive API test collection for the Online Evaluation System",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{authToken}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script",
          "pm.request.headers.add({",
          "    key: 'Content-Type',",
          "    value: 'application/json'",
          "});",
          "",
          "// Add test environment header",
          "pm.request.headers.add({",
          "    key: 'X-Test-Environment',",
          "    value: 'true'",
          "});"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script",
          "pm.test('Response time is less than 1000ms', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(1000);",
          "});",
          "",
          "pm.test('Response has valid content type', function () {",
          "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "});"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Login - Admin",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has access token', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('access_token');",
                  "    pm.expect(jsonData.access_token).to.be.a('string');",
                  "    ",
                  "    // Store token for subsequent requests",
                  "    pm.collectionVariables.set('authToken', jsonData.access_token);",
                  "});",
                  "",
                  "pm.test('Response has correct user role', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.user.role).to.equal('admin');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"login_id\": \"admin\",\n    \"password\": \"admin123!@#\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            }
          }
        },
        {
          "name": "Get Current User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has user information', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('user_id');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('role');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/auth/me",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "me"]
            }
          }
        },
        {
          "name": "Logout",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Successfully logged out', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('logout');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/auth/logout",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "logout"]
            }
          }
        }
      ]
    },
    {
      "name": "Templates",
      "item": [
        {
          "name": "Get All Templates",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Templates have required fields', function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        const template = jsonData[0];",
                  "        pm.expect(template).to.have.property('_id');",
                  "        pm.expect(template).to.have.property('template_name');",
                  "        pm.expect(template).to.have.property('criteria');",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/templates",
              "host": ["{{baseUrl}}"],
              "path": ["api", "templates"]
            }
          }
        },
        {
          "name": "Create Template",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Template created successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('template_id');",
                  "    ",
                  "    // Store template ID for later tests",
                  "    pm.collectionVariables.set('templateId', jsonData.template_id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"template_name\": \"API Test Template\",\n    \"template_type\": \"score\",\n    \"criteria\": [\n        {\n            \"criterion_name\": \"Quality\",\n            \"max_score\": 10,\n            \"score_step\": 1\n        },\n        {\n            \"criterion_name\": \"Innovation\",\n            \"max_score\": 20,\n            \"score_step\": 2\n        }\n    ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/templates",
              "host": ["{{baseUrl}}"],
              "path": ["api", "templates"]
            }
          }
        },
        {
          "name": "Update Template",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Template updated successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('updated');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"template_name\": \"Updated API Test Template\",\n    \"template_type\": \"score\",\n    \"criteria\": [\n        {\n            \"criterion_name\": \"Quality\",\n            \"max_score\": 15,\n            \"score_step\": 1\n        },\n        {\n            \"criterion_name\": \"Innovation\",\n            \"max_score\": 25,\n            \"score_step\": 5\n        }\n    ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/templates/{{templateId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "templates", "{{templateId}}"]
            }
          }
        },
        {
          "name": "Delete Template",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Template deleted successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('deleted');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/templates/{{templateId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "templates", "{{templateId}}"]
            }
          }
        }
      ]
    },
    {
      "name": "Evaluations",
      "item": [
        {
          "name": "Get All Evaluations",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/evaluations",
              "host": ["{{baseUrl}}"],
              "path": ["api", "evaluations"]
            }
          }
        },
        {
          "name": "Create Evaluation",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Evaluation created successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('evaluation_id');",
                  "    ",
                  "    // Store evaluation ID",
                  "    pm.collectionVariables.set('evaluationId', jsonData.evaluation_id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"project_id\": \"{{projectId}}\",\n    \"company_id\": \"{{companyId}}\",\n    \"template_id\": \"{{templateId}}\",\n    \"scores\": {\n        \"Quality\": 8,\n        \"Innovation\": 16\n    },\n    \"comments\": \"API test evaluation\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/evaluations",
              "host": ["{{baseUrl}}"],
              "path": ["api", "evaluations"]
            }
          }
        },
        {
          "name": "Export Evaluation as PDF",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is PDF', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/pdf');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/evaluations/{{evaluationId}}/export/pdf",
              "host": ["{{baseUrl}}"],
              "path": ["api", "evaluations", "{{evaluationId}}", "export", "pdf"]
            }
          }
        },
        {
          "name": "Bulk Export Evaluations",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is ZIP file', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/zip');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"evaluation_ids\": [\"{{evaluationId}}\"],\n    \"format\": \"pdf\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/evaluations/bulk-export",
              "host": ["{{baseUrl}}"],
              "path": ["api", "evaluations", "bulk-export"]
            }
          }
        }
      ]
    },
    {
      "name": "AI Model Management",
      "item": [
        {
          "name": "Get AI Models",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has AI models', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/ai/models",
              "host": ["{{baseUrl}}"],
              "path": ["api", "ai", "models"]
            }
          }
        },
        {
          "name": "Test AI Provider",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('AI provider test successful', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"provider\": \"openai\",\n    \"api_key\": \"test-key\",\n    \"model\": \"gpt-3.5-turbo\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/ai/test-provider",
              "host": ["{{baseUrl}}"],
              "path": ["api", "ai", "test-provider"]
            }
          }
        }
      ]
    },
    {
      "name": "Performance Tests",
      "item": [
        {
          "name": "Concurrent Login Requests",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Handles concurrent requests', function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"login_id\": \"admin\",\n    \"password\": \"admin123!@#\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            }
          }
        },
        {
          "name": "Large Data Request",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Handles large data efficiently', function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response size is reasonable', function () {",
                  "    const size = pm.response.size();",
                  "    pm.expect(size).to.be.below(10485760); // 10MB",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/evaluations?limit=1000",
              "host": ["{{baseUrl}}"],
              "path": ["api", "evaluations"],
              "query": [
                {
                  "key": "limit",
                  "value": "1000"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Security Tests",
      "item": [
        {
          "name": "SQL Injection Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Prevents SQL injection', function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"login_id\": \"admin' OR '1'='1\",\n    \"password\": \"' OR '1'='1\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            }
          }
        },
        {
          "name": "XSS Prevention Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Prevents XSS attacks', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.template_name).to.not.include('<script>');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"template_name\": \"<script>alert('XSS')</script>\",\n    \"template_type\": \"score\",\n    \"criteria\": []\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/templates",
              "host": ["{{baseUrl}}"],
              "path": ["api", "templates"]
            }
          }
        },
        {
          "name": "Unauthorized Access Test",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Remove auth token for this request",
                  "pm.request.headers.remove('Authorization');"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Prevents unauthorized access', function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/templates",
              "host": ["{{baseUrl}}"],
              "path": ["api", "templates"]
            }
          }
        }
      ]
    }
  ]
}