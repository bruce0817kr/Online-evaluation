{
  "collection": {
    "item": [
      {
        "id": "73c9781a-ce7e-48ad-8e84-cd3c9cdf9ba4",
        "name": "Authentication",
        "item": [
          {
            "id": "0085140a-b774-4c8f-bc81-1f6ff3b93119",
            "name": "Login - Admin",
            "request": {
              "url": {
                "path": [
                  "api",
                  "auth",
                  "login"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"login_id\": \"admin\",\n    \"password\": \"admin123!@#\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "968b987b-35d8-45e7-86ea-7fe0bf44d3e4",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Response has access token', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('access_token');",
                    "    pm.expect(jsonData.access_token).to.be.a('string');",
                    "    ",
                    "    // Store token for subsequent requests",
                    "    pm.collectionVariables.set('authToken', jsonData.access_token);",
                    "});",
                    "",
                    "pm.test('Response has correct user role', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData.user.role).to.equal('admin');",
                    "});"
                  ],
                  "_lastExecutionId": "3c54578a-842c-4065-885f-55b07ab5112b"
                }
              }
            ]
          },
          {
            "id": "d790d080-67bb-4cae-b17a-f85cbe617534",
            "name": "Get Current User",
            "request": {
              "url": {
                "path": [
                  "api",
                  "auth",
                  "me"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "f546f6bc-424e-4630-a343-fbff6d911d3c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Response has user information', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('user_id');",
                    "    pm.expect(jsonData).to.have.property('name');",
                    "    pm.expect(jsonData).to.have.property('role');",
                    "});"
                  ],
                  "_lastExecutionId": "9c728d6d-a24a-49ac-9861-b28710448d2a"
                }
              }
            ]
          },
          {
            "id": "812c3f6d-e35e-41cc-bb29-a96da42d089b",
            "name": "Logout",
            "request": {
              "url": {
                "path": [
                  "api",
                  "auth",
                  "logout"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "dedc75ac-b376-4a5f-9874-f073a9f75332",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Successfully logged out', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData.message).to.include('logout');",
                    "});"
                  ],
                  "_lastExecutionId": "0a778728-9fc1-4306-aa1d-e124adf43cf9"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "aec415cd-5d3a-459b-a6c0-2fcc973e625b",
        "name": "Templates",
        "item": [
          {
            "id": "7b554153-df5b-47a9-825c-69b8218df1f7",
            "name": "Get All Templates",
            "request": {
              "url": {
                "path": [
                  "api",
                  "templates"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "686c7de9-ee17-4c6e-a113-995e4e499314",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Response is an array', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.be.an('array');",
                    "});",
                    "",
                    "pm.test('Templates have required fields', function () {",
                    "    const jsonData = pm.response.json();",
                    "    if (jsonData.length > 0) {",
                    "        const template = jsonData[0];",
                    "        pm.expect(template).to.have.property('_id');",
                    "        pm.expect(template).to.have.property('template_name');",
                    "        pm.expect(template).to.have.property('criteria');",
                    "    }",
                    "});"
                  ],
                  "_lastExecutionId": "acc013f7-a79a-4905-b6c0-ab435e6a1da1"
                }
              }
            ]
          },
          {
            "id": "c4e6980d-0de6-48ff-8faa-e81e17b7fcec",
            "name": "Create Template",
            "request": {
              "url": {
                "path": [
                  "api",
                  "templates"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"template_name\": \"API Test Template\",\n    \"template_type\": \"score\",\n    \"criteria\": [\n        {\n            \"criterion_name\": \"Quality\",\n            \"max_score\": 10,\n            \"score_step\": 1\n        },\n        {\n            \"criterion_name\": \"Innovation\",\n            \"max_score\": 20,\n            \"score_step\": 2\n        }\n    ]\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "35904553-5851-429f-bd8f-68912f860c55",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 201', function () {",
                    "    pm.response.to.have.status(201);",
                    "});",
                    "",
                    "pm.test('Template created successfully', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('template_id');",
                    "    ",
                    "    // Store template ID for later tests",
                    "    pm.collectionVariables.set('templateId', jsonData.template_id);",
                    "});"
                  ],
                  "_lastExecutionId": "39da35b5-3ab6-4144-ad1d-20b5a59160e4"
                }
              }
            ]
          },
          {
            "id": "3a45bcf7-d3d3-4875-8044-89f012aeec03",
            "name": "Update Template",
            "request": {
              "url": {
                "path": [
                  "api",
                  "templates",
                  "{{templateId}}"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"template_name\": \"Updated API Test Template\",\n    \"template_type\": \"score\",\n    \"criteria\": [\n        {\n            \"criterion_name\": \"Quality\",\n            \"max_score\": 15,\n            \"score_step\": 1\n        },\n        {\n            \"criterion_name\": \"Innovation\",\n            \"max_score\": 25,\n            \"score_step\": 5\n        }\n    ]\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "a31e264f-06f1-4413-bdaa-b29b41fc8da1",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Template updated successfully', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData.message).to.include('updated');",
                    "});"
                  ],
                  "_lastExecutionId": "b7b9c346-0bc6-4792-876d-b73407aa9458"
                }
              }
            ]
          },
          {
            "id": "0f384cd2-4ecf-4e63-8c5b-6a49762b292e",
            "name": "Delete Template",
            "request": {
              "url": {
                "path": [
                  "api",
                  "templates",
                  "{{templateId}}"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "9183c18c-d992-4090-83be-c9935a5979a1",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Template deleted successfully', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData.message).to.include('deleted');",
                    "});"
                  ],
                  "_lastExecutionId": "590fa35f-6c26-4aa9-857f-2f181bd3db01"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "41b5405c-a8f0-4c08-a892-8f302290cb53",
        "name": "Evaluations",
        "item": [
          {
            "id": "5e406380-c6b9-4e25-9ad4-ecb41372e91d",
            "name": "Get All Evaluations",
            "request": {
              "url": {
                "path": [
                  "api",
                  "evaluations"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "dc4815a8-9649-46ed-8792-b21319438a30",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Response is an array', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.be.an('array');",
                    "});"
                  ],
                  "_lastExecutionId": "302e0809-4a1a-4942-8532-c24f976ef94b"
                }
              }
            ]
          },
          {
            "id": "e5cba38c-9563-4b1c-9c90-1a3dce8cf681",
            "name": "Create Evaluation",
            "request": {
              "url": {
                "path": [
                  "api",
                  "evaluations"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"project_id\": \"{{projectId}}\",\n    \"company_id\": \"{{companyId}}\",\n    \"template_id\": \"{{templateId}}\",\n    \"scores\": {\n        \"Quality\": 8,\n        \"Innovation\": 16\n    },\n    \"comments\": \"API test evaluation\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "879bd3c2-c6e9-4c3a-907f-5e65cb3107f9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 201', function () {",
                    "    pm.response.to.have.status(201);",
                    "});",
                    "",
                    "pm.test('Evaluation created successfully', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('evaluation_id');",
                    "    ",
                    "    // Store evaluation ID",
                    "    pm.collectionVariables.set('evaluationId', jsonData.evaluation_id);",
                    "});"
                  ],
                  "_lastExecutionId": "c5d431f3-b02c-4281-943e-044b870a6aa8"
                }
              }
            ]
          },
          {
            "id": "dede4546-b5d5-495f-b824-a28c91046702",
            "name": "Export Evaluation as PDF",
            "request": {
              "url": {
                "path": [
                  "api",
                  "evaluations",
                  "{{evaluationId}}",
                  "export",
                  "pdf"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "5a131402-103b-47cb-b09d-34af73e0c9bc",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Response is PDF', function () {",
                    "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/pdf');",
                    "});"
                  ],
                  "_lastExecutionId": "5ac13351-6c6e-4b77-95af-f8a6814a7326"
                }
              }
            ]
          },
          {
            "id": "1f0a6d72-1c7f-4899-b923-4a2c6e8b771d",
            "name": "Bulk Export Evaluations",
            "request": {
              "url": {
                "path": [
                  "api",
                  "evaluations",
                  "bulk-export"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"evaluation_ids\": [\"{{evaluationId}}\"],\n    \"format\": \"pdf\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ab89637c-14f2-4005-b109-7964eda7ec51",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Response is ZIP file', function () {",
                    "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/zip');",
                    "});"
                  ],
                  "_lastExecutionId": "750c3864-59b7-40f6-99f7-b9bb55a78fd7"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "754c4987-09e2-4831-8fc8-a9d434c935c0",
        "name": "AI Model Management",
        "item": [
          {
            "id": "7b841149-36ea-489e-b8b2-f5d915a479d2",
            "name": "Get AI Models",
            "request": {
              "url": {
                "path": [
                  "api",
                  "ai",
                  "models"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "0f056291-b663-4728-9732-a3b48e00b826",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Response has AI models', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.be.an('array');",
                    "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                    "});"
                  ],
                  "_lastExecutionId": "d6617831-4608-4705-8e06-d6b877b13f12"
                }
              }
            ]
          },
          {
            "id": "015d8906-71a0-47ed-b81b-45769c801665",
            "name": "Test AI Provider",
            "request": {
              "url": {
                "path": [
                  "api",
                  "ai",
                  "test-provider"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"provider\": \"openai\",\n    \"api_key\": \"test-key\",\n    \"model\": \"gpt-3.5-turbo\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "1f18c1a7-097c-43c5-896a-aaa8506f631c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('AI provider test successful', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('success');",
                    "    pm.expect(jsonData.success).to.be.true;",
                    "});"
                  ],
                  "_lastExecutionId": "7749775f-1b3f-49b0-834c-c0025cc3a586"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "92adf09d-14c9-4a85-8d7e-87770f13f3e3",
        "name": "Performance Tests",
        "item": [
          {
            "id": "989aae43-980f-4781-90e6-94ff6ddca76e",
            "name": "Concurrent Login Requests",
            "request": {
              "url": {
                "path": [
                  "api",
                  "auth",
                  "login"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"login_id\": \"admin\",\n    \"password\": \"admin123!@#\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "2d02797f-1218-4919-b75b-78cb1dca035f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Handles concurrent requests', function () {",
                    "    pm.response.to.have.status(200);",
                    "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                    "});"
                  ],
                  "_lastExecutionId": "c3898395-4fbc-464f-9d01-53061e48ebc5"
                }
              }
            ]
          },
          {
            "id": "3b689212-685d-4814-80e7-5990493fd986",
            "name": "Large Data Request",
            "request": {
              "url": {
                "path": [
                  "api",
                  "evaluations"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [
                  {
                    "key": "limit",
                    "value": "1000"
                  }
                ],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "b08c3c45-f55c-40ec-acec-6e5a20b7f636",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Handles large data efficiently', function () {",
                    "    pm.response.to.have.status(200);",
                    "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                    "});",
                    "",
                    "pm.test('Response size is reasonable', function () {",
                    "    const size = pm.response.size();",
                    "    pm.expect(size).to.be.below(10485760); // 10MB",
                    "});"
                  ],
                  "_lastExecutionId": "8e7164dc-abb1-42f4-a160-dc61d4ab0686"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "c0c91299-5e53-4e3b-91aa-40be1b6a8027",
        "name": "Security Tests",
        "item": [
          {
            "id": "63f8e8b1-0969-4ae3-9443-e10bc5776f6b",
            "name": "SQL Injection Test",
            "request": {
              "url": {
                "path": [
                  "api",
                  "auth",
                  "login"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"login_id\": \"admin' OR '1'='1\",\n    \"password\": \"' OR '1'='1\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "35cd1bf2-549d-4987-9150-f0d79232f03a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Prevents SQL injection', function () {",
                    "    pm.response.to.have.status(400);",
                    "});"
                  ],
                  "_lastExecutionId": "956fc2d0-150f-41c9-8ea9-0fcb7949a5a3"
                }
              }
            ]
          },
          {
            "id": "e558a0c2-7ee4-4e0d-9f57-224a31b067c5",
            "name": "XSS Prevention Test",
            "request": {
              "url": {
                "path": [
                  "api",
                  "templates"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"template_name\": \"<script>alert('XSS')</script>\",\n    \"template_type\": \"score\",\n    \"criteria\": []\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "8f16486d-d113-497e-a0f3-78c7c707ad02",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Prevents XSS attacks', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData.template_name).to.not.include('<script>');",
                    "});"
                  ],
                  "_lastExecutionId": "0fe77f8b-4840-4c4f-bb46-05ec8d55b1e8"
                }
              }
            ]
          },
          {
            "id": "3cc42d86-5eb0-4449-834c-45a9a782ffe5",
            "name": "Unauthorized Access Test",
            "request": {
              "url": {
                "path": [
                  "api",
                  "templates"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "09ddebb5-17f4-46c8-b6d1-d5c16cd9c372",
                  "type": "text/javascript",
                  "exec": [
                    "// Remove auth token for this request",
                    "pm.request.headers.remove('Authorization');"
                  ],
                  "_lastExecutionId": "ac710d9d-687f-49b1-9cad-3087d7059bbc"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0cf436fb-8492-4bf1-9859-2b0ba6a6ca53",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Prevents unauthorized access', function () {",
                    "    pm.response.to.have.status(401);",
                    "});"
                  ],
                  "_lastExecutionId": "df22f613-9fe3-481a-a5bd-c698819e07b1"
                }
              }
            ]
          }
        ],
        "event": []
      }
    ],
    "auth": {
      "type": "bearer",
      "bearer": [
        {
          "type": "string",
          "value": "{{authToken}}",
          "key": "token"
        }
      ]
    },
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "c971521c-e1df-4aca-9a2e-5b22c6f313f4",
          "type": "text/javascript",
          "exec": [
            "// Global pre-request script",
            "pm.request.headers.add({",
            "    key: 'Content-Type',",
            "    value: 'application/json'",
            "});",
            "",
            "// Add test environment header",
            "pm.request.headers.add({",
            "    key: 'X-Test-Environment',",
            "    value: 'true'",
            "});"
          ],
          "_lastExecutionId": "08f83f21-1854-4328-9d2f-52b5a120bfbb"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "1ff9de9c-a125-4b3a-b83e-e2cac41c4083",
          "type": "text/javascript",
          "exec": [
            "// Global test script",
            "pm.test('Response time is less than 1000ms', function () {",
            "    pm.expect(pm.response.responseTime).to.be.below(1000);",
            "});",
            "",
            "pm.test('Response has valid content type', function () {",
            "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
            "});"
          ],
          "_lastExecutionId": "0a25dcaf-51de-43e6-ba30-f1f99e0d154a"
        }
      }
    ],
    "variable": [
      {
        "type": "string",
        "value": "http://localhost:8080",
        "key": "baseUrl"
      },
      {
        "type": "string",
        "value": "",
        "key": "authToken"
      }
    ],
    "info": {
      "_postman_id": "fc5f6ff7-9cd7-4994-9a8b-8fb1e0f164ab",
      "name": "Online Evaluation System API Tests",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "Comprehensive API test collection for the Online Evaluation System",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "id": "2913d4c1-2c5e-4565-b72b-6c2a089f8d50",
    "values": []
  },
  "globals": {
    "id": "20306fcb-1fa4-4485-82d9-7c1e1b4b63d0",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 18,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 55,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 18,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 18,
        "pending": 0,
        "failed": 18
      },
      "tests": {
        "total": 18,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 70,
        "pending": 0,
        "failed": 70
      },
      "testScripts": {
        "total": 36,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 19,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 0,
      "responseMin": 0,
      "responseMax": 0,
      "responseSd": 0,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1751098978575,
      "completed": 1751098978858
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 18,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "34f86017-717c-4489-beb0-3c5f90bfa0b2",
          "httpRequestId": "e11075b1-2477-4c10-a2db-992ca56c9532"
        },
        "item": {
          "id": "0085140a-b774-4c8f-bc81-1f6ff3b93119",
          "name": "Login - Admin",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"login_id\": \"admin\",\n    \"password\": \"admin123!@#\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "968b987b-35d8-45e7-86ea-7fe0bf44d3e4",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has access token', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('access_token');",
                  "    pm.expect(jsonData.access_token).to.be.a('string');",
                  "    ",
                  "    // Store token for subsequent requests",
                  "    pm.collectionVariables.set('authToken', jsonData.access_token);",
                  "});",
                  "",
                  "pm.test('Response has correct user role', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.user.role).to.equal('admin');",
                  "});"
                ],
                "_lastExecutionId": "3c54578a-842c-4065-885f-55b07ab5112b"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "auth",
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "X-Test-Environment",
              "value": "true"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "75c24152-77b3-4e9f-954b-70bca186faf1",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"login_id\": \"admin\",\n    \"password\": \"admin123!@#\"\n}"
          }
        },
        "id": "0085140a-b774-4c8f-bc81-1f6ff3b93119",
        "requestError": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Response time is less than 1000ms",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response time is less than 1000ms",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "Response has valid content type",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response has valid content type",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:1)"
            }
          },
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "Response has access token",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response has access token",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:1)"
            }
          },
          {
            "assertion": "Response has correct user role",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "Response has correct user role",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:1)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "688be340-ade8-4466-a16d-f4c3168aea22",
          "length": 18,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d706efb1-4873-4ee3-b9b7-3b699bda0350"
        },
        "item": {
          "id": "d790d080-67bb-4cae-b17a-f85cbe617534",
          "name": "Get Current User",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "me"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f546f6bc-424e-4630-a343-fbff6d911d3c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has user information', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('user_id');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('role');",
                  "});"
                ],
                "_lastExecutionId": "9c728d6d-a24a-49ac-9861-b28710448d2a"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "auth",
              "me"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "X-Test-Environment",
              "value": "true"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2fb38344-51a5-4de8-9fb7-174958765019",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "d790d080-67bb-4cae-b17a-f85cbe617534",
        "requestError": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Response time is less than 1000ms",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response time is less than 1000ms",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "Response has valid content type",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response has valid content type",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:2)"
            }
          },
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "Response has user information",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response has user information",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "400aeeb3-f603-4f41-a94e-96da9dbd2351",
          "length": 18,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "e1ca5e7c-6387-4a87-b6aa-5595f40a9627"
        },
        "item": {
          "id": "812c3f6d-e35e-41cc-bb29-a96da42d089b",
          "name": "Logout",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "logout"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dedc75ac-b376-4a5f-9874-f073a9f75332",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Successfully logged out', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('logout');",
                  "});"
                ],
                "_lastExecutionId": "0a778728-9fc1-4306-aa1d-e124adf43cf9"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "auth",
              "logout"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "X-Test-Environment",
              "value": "true"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "19b1a964-c68d-40b5-b35f-99333af404ae",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST"
        },
        "id": "812c3f6d-e35e-41cc-bb29-a96da42d089b",
        "requestError": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Response time is less than 1000ms",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response time is less than 1000ms",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "Response has valid content type",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response has valid content type",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:3)"
            }
          },
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "Successfully logged out",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Successfully logged out",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "3c81c5eb-39db-4651-9ea4-97974cb6bc1c",
          "length": 18,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "38f19be4-6266-43d6-80b6-6904da6dfaf7"
        },
        "item": {
          "id": "7b554153-df5b-47a9-825c-69b8218df1f7",
          "name": "Get All Templates",
          "request": {
            "url": {
              "path": [
                "api",
                "templates"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "686c7de9-ee17-4c6e-a113-995e4e499314",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Templates have required fields', function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        const template = jsonData[0];",
                  "        pm.expect(template).to.have.property('_id');",
                  "        pm.expect(template).to.have.property('template_name');",
                  "        pm.expect(template).to.have.property('criteria');",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "acc013f7-a79a-4905-b6c0-ab435e6a1da1"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "templates"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "X-Test-Environment",
              "value": "true"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "cda5ccd5-9535-476b-b92e-8d0eba40cce2",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "7b554153-df5b-47a9-825c-69b8218df1f7",
        "requestError": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Response time is less than 1000ms",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response time is less than 1000ms",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "Response has valid content type",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response has valid content type",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:4)"
            }
          },
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "Response is an array",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response is an array",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:4)"
            }
          },
          {
            "assertion": "Templates have required fields",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "Templates have required fields",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:4)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "854becea-c63b-4075-ba4e-878bd6f65551",
          "length": 18,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "01b9918a-2998-47a4-9e5a-ce886f7a6c85"
        },
        "item": {
          "id": "c4e6980d-0de6-48ff-8faa-e81e17b7fcec",
          "name": "Create Template",
          "request": {
            "url": {
              "path": [
                "api",
                "templates"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"template_name\": \"API Test Template\",\n    \"template_type\": \"score\",\n    \"criteria\": [\n        {\n            \"criterion_name\": \"Quality\",\n            \"max_score\": 10,\n            \"score_step\": 1\n        },\n        {\n            \"criterion_name\": \"Innovation\",\n            \"max_score\": 20,\n            \"score_step\": 2\n        }\n    ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "35904553-5851-429f-bd8f-68912f860c55",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Template created successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('template_id');",
                  "    ",
                  "    // Store template ID for later tests",
                  "    pm.collectionVariables.set('templateId', jsonData.template_id);",
                  "});"
                ],
                "_lastExecutionId": "39da35b5-3ab6-4144-ad1d-20b5a59160e4"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "templates"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "X-Test-Environment",
              "value": "true"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ffa201b8-0904-4877-98df-419677b35c17",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"template_name\": \"API Test Template\",\n    \"template_type\": \"score\",\n    \"criteria\": [\n        {\n            \"criterion_name\": \"Quality\",\n            \"max_score\": 10,\n            \"score_step\": 1\n        },\n        {\n            \"criterion_name\": \"Innovation\",\n            \"max_score\": 20,\n            \"score_step\": 2\n        }\n    ]\n}"
          }
        },
        "id": "c4e6980d-0de6-48ff-8faa-e81e17b7fcec",
        "requestError": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Response time is less than 1000ms",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response time is less than 1000ms",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "Response has valid content type",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response has valid content type",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:5)"
            }
          },
          {
            "assertion": "Status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 201",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "Template created successfully",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Template created successfully",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "cb4cac9a-b712-40d4-8c1c-5b9c13f91f87",
          "length": 18,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "75cf23f3-6026-4b95-b46c-25cf70245d66"
        },
        "item": {
          "id": "3a45bcf7-d3d3-4875-8044-89f012aeec03",
          "name": "Update Template",
          "request": {
            "url": {
              "path": [
                "api",
                "templates",
                "{{templateId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"template_name\": \"Updated API Test Template\",\n    \"template_type\": \"score\",\n    \"criteria\": [\n        {\n            \"criterion_name\": \"Quality\",\n            \"max_score\": 15,\n            \"score_step\": 1\n        },\n        {\n            \"criterion_name\": \"Innovation\",\n            \"max_score\": 25,\n            \"score_step\": 5\n        }\n    ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a31e264f-06f1-4413-bdaa-b29b41fc8da1",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Template updated successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('updated');",
                  "});"
                ],
                "_lastExecutionId": "b7b9c346-0bc6-4792-876d-b73407aa9458"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "templates",
              "%7B%7BtemplateId%7D%7D"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "X-Test-Environment",
              "value": "true"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d95be109-5562-48ec-bf56-2e8a49389ff7",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"template_name\": \"Updated API Test Template\",\n    \"template_type\": \"score\",\n    \"criteria\": [\n        {\n            \"criterion_name\": \"Quality\",\n            \"max_score\": 15,\n            \"score_step\": 1\n        },\n        {\n            \"criterion_name\": \"Innovation\",\n            \"max_score\": 25,\n            \"score_step\": 5\n        }\n    ]\n}"
          }
        },
        "id": "3a45bcf7-d3d3-4875-8044-89f012aeec03",
        "requestError": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Response time is less than 1000ms",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response time is less than 1000ms",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "Response has valid content type",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response has valid content type",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:6)"
            }
          },
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "Template updated successfully",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Template updated successfully",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "53f093d9-4d1c-46d3-8632-575b41aaca37",
          "length": 18,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "4a208e2b-3ce3-44d2-a0ce-38e8f9243628"
        },
        "item": {
          "id": "0f384cd2-4ecf-4e63-8c5b-6a49762b292e",
          "name": "Delete Template",
          "request": {
            "url": {
              "path": [
                "api",
                "templates",
                "{{templateId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9183c18c-d992-4090-83be-c9935a5979a1",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Template deleted successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('deleted');",
                  "});"
                ],
                "_lastExecutionId": "590fa35f-6c26-4aa9-857f-2f181bd3db01"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "templates",
              "%7B%7BtemplateId%7D%7D"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "X-Test-Environment",
              "value": "true"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7c28998e-e724-466b-bcad-4d9952146218",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "id": "0f384cd2-4ecf-4e63-8c5b-6a49762b292e",
        "requestError": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Response time is less than 1000ms",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response time is less than 1000ms",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "Response has valid content type",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response has valid content type",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:7)"
            }
          },
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "Template deleted successfully",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Template deleted successfully",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "193bb635-fa86-4ca1-9fbb-f25b743af415",
          "length": 18,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "26a1a0a9-a4e0-4c50-96ca-3cac284ed3a9"
        },
        "item": {
          "id": "5e406380-c6b9-4e25-9ad4-ecb41372e91d",
          "name": "Get All Evaluations",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluations"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dc4815a8-9649-46ed-8792-b21319438a30",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "302e0809-4a1a-4942-8532-c24f976ef94b"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluations"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "X-Test-Environment",
              "value": "true"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e75a3748-e939-4523-9a48-69333d1c1c26",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "5e406380-c6b9-4e25-9ad4-ecb41372e91d",
        "requestError": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Response time is less than 1000ms",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response time is less than 1000ms",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "Response has valid content type",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response has valid content type",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:8)"
            }
          },
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "Response is an array",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response is an array",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "a53bbf0a-f867-4226-920e-d34c60ea7785",
          "length": 18,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "94127491-6101-464c-ac4a-a08c04569ebc"
        },
        "item": {
          "id": "e5cba38c-9563-4b1c-9c90-1a3dce8cf681",
          "name": "Create Evaluation",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluations"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"project_id\": \"{{projectId}}\",\n    \"company_id\": \"{{companyId}}\",\n    \"template_id\": \"{{templateId}}\",\n    \"scores\": {\n        \"Quality\": 8,\n        \"Innovation\": 16\n    },\n    \"comments\": \"API test evaluation\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "879bd3c2-c6e9-4c3a-907f-5e65cb3107f9",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Evaluation created successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('evaluation_id');",
                  "    ",
                  "    // Store evaluation ID",
                  "    pm.collectionVariables.set('evaluationId', jsonData.evaluation_id);",
                  "});"
                ],
                "_lastExecutionId": "c5d431f3-b02c-4281-943e-044b870a6aa8"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluations"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "X-Test-Environment",
              "value": "true"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "96478a5d-51b6-499a-a6bd-b819c2f2fb4a",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"project_id\": \"{{projectId}}\",\n    \"company_id\": \"{{companyId}}\",\n    \"template_id\": \"{{templateId}}\",\n    \"scores\": {\n        \"Quality\": 8,\n        \"Innovation\": 16\n    },\n    \"comments\": \"API test evaluation\"\n}"
          }
        },
        "id": "e5cba38c-9563-4b1c-9c90-1a3dce8cf681",
        "requestError": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Response time is less than 1000ms",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response time is less than 1000ms",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "Response has valid content type",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response has valid content type",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:9)"
            }
          },
          {
            "assertion": "Status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 201",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "Evaluation created successfully",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Evaluation created successfully",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "5e9f78a0-48c9-4295-9b2f-a2f07003f043",
          "length": 18,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "6a0e715a-8966-4a3e-81dd-2e24d49f980f"
        },
        "item": {
          "id": "dede4546-b5d5-495f-b824-a28c91046702",
          "name": "Export Evaluation as PDF",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluations",
                "{{evaluationId}}",
                "export",
                "pdf"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5a131402-103b-47cb-b09d-34af73e0c9bc",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is PDF', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/pdf');",
                  "});"
                ],
                "_lastExecutionId": "5ac13351-6c6e-4b77-95af-f8a6814a7326"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluations",
              "%7B%7BevaluationId%7D%7D",
              "export",
              "pdf"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "X-Test-Environment",
              "value": "true"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "09eb6ddc-953a-4b9f-b242-89958ff6cc98",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "dede4546-b5d5-495f-b824-a28c91046702",
        "requestError": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Response time is less than 1000ms",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response time is less than 1000ms",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "Response has valid content type",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response has valid content type",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:10)"
            }
          },
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "Response is PDF",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response is PDF",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "d4eadcab-025f-4758-85a0-afc80236c9cf",
          "length": 18,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "19ca536f-6409-4e48-a90b-17a57bf7fb5f"
        },
        "item": {
          "id": "1f0a6d72-1c7f-4899-b923-4a2c6e8b771d",
          "name": "Bulk Export Evaluations",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluations",
                "bulk-export"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"evaluation_ids\": [\"{{evaluationId}}\"],\n    \"format\": \"pdf\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ab89637c-14f2-4005-b109-7964eda7ec51",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is ZIP file', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/zip');",
                  "});"
                ],
                "_lastExecutionId": "750c3864-59b7-40f6-99f7-b9bb55a78fd7"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluations",
              "bulk-export"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "X-Test-Environment",
              "value": "true"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1d54489b-5ac5-4044-9086-4e8dd2dd31cb",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"evaluation_ids\": [\"{{evaluationId}}\"],\n    \"format\": \"pdf\"\n}"
          }
        },
        "id": "1f0a6d72-1c7f-4899-b923-4a2c6e8b771d",
        "requestError": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Response time is less than 1000ms",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response time is less than 1000ms",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "Response has valid content type",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response has valid content type",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:11)"
            }
          },
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "Response is ZIP file",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response is ZIP file",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "c2b6fe46-d0f9-483d-bca3-a6ac86c34d73",
          "length": 18,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "ec14c771-05a5-4ab2-8775-a21d2452b80a"
        },
        "item": {
          "id": "7b841149-36ea-489e-b8b2-f5d915a479d2",
          "name": "Get AI Models",
          "request": {
            "url": {
              "path": [
                "api",
                "ai",
                "models"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0f056291-b663-4728-9732-a3b48e00b826",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has AI models', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                  "});"
                ],
                "_lastExecutionId": "d6617831-4608-4705-8e06-d6b877b13f12"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "ai",
              "models"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "X-Test-Environment",
              "value": "true"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "700b7728-7df4-4ae4-85e0-98df7c27be52",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "7b841149-36ea-489e-b8b2-f5d915a479d2",
        "requestError": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Response time is less than 1000ms",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response time is less than 1000ms",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "Response has valid content type",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response has valid content type",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:12)"
            }
          },
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "Response has AI models",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response has AI models",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "17183b67-dd51-441d-a228-ab8feb6f31e9",
          "length": 18,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "24019dcd-1f6f-4ccb-a42a-fc83404f1347"
        },
        "item": {
          "id": "015d8906-71a0-47ed-b81b-45769c801665",
          "name": "Test AI Provider",
          "request": {
            "url": {
              "path": [
                "api",
                "ai",
                "test-provider"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"provider\": \"openai\",\n    \"api_key\": \"test-key\",\n    \"model\": \"gpt-3.5-turbo\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1f18c1a7-097c-43c5-896a-aaa8506f631c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('AI provider test successful', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});"
                ],
                "_lastExecutionId": "7749775f-1b3f-49b0-834c-c0025cc3a586"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "ai",
              "test-provider"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "X-Test-Environment",
              "value": "true"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5e82c46d-289e-4fbd-b8fc-6ad95b94df20",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"provider\": \"openai\",\n    \"api_key\": \"test-key\",\n    \"model\": \"gpt-3.5-turbo\"\n}"
          }
        },
        "id": "015d8906-71a0-47ed-b81b-45769c801665",
        "requestError": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Response time is less than 1000ms",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response time is less than 1000ms",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "Response has valid content type",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response has valid content type",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:13)"
            }
          },
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "AI provider test successful",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "AI provider test successful",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "a373dc34-a5cb-45a4-ade0-81542ddeaa57",
          "length": 18,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "81e43b49-6af0-4feb-9c6e-6c6a722de8f9"
        },
        "item": {
          "id": "989aae43-980f-4781-90e6-94ff6ddca76e",
          "name": "Concurrent Login Requests",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"login_id\": \"admin\",\n    \"password\": \"admin123!@#\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2d02797f-1218-4919-b75b-78cb1dca035f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Handles concurrent requests', function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "_lastExecutionId": "c3898395-4fbc-464f-9d01-53061e48ebc5"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "auth",
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "X-Test-Environment",
              "value": "true"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "babab19c-e27e-4997-bb06-170eb14528fa",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"login_id\": \"admin\",\n    \"password\": \"admin123!@#\"\n}"
          }
        },
        "id": "989aae43-980f-4781-90e6-94ff6ddca76e",
        "requestError": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Response time is less than 1000ms",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response time is less than 1000ms",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "Response has valid content type",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response has valid content type",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:14)"
            }
          },
          {
            "assertion": "Handles concurrent requests",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Handles concurrent requests",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:14)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "d7e00d11-b69a-40e8-8a8e-3d004b5ff162",
          "length": 18,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "c4910c9c-354a-4cf3-b667-d8d7c40123e0"
        },
        "item": {
          "id": "3b689212-685d-4814-80e7-5990493fd986",
          "name": "Large Data Request",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluations"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "1000"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b08c3c45-f55c-40ec-acec-6e5a20b7f636",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Handles large data efficiently', function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response size is reasonable', function () {",
                  "    const size = pm.response.size();",
                  "    pm.expect(size).to.be.below(10485760); // 10MB",
                  "});"
                ],
                "_lastExecutionId": "8e7164dc-abb1-42f4-a160-dc61d4ab0686"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluations"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "limit",
                "value": "1000"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "X-Test-Environment",
              "value": "true"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "746268f6-7acd-405c-8229-2cfbd60fff9a",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "3b689212-685d-4814-80e7-5990493fd986",
        "requestError": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Response time is less than 1000ms",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response time is less than 1000ms",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "Response has valid content type",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response has valid content type",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:15)"
            }
          },
          {
            "assertion": "Handles large data efficiently",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Handles large data efficiently",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "Response size is reasonable",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response size is reasonable",
              "message": "expected [object Object] to be a number or a date",
              "stack": "AssertionError: expected [object Object] to be a number or a date\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "acf47176-4c11-49ad-b660-e2d824ab57c1",
          "length": 18,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "52f129a6-da77-4dec-9ad2-129f5c312bad"
        },
        "item": {
          "id": "63f8e8b1-0969-4ae3-9443-e10bc5776f6b",
          "name": "SQL Injection Test",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"login_id\": \"admin' OR '1'='1\",\n    \"password\": \"' OR '1'='1\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "35cd1bf2-549d-4987-9150-f0d79232f03a",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Prevents SQL injection', function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ],
                "_lastExecutionId": "956fc2d0-150f-41c9-8ea9-0fcb7949a5a3"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "auth",
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "X-Test-Environment",
              "value": "true"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6fdcc924-2dc2-438e-8f82-c72c34fd79bd",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"login_id\": \"admin' OR '1'='1\",\n    \"password\": \"' OR '1'='1\"\n}"
          }
        },
        "id": "63f8e8b1-0969-4ae3-9443-e10bc5776f6b",
        "requestError": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Response time is less than 1000ms",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response time is less than 1000ms",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "Response has valid content type",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response has valid content type",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:16)"
            }
          },
          {
            "assertion": "Prevents SQL injection",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Prevents SQL injection",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:16)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "d816f1da-787d-46ec-a1d0-6e27303c42e3",
          "length": 18,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "19ae3789-444b-4523-88ee-839214c9f9c2"
        },
        "item": {
          "id": "e558a0c2-7ee4-4e0d-9f57-224a31b067c5",
          "name": "XSS Prevention Test",
          "request": {
            "url": {
              "path": [
                "api",
                "templates"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"template_name\": \"<script>alert('XSS')</script>\",\n    \"template_type\": \"score\",\n    \"criteria\": []\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8f16486d-d113-497e-a0f3-78c7c707ad02",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Prevents XSS attacks', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.template_name).to.not.include('<script>');",
                  "});"
                ],
                "_lastExecutionId": "0fe77f8b-4840-4c4f-bb46-05ec8d55b1e8"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "templates"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "X-Test-Environment",
              "value": "true"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "19c5034b-7b89-4d58-9d4a-b8dcc1555c03",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"template_name\": \"<script>alert('XSS')</script>\",\n    \"template_type\": \"score\",\n    \"criteria\": []\n}"
          }
        },
        "id": "e558a0c2-7ee4-4e0d-9f57-224a31b067c5",
        "requestError": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Response time is less than 1000ms",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response time is less than 1000ms",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "Response has valid content type",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response has valid content type",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:17)"
            }
          },
          {
            "assertion": "Prevents XSS attacks",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 0,
              "test": "Prevents XSS attacks",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:17)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "9c4072e7-7d20-41e1-8302-f64c042dcca2",
          "length": 18,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "5d1159ba-54b9-4209-913c-3e09499ed6a1"
        },
        "item": {
          "id": "3cc42d86-5eb0-4449-834c-45a9a782ffe5",
          "name": "Unauthorized Access Test",
          "request": {
            "url": {
              "path": [
                "api",
                "templates"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "09ddebb5-17f4-46c8-b6d1-d5c16cd9c372",
                "type": "text/javascript",
                "exec": [
                  "// Remove auth token for this request",
                  "pm.request.headers.remove('Authorization');"
                ],
                "_lastExecutionId": "ac710d9d-687f-49b1-9cad-3087d7059bbc"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "0cf436fb-8492-4bf1-9859-2b0ba6a6ca53",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Prevents unauthorized access', function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ],
                "_lastExecutionId": "df22f613-9fe3-481a-a5bd-c698819e07b1"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "templates"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "X-Test-Environment",
              "value": "true"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "20d51149-a696-47cc-b807-641e2be2d7d3",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "3cc42d86-5eb0-4449-834c-45a9a782ffe5",
        "requestError": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080
        },
        "assertions": [
          {
            "assertion": "Response time is less than 1000ms",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response time is less than 1000ms",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "Response has valid content type",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response has valid content type",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:18)"
            }
          },
          {
            "assertion": "Prevents unauthorized access",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Prevents unauthorized access",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:18)"
            }
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 0
    },
    "failures": [
      {
        "error": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1555:16)",
          "checksum": "2462284d2be5f4dcd7e8994dbbc6be87",
          "id": "669b5c78-81fd-40c6-89a0-1b47f29554f6",
          "timestamp": 1751098978598,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1555,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "0085140a-b774-4c8f-bc81-1f6ff3b93119",
          "name": "Login - Admin",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Test-Environment",
                "value": "true"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "75c24152-77b3-4e9f-954b-70bca186faf1",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"login_id\": \"admin\",\n    \"password\": \"admin123!@#\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "968b987b-35d8-45e7-86ea-7fe0bf44d3e4",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has access token', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('access_token');",
                  "    pm.expect(jsonData.access_token).to.be.a('string');",
                  "    ",
                  "    // Store token for subsequent requests",
                  "    pm.collectionVariables.set('authToken', jsonData.access_token);",
                  "});",
                  "",
                  "pm.test('Response has correct user role', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.user.role).to.equal('admin');",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 18,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "34f86017-717c-4489-beb0-3c5f90bfa0b2",
          "httpRequestId": "e11075b1-2477-4c10-a2db-992ca56c9532"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response time is less than 1000ms",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:1:1)",
          "checksum": "0cf2e2a98ed36678b9d9572464058a13",
          "id": "c932a02b-5f34-456d-b2cd-984c4c73c726",
          "timestamp": 1751098978603,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "0085140a-b774-4c8f-bc81-1f6ff3b93119",
          "name": "Login - Admin",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"login_id\": \"admin\",\n    \"password\": \"admin123!@#\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "968b987b-35d8-45e7-86ea-7fe0bf44d3e4",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has access token', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('access_token');",
                  "    pm.expect(jsonData.access_token).to.be.a('string');",
                  "    ",
                  "    // Store token for subsequent requests",
                  "    pm.collectionVariables.set('authToken', jsonData.access_token);",
                  "});",
                  "",
                  "pm.test('Response has correct user role', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.user.role).to.equal('admin');",
                  "});"
                ],
                "_lastExecutionId": "3c54578a-842c-4065-885f-55b07ab5112b"
              }
            }
          ]
        },
        "parent": {
          "id": "73c9781a-ce7e-48ad-8e84-cd3c9cdf9ba4",
          "name": "Authentication",
          "item": [
            {
              "id": "0085140a-b774-4c8f-bc81-1f6ff3b93119",
              "name": "Login - Admin",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"login_id\": \"admin\",\n    \"password\": \"admin123!@#\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "968b987b-35d8-45e7-86ea-7fe0bf44d3e4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has access token', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('access_token');",
                      "    pm.expect(jsonData.access_token).to.be.a('string');",
                      "    ",
                      "    // Store token for subsequent requests",
                      "    pm.collectionVariables.set('authToken', jsonData.access_token);",
                      "});",
                      "",
                      "pm.test('Response has correct user role', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.user.role).to.equal('admin');",
                      "});"
                    ],
                    "_lastExecutionId": "3c54578a-842c-4065-885f-55b07ab5112b"
                  }
                }
              ]
            },
            {
              "id": "d790d080-67bb-4cae-b17a-f85cbe617534",
              "name": "Get Current User",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f546f6bc-424e-4630-a343-fbff6d911d3c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has user information', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('user_id');",
                      "    pm.expect(jsonData).to.have.property('name');",
                      "    pm.expect(jsonData).to.have.property('role');",
                      "});"
                    ],
                    "_lastExecutionId": "9c728d6d-a24a-49ac-9861-b28710448d2a"
                  }
                }
              ]
            },
            {
              "id": "812c3f6d-e35e-41cc-bb29-a96da42d089b",
              "name": "Logout",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "logout"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dedc75ac-b376-4a5f-9874-f073a9f75332",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Successfully logged out', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('logout');",
                      "});"
                    ],
                    "_lastExecutionId": "0a778728-9fc1-4306-aa1d-e124adf43cf9"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 18,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "34f86017-717c-4489-beb0-3c5f90bfa0b2",
          "httpRequestId": "e11075b1-2477-4c10-a2db-992ca56c9532",
          "scriptId": "1ff9de9c-a125-4b3a-b83e-e2cac41c4083",
          "execution": "b7e061a3-614c-4757-b6f0-8a8be30cb221"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response has valid content type",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:1)",
          "checksum": "2accc1b87c04566bc080e807f9ebc716",
          "id": "84dcab1b-642c-4e7c-af41-d69d866a9724",
          "timestamp": 1751098978604,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "0085140a-b774-4c8f-bc81-1f6ff3b93119",
          "name": "Login - Admin",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"login_id\": \"admin\",\n    \"password\": \"admin123!@#\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "968b987b-35d8-45e7-86ea-7fe0bf44d3e4",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has access token', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('access_token');",
                  "    pm.expect(jsonData.access_token).to.be.a('string');",
                  "    ",
                  "    // Store token for subsequent requests",
                  "    pm.collectionVariables.set('authToken', jsonData.access_token);",
                  "});",
                  "",
                  "pm.test('Response has correct user role', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.user.role).to.equal('admin');",
                  "});"
                ],
                "_lastExecutionId": "3c54578a-842c-4065-885f-55b07ab5112b"
              }
            }
          ]
        },
        "parent": {
          "id": "73c9781a-ce7e-48ad-8e84-cd3c9cdf9ba4",
          "name": "Authentication",
          "item": [
            {
              "id": "0085140a-b774-4c8f-bc81-1f6ff3b93119",
              "name": "Login - Admin",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"login_id\": \"admin\",\n    \"password\": \"admin123!@#\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "968b987b-35d8-45e7-86ea-7fe0bf44d3e4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has access token', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('access_token');",
                      "    pm.expect(jsonData.access_token).to.be.a('string');",
                      "    ",
                      "    // Store token for subsequent requests",
                      "    pm.collectionVariables.set('authToken', jsonData.access_token);",
                      "});",
                      "",
                      "pm.test('Response has correct user role', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.user.role).to.equal('admin');",
                      "});"
                    ],
                    "_lastExecutionId": "3c54578a-842c-4065-885f-55b07ab5112b"
                  }
                }
              ]
            },
            {
              "id": "d790d080-67bb-4cae-b17a-f85cbe617534",
              "name": "Get Current User",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f546f6bc-424e-4630-a343-fbff6d911d3c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has user information', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('user_id');",
                      "    pm.expect(jsonData).to.have.property('name');",
                      "    pm.expect(jsonData).to.have.property('role');",
                      "});"
                    ],
                    "_lastExecutionId": "9c728d6d-a24a-49ac-9861-b28710448d2a"
                  }
                }
              ]
            },
            {
              "id": "812c3f6d-e35e-41cc-bb29-a96da42d089b",
              "name": "Logout",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "logout"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dedc75ac-b376-4a5f-9874-f073a9f75332",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Successfully logged out', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('logout');",
                      "});"
                    ],
                    "_lastExecutionId": "0a778728-9fc1-4306-aa1d-e124adf43cf9"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 18,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "34f86017-717c-4489-beb0-3c5f90bfa0b2",
          "httpRequestId": "e11075b1-2477-4c10-a2db-992ca56c9532",
          "scriptId": "1ff9de9c-a125-4b3a-b83e-e2cac41c4083",
          "execution": "b7e061a3-614c-4757-b6f0-8a8be30cb221"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:1)",
          "checksum": "8f1a38fbb4708623aafe992d2647a097",
          "id": "5d28a486-3a09-4298-ba43-377c2e3fb8b2",
          "timestamp": 1751098978607,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "0085140a-b774-4c8f-bc81-1f6ff3b93119",
          "name": "Login - Admin",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"login_id\": \"admin\",\n    \"password\": \"admin123!@#\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "968b987b-35d8-45e7-86ea-7fe0bf44d3e4",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has access token', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('access_token');",
                  "    pm.expect(jsonData.access_token).to.be.a('string');",
                  "    ",
                  "    // Store token for subsequent requests",
                  "    pm.collectionVariables.set('authToken', jsonData.access_token);",
                  "});",
                  "",
                  "pm.test('Response has correct user role', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.user.role).to.equal('admin');",
                  "});"
                ],
                "_lastExecutionId": "3c54578a-842c-4065-885f-55b07ab5112b"
              }
            }
          ]
        },
        "parent": {
          "id": "73c9781a-ce7e-48ad-8e84-cd3c9cdf9ba4",
          "name": "Authentication",
          "item": [
            {
              "id": "0085140a-b774-4c8f-bc81-1f6ff3b93119",
              "name": "Login - Admin",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"login_id\": \"admin\",\n    \"password\": \"admin123!@#\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "968b987b-35d8-45e7-86ea-7fe0bf44d3e4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has access token', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('access_token');",
                      "    pm.expect(jsonData.access_token).to.be.a('string');",
                      "    ",
                      "    // Store token for subsequent requests",
                      "    pm.collectionVariables.set('authToken', jsonData.access_token);",
                      "});",
                      "",
                      "pm.test('Response has correct user role', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.user.role).to.equal('admin');",
                      "});"
                    ],
                    "_lastExecutionId": "3c54578a-842c-4065-885f-55b07ab5112b"
                  }
                }
              ]
            },
            {
              "id": "d790d080-67bb-4cae-b17a-f85cbe617534",
              "name": "Get Current User",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f546f6bc-424e-4630-a343-fbff6d911d3c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has user information', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('user_id');",
                      "    pm.expect(jsonData).to.have.property('name');",
                      "    pm.expect(jsonData).to.have.property('role');",
                      "});"
                    ],
                    "_lastExecutionId": "9c728d6d-a24a-49ac-9861-b28710448d2a"
                  }
                }
              ]
            },
            {
              "id": "812c3f6d-e35e-41cc-bb29-a96da42d089b",
              "name": "Logout",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "logout"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dedc75ac-b376-4a5f-9874-f073a9f75332",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Successfully logged out', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('logout');",
                      "});"
                    ],
                    "_lastExecutionId": "0a778728-9fc1-4306-aa1d-e124adf43cf9"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 18,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "34f86017-717c-4489-beb0-3c5f90bfa0b2",
          "httpRequestId": "e11075b1-2477-4c10-a2db-992ca56c9532",
          "scriptId": "968b987b-35d8-45e7-86ea-7fe0bf44d3e4",
          "execution": "3c54578a-842c-4065-885f-55b07ab5112b"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response has access token",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:1)",
          "checksum": "c331b75b0c591d9c72a17fe4d0eac253",
          "id": "8154434e-4805-41b6-b651-1bc65fa46a44",
          "timestamp": 1751098978608,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "0085140a-b774-4c8f-bc81-1f6ff3b93119",
          "name": "Login - Admin",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"login_id\": \"admin\",\n    \"password\": \"admin123!@#\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "968b987b-35d8-45e7-86ea-7fe0bf44d3e4",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has access token', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('access_token');",
                  "    pm.expect(jsonData.access_token).to.be.a('string');",
                  "    ",
                  "    // Store token for subsequent requests",
                  "    pm.collectionVariables.set('authToken', jsonData.access_token);",
                  "});",
                  "",
                  "pm.test('Response has correct user role', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.user.role).to.equal('admin');",
                  "});"
                ],
                "_lastExecutionId": "3c54578a-842c-4065-885f-55b07ab5112b"
              }
            }
          ]
        },
        "parent": {
          "id": "73c9781a-ce7e-48ad-8e84-cd3c9cdf9ba4",
          "name": "Authentication",
          "item": [
            {
              "id": "0085140a-b774-4c8f-bc81-1f6ff3b93119",
              "name": "Login - Admin",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"login_id\": \"admin\",\n    \"password\": \"admin123!@#\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "968b987b-35d8-45e7-86ea-7fe0bf44d3e4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has access token', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('access_token');",
                      "    pm.expect(jsonData.access_token).to.be.a('string');",
                      "    ",
                      "    // Store token for subsequent requests",
                      "    pm.collectionVariables.set('authToken', jsonData.access_token);",
                      "});",
                      "",
                      "pm.test('Response has correct user role', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.user.role).to.equal('admin');",
                      "});"
                    ],
                    "_lastExecutionId": "3c54578a-842c-4065-885f-55b07ab5112b"
                  }
                }
              ]
            },
            {
              "id": "d790d080-67bb-4cae-b17a-f85cbe617534",
              "name": "Get Current User",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f546f6bc-424e-4630-a343-fbff6d911d3c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has user information', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('user_id');",
                      "    pm.expect(jsonData).to.have.property('name');",
                      "    pm.expect(jsonData).to.have.property('role');",
                      "});"
                    ],
                    "_lastExecutionId": "9c728d6d-a24a-49ac-9861-b28710448d2a"
                  }
                }
              ]
            },
            {
              "id": "812c3f6d-e35e-41cc-bb29-a96da42d089b",
              "name": "Logout",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "logout"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dedc75ac-b376-4a5f-9874-f073a9f75332",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Successfully logged out', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('logout');",
                      "});"
                    ],
                    "_lastExecutionId": "0a778728-9fc1-4306-aa1d-e124adf43cf9"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 18,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "34f86017-717c-4489-beb0-3c5f90bfa0b2",
          "httpRequestId": "e11075b1-2477-4c10-a2db-992ca56c9532",
          "scriptId": "968b987b-35d8-45e7-86ea-7fe0bf44d3e4",
          "execution": "3c54578a-842c-4065-885f-55b07ab5112b"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 2,
          "test": "Response has correct user role",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:1)",
          "checksum": "5f18d6e5bbf8a25d4242a67d09b31f75",
          "id": "39dbd017-d598-4110-baf2-a5ee770b8625",
          "timestamp": 1751098978608,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "0085140a-b774-4c8f-bc81-1f6ff3b93119",
          "name": "Login - Admin",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"login_id\": \"admin\",\n    \"password\": \"admin123!@#\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "968b987b-35d8-45e7-86ea-7fe0bf44d3e4",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has access token', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('access_token');",
                  "    pm.expect(jsonData.access_token).to.be.a('string');",
                  "    ",
                  "    // Store token for subsequent requests",
                  "    pm.collectionVariables.set('authToken', jsonData.access_token);",
                  "});",
                  "",
                  "pm.test('Response has correct user role', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.user.role).to.equal('admin');",
                  "});"
                ],
                "_lastExecutionId": "3c54578a-842c-4065-885f-55b07ab5112b"
              }
            }
          ]
        },
        "parent": {
          "id": "73c9781a-ce7e-48ad-8e84-cd3c9cdf9ba4",
          "name": "Authentication",
          "item": [
            {
              "id": "0085140a-b774-4c8f-bc81-1f6ff3b93119",
              "name": "Login - Admin",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"login_id\": \"admin\",\n    \"password\": \"admin123!@#\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "968b987b-35d8-45e7-86ea-7fe0bf44d3e4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has access token', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('access_token');",
                      "    pm.expect(jsonData.access_token).to.be.a('string');",
                      "    ",
                      "    // Store token for subsequent requests",
                      "    pm.collectionVariables.set('authToken', jsonData.access_token);",
                      "});",
                      "",
                      "pm.test('Response has correct user role', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.user.role).to.equal('admin');",
                      "});"
                    ],
                    "_lastExecutionId": "3c54578a-842c-4065-885f-55b07ab5112b"
                  }
                }
              ]
            },
            {
              "id": "d790d080-67bb-4cae-b17a-f85cbe617534",
              "name": "Get Current User",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f546f6bc-424e-4630-a343-fbff6d911d3c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has user information', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('user_id');",
                      "    pm.expect(jsonData).to.have.property('name');",
                      "    pm.expect(jsonData).to.have.property('role');",
                      "});"
                    ],
                    "_lastExecutionId": "9c728d6d-a24a-49ac-9861-b28710448d2a"
                  }
                }
              ]
            },
            {
              "id": "812c3f6d-e35e-41cc-bb29-a96da42d089b",
              "name": "Logout",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "logout"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dedc75ac-b376-4a5f-9874-f073a9f75332",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Successfully logged out', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('logout');",
                      "});"
                    ],
                    "_lastExecutionId": "0a778728-9fc1-4306-aa1d-e124adf43cf9"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 18,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "34f86017-717c-4489-beb0-3c5f90bfa0b2",
          "httpRequestId": "e11075b1-2477-4c10-a2db-992ca56c9532",
          "scriptId": "968b987b-35d8-45e7-86ea-7fe0bf44d3e4",
          "execution": "3c54578a-842c-4065-885f-55b07ab5112b"
        }
      },
      {
        "error": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1555:16)",
          "checksum": "2462284d2be5f4dcd7e8994dbbc6be87",
          "id": "98d5f82d-6a23-45b2-a148-75d8c521292c",
          "timestamp": 1751098978619,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1555,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "d790d080-67bb-4cae-b17a-f85cbe617534",
          "name": "Get Current User",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "auth",
                "me"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Test-Environment",
                "value": "true"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "2fb38344-51a5-4de8-9fb7-174958765019",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f546f6bc-424e-4630-a343-fbff6d911d3c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has user information', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('user_id');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('role');",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "688be340-ade8-4466-a16d-f4c3168aea22",
          "length": 18,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d706efb1-4873-4ee3-b9b7-3b699bda0350"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response time is less than 1000ms",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:1:2)",
          "checksum": "8035ea2717107edc4aca13605d24d990",
          "id": "f4589b85-6412-4615-9640-5b923b1094a8",
          "timestamp": 1751098978622,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "d790d080-67bb-4cae-b17a-f85cbe617534",
          "name": "Get Current User",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "me"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f546f6bc-424e-4630-a343-fbff6d911d3c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has user information', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('user_id');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('role');",
                  "});"
                ],
                "_lastExecutionId": "9c728d6d-a24a-49ac-9861-b28710448d2a"
              }
            }
          ]
        },
        "parent": {
          "id": "73c9781a-ce7e-48ad-8e84-cd3c9cdf9ba4",
          "name": "Authentication",
          "item": [
            {
              "id": "0085140a-b774-4c8f-bc81-1f6ff3b93119",
              "name": "Login - Admin",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"login_id\": \"admin\",\n    \"password\": \"admin123!@#\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "968b987b-35d8-45e7-86ea-7fe0bf44d3e4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has access token', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('access_token');",
                      "    pm.expect(jsonData.access_token).to.be.a('string');",
                      "    ",
                      "    // Store token for subsequent requests",
                      "    pm.collectionVariables.set('authToken', jsonData.access_token);",
                      "});",
                      "",
                      "pm.test('Response has correct user role', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.user.role).to.equal('admin');",
                      "});"
                    ],
                    "_lastExecutionId": "3c54578a-842c-4065-885f-55b07ab5112b"
                  }
                }
              ]
            },
            {
              "id": "d790d080-67bb-4cae-b17a-f85cbe617534",
              "name": "Get Current User",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f546f6bc-424e-4630-a343-fbff6d911d3c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has user information', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('user_id');",
                      "    pm.expect(jsonData).to.have.property('name');",
                      "    pm.expect(jsonData).to.have.property('role');",
                      "});"
                    ],
                    "_lastExecutionId": "9c728d6d-a24a-49ac-9861-b28710448d2a"
                  }
                }
              ]
            },
            {
              "id": "812c3f6d-e35e-41cc-bb29-a96da42d089b",
              "name": "Logout",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "logout"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dedc75ac-b376-4a5f-9874-f073a9f75332",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Successfully logged out', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('logout');",
                      "});"
                    ],
                    "_lastExecutionId": "0a778728-9fc1-4306-aa1d-e124adf43cf9"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "688be340-ade8-4466-a16d-f4c3168aea22",
          "length": 18,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d706efb1-4873-4ee3-b9b7-3b699bda0350",
          "scriptId": "1ff9de9c-a125-4b3a-b83e-e2cac41c4083",
          "execution": "27db6fc1-d6e3-4ee0-b439-e9b8dfbbe6ff"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response has valid content type",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:2)",
          "checksum": "1b5ce84be05c47d2d832e49c7db01d29",
          "id": "d39741a6-3c07-4694-b4d1-d692c819c8bd",
          "timestamp": 1751098978622,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "d790d080-67bb-4cae-b17a-f85cbe617534",
          "name": "Get Current User",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "me"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f546f6bc-424e-4630-a343-fbff6d911d3c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has user information', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('user_id');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('role');",
                  "});"
                ],
                "_lastExecutionId": "9c728d6d-a24a-49ac-9861-b28710448d2a"
              }
            }
          ]
        },
        "parent": {
          "id": "73c9781a-ce7e-48ad-8e84-cd3c9cdf9ba4",
          "name": "Authentication",
          "item": [
            {
              "id": "0085140a-b774-4c8f-bc81-1f6ff3b93119",
              "name": "Login - Admin",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"login_id\": \"admin\",\n    \"password\": \"admin123!@#\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "968b987b-35d8-45e7-86ea-7fe0bf44d3e4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has access token', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('access_token');",
                      "    pm.expect(jsonData.access_token).to.be.a('string');",
                      "    ",
                      "    // Store token for subsequent requests",
                      "    pm.collectionVariables.set('authToken', jsonData.access_token);",
                      "});",
                      "",
                      "pm.test('Response has correct user role', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.user.role).to.equal('admin');",
                      "});"
                    ],
                    "_lastExecutionId": "3c54578a-842c-4065-885f-55b07ab5112b"
                  }
                }
              ]
            },
            {
              "id": "d790d080-67bb-4cae-b17a-f85cbe617534",
              "name": "Get Current User",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f546f6bc-424e-4630-a343-fbff6d911d3c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has user information', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('user_id');",
                      "    pm.expect(jsonData).to.have.property('name');",
                      "    pm.expect(jsonData).to.have.property('role');",
                      "});"
                    ],
                    "_lastExecutionId": "9c728d6d-a24a-49ac-9861-b28710448d2a"
                  }
                }
              ]
            },
            {
              "id": "812c3f6d-e35e-41cc-bb29-a96da42d089b",
              "name": "Logout",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "logout"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dedc75ac-b376-4a5f-9874-f073a9f75332",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Successfully logged out', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('logout');",
                      "});"
                    ],
                    "_lastExecutionId": "0a778728-9fc1-4306-aa1d-e124adf43cf9"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "688be340-ade8-4466-a16d-f4c3168aea22",
          "length": 18,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d706efb1-4873-4ee3-b9b7-3b699bda0350",
          "scriptId": "1ff9de9c-a125-4b3a-b83e-e2cac41c4083",
          "execution": "27db6fc1-d6e3-4ee0-b439-e9b8dfbbe6ff"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:2)",
          "checksum": "169020131664477cec85b1c00a6464f6",
          "id": "147bc2ad-7863-42c0-b742-5732da7cde02",
          "timestamp": 1751098978625,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "d790d080-67bb-4cae-b17a-f85cbe617534",
          "name": "Get Current User",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "me"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f546f6bc-424e-4630-a343-fbff6d911d3c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has user information', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('user_id');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('role');",
                  "});"
                ],
                "_lastExecutionId": "9c728d6d-a24a-49ac-9861-b28710448d2a"
              }
            }
          ]
        },
        "parent": {
          "id": "73c9781a-ce7e-48ad-8e84-cd3c9cdf9ba4",
          "name": "Authentication",
          "item": [
            {
              "id": "0085140a-b774-4c8f-bc81-1f6ff3b93119",
              "name": "Login - Admin",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"login_id\": \"admin\",\n    \"password\": \"admin123!@#\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "968b987b-35d8-45e7-86ea-7fe0bf44d3e4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has access token', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('access_token');",
                      "    pm.expect(jsonData.access_token).to.be.a('string');",
                      "    ",
                      "    // Store token for subsequent requests",
                      "    pm.collectionVariables.set('authToken', jsonData.access_token);",
                      "});",
                      "",
                      "pm.test('Response has correct user role', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.user.role).to.equal('admin');",
                      "});"
                    ],
                    "_lastExecutionId": "3c54578a-842c-4065-885f-55b07ab5112b"
                  }
                }
              ]
            },
            {
              "id": "d790d080-67bb-4cae-b17a-f85cbe617534",
              "name": "Get Current User",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f546f6bc-424e-4630-a343-fbff6d911d3c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has user information', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('user_id');",
                      "    pm.expect(jsonData).to.have.property('name');",
                      "    pm.expect(jsonData).to.have.property('role');",
                      "});"
                    ],
                    "_lastExecutionId": "9c728d6d-a24a-49ac-9861-b28710448d2a"
                  }
                }
              ]
            },
            {
              "id": "812c3f6d-e35e-41cc-bb29-a96da42d089b",
              "name": "Logout",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "logout"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dedc75ac-b376-4a5f-9874-f073a9f75332",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Successfully logged out', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('logout');",
                      "});"
                    ],
                    "_lastExecutionId": "0a778728-9fc1-4306-aa1d-e124adf43cf9"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "688be340-ade8-4466-a16d-f4c3168aea22",
          "length": 18,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d706efb1-4873-4ee3-b9b7-3b699bda0350",
          "scriptId": "f546f6bc-424e-4630-a343-fbff6d911d3c",
          "execution": "9c728d6d-a24a-49ac-9861-b28710448d2a"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response has user information",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:2)",
          "checksum": "23403e2eb94832beaad3573edce10323",
          "id": "ca392d52-88e0-4abc-9951-3b6c7dd593ec",
          "timestamp": 1751098978625,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "d790d080-67bb-4cae-b17a-f85cbe617534",
          "name": "Get Current User",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "me"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f546f6bc-424e-4630-a343-fbff6d911d3c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has user information', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('user_id');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('role');",
                  "});"
                ],
                "_lastExecutionId": "9c728d6d-a24a-49ac-9861-b28710448d2a"
              }
            }
          ]
        },
        "parent": {
          "id": "73c9781a-ce7e-48ad-8e84-cd3c9cdf9ba4",
          "name": "Authentication",
          "item": [
            {
              "id": "0085140a-b774-4c8f-bc81-1f6ff3b93119",
              "name": "Login - Admin",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"login_id\": \"admin\",\n    \"password\": \"admin123!@#\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "968b987b-35d8-45e7-86ea-7fe0bf44d3e4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has access token', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('access_token');",
                      "    pm.expect(jsonData.access_token).to.be.a('string');",
                      "    ",
                      "    // Store token for subsequent requests",
                      "    pm.collectionVariables.set('authToken', jsonData.access_token);",
                      "});",
                      "",
                      "pm.test('Response has correct user role', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.user.role).to.equal('admin');",
                      "});"
                    ],
                    "_lastExecutionId": "3c54578a-842c-4065-885f-55b07ab5112b"
                  }
                }
              ]
            },
            {
              "id": "d790d080-67bb-4cae-b17a-f85cbe617534",
              "name": "Get Current User",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f546f6bc-424e-4630-a343-fbff6d911d3c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has user information', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('user_id');",
                      "    pm.expect(jsonData).to.have.property('name');",
                      "    pm.expect(jsonData).to.have.property('role');",
                      "});"
                    ],
                    "_lastExecutionId": "9c728d6d-a24a-49ac-9861-b28710448d2a"
                  }
                }
              ]
            },
            {
              "id": "812c3f6d-e35e-41cc-bb29-a96da42d089b",
              "name": "Logout",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "logout"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dedc75ac-b376-4a5f-9874-f073a9f75332",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Successfully logged out', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('logout');",
                      "});"
                    ],
                    "_lastExecutionId": "0a778728-9fc1-4306-aa1d-e124adf43cf9"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "688be340-ade8-4466-a16d-f4c3168aea22",
          "length": 18,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d706efb1-4873-4ee3-b9b7-3b699bda0350",
          "scriptId": "f546f6bc-424e-4630-a343-fbff6d911d3c",
          "execution": "9c728d6d-a24a-49ac-9861-b28710448d2a"
        }
      },
      {
        "error": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1555:16)",
          "checksum": "2462284d2be5f4dcd7e8994dbbc6be87",
          "id": "c5393bac-c107-46f6-a70c-47176316fd9a",
          "timestamp": 1751098978634,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1555,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "812c3f6d-e35e-41cc-bb29-a96da42d089b",
          "name": "Logout",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "auth",
                "logout"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Test-Environment",
                "value": "true"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "19b1a964-c68d-40b5-b35f-99333af404ae",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dedc75ac-b376-4a5f-9874-f073a9f75332",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Successfully logged out', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('logout');",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "400aeeb3-f603-4f41-a94e-96da9dbd2351",
          "length": 18,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "e1ca5e7c-6387-4a87-b6aa-5595f40a9627"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response time is less than 1000ms",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:1:3)",
          "checksum": "b2ae74ab21447a23923b63e41bf90ca9",
          "id": "ac15515a-9983-4775-8a7e-e34aa2457c2d",
          "timestamp": 1751098978636,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "812c3f6d-e35e-41cc-bb29-a96da42d089b",
          "name": "Logout",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "logout"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dedc75ac-b376-4a5f-9874-f073a9f75332",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Successfully logged out', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('logout');",
                  "});"
                ],
                "_lastExecutionId": "0a778728-9fc1-4306-aa1d-e124adf43cf9"
              }
            }
          ]
        },
        "parent": {
          "id": "73c9781a-ce7e-48ad-8e84-cd3c9cdf9ba4",
          "name": "Authentication",
          "item": [
            {
              "id": "0085140a-b774-4c8f-bc81-1f6ff3b93119",
              "name": "Login - Admin",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"login_id\": \"admin\",\n    \"password\": \"admin123!@#\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "968b987b-35d8-45e7-86ea-7fe0bf44d3e4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has access token', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('access_token');",
                      "    pm.expect(jsonData.access_token).to.be.a('string');",
                      "    ",
                      "    // Store token for subsequent requests",
                      "    pm.collectionVariables.set('authToken', jsonData.access_token);",
                      "});",
                      "",
                      "pm.test('Response has correct user role', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.user.role).to.equal('admin');",
                      "});"
                    ],
                    "_lastExecutionId": "3c54578a-842c-4065-885f-55b07ab5112b"
                  }
                }
              ]
            },
            {
              "id": "d790d080-67bb-4cae-b17a-f85cbe617534",
              "name": "Get Current User",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f546f6bc-424e-4630-a343-fbff6d911d3c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has user information', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('user_id');",
                      "    pm.expect(jsonData).to.have.property('name');",
                      "    pm.expect(jsonData).to.have.property('role');",
                      "});"
                    ],
                    "_lastExecutionId": "9c728d6d-a24a-49ac-9861-b28710448d2a"
                  }
                }
              ]
            },
            {
              "id": "812c3f6d-e35e-41cc-bb29-a96da42d089b",
              "name": "Logout",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "logout"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dedc75ac-b376-4a5f-9874-f073a9f75332",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Successfully logged out', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('logout');",
                      "});"
                    ],
                    "_lastExecutionId": "0a778728-9fc1-4306-aa1d-e124adf43cf9"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "400aeeb3-f603-4f41-a94e-96da9dbd2351",
          "length": 18,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "e1ca5e7c-6387-4a87-b6aa-5595f40a9627",
          "scriptId": "1ff9de9c-a125-4b3a-b83e-e2cac41c4083",
          "execution": "4ec9316d-c93f-4171-87e5-60e1703ed021"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response has valid content type",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:3)",
          "checksum": "ccd35028725bea1bbda40ea8be37c1fc",
          "id": "63b1c719-d172-453f-9455-f70c8a353ff8",
          "timestamp": 1751098978636,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "812c3f6d-e35e-41cc-bb29-a96da42d089b",
          "name": "Logout",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "logout"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dedc75ac-b376-4a5f-9874-f073a9f75332",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Successfully logged out', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('logout');",
                  "});"
                ],
                "_lastExecutionId": "0a778728-9fc1-4306-aa1d-e124adf43cf9"
              }
            }
          ]
        },
        "parent": {
          "id": "73c9781a-ce7e-48ad-8e84-cd3c9cdf9ba4",
          "name": "Authentication",
          "item": [
            {
              "id": "0085140a-b774-4c8f-bc81-1f6ff3b93119",
              "name": "Login - Admin",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"login_id\": \"admin\",\n    \"password\": \"admin123!@#\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "968b987b-35d8-45e7-86ea-7fe0bf44d3e4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has access token', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('access_token');",
                      "    pm.expect(jsonData.access_token).to.be.a('string');",
                      "    ",
                      "    // Store token for subsequent requests",
                      "    pm.collectionVariables.set('authToken', jsonData.access_token);",
                      "});",
                      "",
                      "pm.test('Response has correct user role', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.user.role).to.equal('admin');",
                      "});"
                    ],
                    "_lastExecutionId": "3c54578a-842c-4065-885f-55b07ab5112b"
                  }
                }
              ]
            },
            {
              "id": "d790d080-67bb-4cae-b17a-f85cbe617534",
              "name": "Get Current User",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f546f6bc-424e-4630-a343-fbff6d911d3c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has user information', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('user_id');",
                      "    pm.expect(jsonData).to.have.property('name');",
                      "    pm.expect(jsonData).to.have.property('role');",
                      "});"
                    ],
                    "_lastExecutionId": "9c728d6d-a24a-49ac-9861-b28710448d2a"
                  }
                }
              ]
            },
            {
              "id": "812c3f6d-e35e-41cc-bb29-a96da42d089b",
              "name": "Logout",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "logout"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dedc75ac-b376-4a5f-9874-f073a9f75332",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Successfully logged out', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('logout');",
                      "});"
                    ],
                    "_lastExecutionId": "0a778728-9fc1-4306-aa1d-e124adf43cf9"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "400aeeb3-f603-4f41-a94e-96da9dbd2351",
          "length": 18,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "e1ca5e7c-6387-4a87-b6aa-5595f40a9627",
          "scriptId": "1ff9de9c-a125-4b3a-b83e-e2cac41c4083",
          "execution": "4ec9316d-c93f-4171-87e5-60e1703ed021"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:3)",
          "checksum": "470ce06f8bb94c3fa9bc0a37723a5549",
          "id": "041e73e2-32e8-4a49-83bf-bddbe6bcf8e1",
          "timestamp": 1751098978639,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "812c3f6d-e35e-41cc-bb29-a96da42d089b",
          "name": "Logout",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "logout"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dedc75ac-b376-4a5f-9874-f073a9f75332",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Successfully logged out', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('logout');",
                  "});"
                ],
                "_lastExecutionId": "0a778728-9fc1-4306-aa1d-e124adf43cf9"
              }
            }
          ]
        },
        "parent": {
          "id": "73c9781a-ce7e-48ad-8e84-cd3c9cdf9ba4",
          "name": "Authentication",
          "item": [
            {
              "id": "0085140a-b774-4c8f-bc81-1f6ff3b93119",
              "name": "Login - Admin",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"login_id\": \"admin\",\n    \"password\": \"admin123!@#\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "968b987b-35d8-45e7-86ea-7fe0bf44d3e4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has access token', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('access_token');",
                      "    pm.expect(jsonData.access_token).to.be.a('string');",
                      "    ",
                      "    // Store token for subsequent requests",
                      "    pm.collectionVariables.set('authToken', jsonData.access_token);",
                      "});",
                      "",
                      "pm.test('Response has correct user role', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.user.role).to.equal('admin');",
                      "});"
                    ],
                    "_lastExecutionId": "3c54578a-842c-4065-885f-55b07ab5112b"
                  }
                }
              ]
            },
            {
              "id": "d790d080-67bb-4cae-b17a-f85cbe617534",
              "name": "Get Current User",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f546f6bc-424e-4630-a343-fbff6d911d3c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has user information', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('user_id');",
                      "    pm.expect(jsonData).to.have.property('name');",
                      "    pm.expect(jsonData).to.have.property('role');",
                      "});"
                    ],
                    "_lastExecutionId": "9c728d6d-a24a-49ac-9861-b28710448d2a"
                  }
                }
              ]
            },
            {
              "id": "812c3f6d-e35e-41cc-bb29-a96da42d089b",
              "name": "Logout",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "logout"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dedc75ac-b376-4a5f-9874-f073a9f75332",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Successfully logged out', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('logout');",
                      "});"
                    ],
                    "_lastExecutionId": "0a778728-9fc1-4306-aa1d-e124adf43cf9"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "400aeeb3-f603-4f41-a94e-96da9dbd2351",
          "length": 18,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "e1ca5e7c-6387-4a87-b6aa-5595f40a9627",
          "scriptId": "dedc75ac-b376-4a5f-9874-f073a9f75332",
          "execution": "0a778728-9fc1-4306-aa1d-e124adf43cf9"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Successfully logged out",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:3)",
          "checksum": "21e1e86c7c10983f82a5f7dc5e5f90ac",
          "id": "02e4cf0b-ac0c-49e8-8e3c-6679c5d90814",
          "timestamp": 1751098978639,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "812c3f6d-e35e-41cc-bb29-a96da42d089b",
          "name": "Logout",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "logout"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dedc75ac-b376-4a5f-9874-f073a9f75332",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Successfully logged out', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('logout');",
                  "});"
                ],
                "_lastExecutionId": "0a778728-9fc1-4306-aa1d-e124adf43cf9"
              }
            }
          ]
        },
        "parent": {
          "id": "73c9781a-ce7e-48ad-8e84-cd3c9cdf9ba4",
          "name": "Authentication",
          "item": [
            {
              "id": "0085140a-b774-4c8f-bc81-1f6ff3b93119",
              "name": "Login - Admin",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"login_id\": \"admin\",\n    \"password\": \"admin123!@#\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "968b987b-35d8-45e7-86ea-7fe0bf44d3e4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has access token', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('access_token');",
                      "    pm.expect(jsonData.access_token).to.be.a('string');",
                      "    ",
                      "    // Store token for subsequent requests",
                      "    pm.collectionVariables.set('authToken', jsonData.access_token);",
                      "});",
                      "",
                      "pm.test('Response has correct user role', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.user.role).to.equal('admin');",
                      "});"
                    ],
                    "_lastExecutionId": "3c54578a-842c-4065-885f-55b07ab5112b"
                  }
                }
              ]
            },
            {
              "id": "d790d080-67bb-4cae-b17a-f85cbe617534",
              "name": "Get Current User",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f546f6bc-424e-4630-a343-fbff6d911d3c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has user information', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('user_id');",
                      "    pm.expect(jsonData).to.have.property('name');",
                      "    pm.expect(jsonData).to.have.property('role');",
                      "});"
                    ],
                    "_lastExecutionId": "9c728d6d-a24a-49ac-9861-b28710448d2a"
                  }
                }
              ]
            },
            {
              "id": "812c3f6d-e35e-41cc-bb29-a96da42d089b",
              "name": "Logout",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "logout"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dedc75ac-b376-4a5f-9874-f073a9f75332",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Successfully logged out', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('logout');",
                      "});"
                    ],
                    "_lastExecutionId": "0a778728-9fc1-4306-aa1d-e124adf43cf9"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "400aeeb3-f603-4f41-a94e-96da9dbd2351",
          "length": 18,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "e1ca5e7c-6387-4a87-b6aa-5595f40a9627",
          "scriptId": "dedc75ac-b376-4a5f-9874-f073a9f75332",
          "execution": "0a778728-9fc1-4306-aa1d-e124adf43cf9"
        }
      },
      {
        "error": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1555:16)",
          "checksum": "2462284d2be5f4dcd7e8994dbbc6be87",
          "id": "23b09a93-6d7e-41a0-9f25-fd474260fbc1",
          "timestamp": 1751098978650,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1555,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "7b554153-df5b-47a9-825c-69b8218df1f7",
          "name": "Get All Templates",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "templates"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Test-Environment",
                "value": "true"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "cda5ccd5-9535-476b-b92e-8d0eba40cce2",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "686c7de9-ee17-4c6e-a113-995e4e499314",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Templates have required fields', function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        const template = jsonData[0];",
                  "        pm.expect(template).to.have.property('_id');",
                  "        pm.expect(template).to.have.property('template_name');",
                  "        pm.expect(template).to.have.property('criteria');",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "3c81c5eb-39db-4651-9ea4-97974cb6bc1c",
          "length": 18,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "38f19be4-6266-43d6-80b6-6904da6dfaf7"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response time is less than 1000ms",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:1:4)",
          "checksum": "3163f0bc14d192a30d4cc3f2b5b2b909",
          "id": "bf1aba0f-4269-4427-b53f-43a631763313",
          "timestamp": 1751098978653,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "7b554153-df5b-47a9-825c-69b8218df1f7",
          "name": "Get All Templates",
          "request": {
            "url": {
              "path": [
                "api",
                "templates"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "686c7de9-ee17-4c6e-a113-995e4e499314",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Templates have required fields', function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        const template = jsonData[0];",
                  "        pm.expect(template).to.have.property('_id');",
                  "        pm.expect(template).to.have.property('template_name');",
                  "        pm.expect(template).to.have.property('criteria');",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "acc013f7-a79a-4905-b6c0-ab435e6a1da1"
              }
            }
          ]
        },
        "parent": {
          "id": "aec415cd-5d3a-459b-a6c0-2fcc973e625b",
          "name": "Templates",
          "item": [
            {
              "id": "7b554153-df5b-47a9-825c-69b8218df1f7",
              "name": "Get All Templates",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "686c7de9-ee17-4c6e-a113-995e4e499314",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "pm.test('Templates have required fields', function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.length > 0) {",
                      "        const template = jsonData[0];",
                      "        pm.expect(template).to.have.property('_id');",
                      "        pm.expect(template).to.have.property('template_name');",
                      "        pm.expect(template).to.have.property('criteria');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "acc013f7-a79a-4905-b6c0-ab435e6a1da1"
                  }
                }
              ]
            },
            {
              "id": "c4e6980d-0de6-48ff-8faa-e81e17b7fcec",
              "name": "Create Template",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"template_name\": \"API Test Template\",\n    \"template_type\": \"score\",\n    \"criteria\": [\n        {\n            \"criterion_name\": \"Quality\",\n            \"max_score\": 10,\n            \"score_step\": 1\n        },\n        {\n            \"criterion_name\": \"Innovation\",\n            \"max_score\": 20,\n            \"score_step\": 2\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "35904553-5851-429f-bd8f-68912f860c55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Template created successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('template_id');",
                      "    ",
                      "    // Store template ID for later tests",
                      "    pm.collectionVariables.set('templateId', jsonData.template_id);",
                      "});"
                    ],
                    "_lastExecutionId": "39da35b5-3ab6-4144-ad1d-20b5a59160e4"
                  }
                }
              ]
            },
            {
              "id": "3a45bcf7-d3d3-4875-8044-89f012aeec03",
              "name": "Update Template",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates",
                    "{{templateId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"template_name\": \"Updated API Test Template\",\n    \"template_type\": \"score\",\n    \"criteria\": [\n        {\n            \"criterion_name\": \"Quality\",\n            \"max_score\": 15,\n            \"score_step\": 1\n        },\n        {\n            \"criterion_name\": \"Innovation\",\n            \"max_score\": 25,\n            \"score_step\": 5\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a31e264f-06f1-4413-bdaa-b29b41fc8da1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Template updated successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated');",
                      "});"
                    ],
                    "_lastExecutionId": "b7b9c346-0bc6-4792-876d-b73407aa9458"
                  }
                }
              ]
            },
            {
              "id": "0f384cd2-4ecf-4e63-8c5b-6a49762b292e",
              "name": "Delete Template",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates",
                    "{{templateId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9183c18c-d992-4090-83be-c9935a5979a1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Template deleted successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted');",
                      "});"
                    ],
                    "_lastExecutionId": "590fa35f-6c26-4aa9-857f-2f181bd3db01"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3c81c5eb-39db-4651-9ea4-97974cb6bc1c",
          "length": 18,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "38f19be4-6266-43d6-80b6-6904da6dfaf7",
          "scriptId": "1ff9de9c-a125-4b3a-b83e-e2cac41c4083",
          "execution": "5b9267f8-eecb-4b8a-9eaf-7b88a02c57b6"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response has valid content type",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:4)",
          "checksum": "0335f5c8704b2347c26d7abf3260ab09",
          "id": "5a585994-3176-4102-b729-8ab39eddf026",
          "timestamp": 1751098978653,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "7b554153-df5b-47a9-825c-69b8218df1f7",
          "name": "Get All Templates",
          "request": {
            "url": {
              "path": [
                "api",
                "templates"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "686c7de9-ee17-4c6e-a113-995e4e499314",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Templates have required fields', function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        const template = jsonData[0];",
                  "        pm.expect(template).to.have.property('_id');",
                  "        pm.expect(template).to.have.property('template_name');",
                  "        pm.expect(template).to.have.property('criteria');",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "acc013f7-a79a-4905-b6c0-ab435e6a1da1"
              }
            }
          ]
        },
        "parent": {
          "id": "aec415cd-5d3a-459b-a6c0-2fcc973e625b",
          "name": "Templates",
          "item": [
            {
              "id": "7b554153-df5b-47a9-825c-69b8218df1f7",
              "name": "Get All Templates",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "686c7de9-ee17-4c6e-a113-995e4e499314",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "pm.test('Templates have required fields', function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.length > 0) {",
                      "        const template = jsonData[0];",
                      "        pm.expect(template).to.have.property('_id');",
                      "        pm.expect(template).to.have.property('template_name');",
                      "        pm.expect(template).to.have.property('criteria');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "acc013f7-a79a-4905-b6c0-ab435e6a1da1"
                  }
                }
              ]
            },
            {
              "id": "c4e6980d-0de6-48ff-8faa-e81e17b7fcec",
              "name": "Create Template",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"template_name\": \"API Test Template\",\n    \"template_type\": \"score\",\n    \"criteria\": [\n        {\n            \"criterion_name\": \"Quality\",\n            \"max_score\": 10,\n            \"score_step\": 1\n        },\n        {\n            \"criterion_name\": \"Innovation\",\n            \"max_score\": 20,\n            \"score_step\": 2\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "35904553-5851-429f-bd8f-68912f860c55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Template created successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('template_id');",
                      "    ",
                      "    // Store template ID for later tests",
                      "    pm.collectionVariables.set('templateId', jsonData.template_id);",
                      "});"
                    ],
                    "_lastExecutionId": "39da35b5-3ab6-4144-ad1d-20b5a59160e4"
                  }
                }
              ]
            },
            {
              "id": "3a45bcf7-d3d3-4875-8044-89f012aeec03",
              "name": "Update Template",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates",
                    "{{templateId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"template_name\": \"Updated API Test Template\",\n    \"template_type\": \"score\",\n    \"criteria\": [\n        {\n            \"criterion_name\": \"Quality\",\n            \"max_score\": 15,\n            \"score_step\": 1\n        },\n        {\n            \"criterion_name\": \"Innovation\",\n            \"max_score\": 25,\n            \"score_step\": 5\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a31e264f-06f1-4413-bdaa-b29b41fc8da1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Template updated successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated');",
                      "});"
                    ],
                    "_lastExecutionId": "b7b9c346-0bc6-4792-876d-b73407aa9458"
                  }
                }
              ]
            },
            {
              "id": "0f384cd2-4ecf-4e63-8c5b-6a49762b292e",
              "name": "Delete Template",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates",
                    "{{templateId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9183c18c-d992-4090-83be-c9935a5979a1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Template deleted successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted');",
                      "});"
                    ],
                    "_lastExecutionId": "590fa35f-6c26-4aa9-857f-2f181bd3db01"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3c81c5eb-39db-4651-9ea4-97974cb6bc1c",
          "length": 18,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "38f19be4-6266-43d6-80b6-6904da6dfaf7",
          "scriptId": "1ff9de9c-a125-4b3a-b83e-e2cac41c4083",
          "execution": "5b9267f8-eecb-4b8a-9eaf-7b88a02c57b6"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:4)",
          "checksum": "5e78bc18623b85feb0a8ad40f56e64fc",
          "id": "cd81805f-4f2c-4146-8b86-4752398602bd",
          "timestamp": 1751098978655,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "7b554153-df5b-47a9-825c-69b8218df1f7",
          "name": "Get All Templates",
          "request": {
            "url": {
              "path": [
                "api",
                "templates"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "686c7de9-ee17-4c6e-a113-995e4e499314",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Templates have required fields', function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        const template = jsonData[0];",
                  "        pm.expect(template).to.have.property('_id');",
                  "        pm.expect(template).to.have.property('template_name');",
                  "        pm.expect(template).to.have.property('criteria');",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "acc013f7-a79a-4905-b6c0-ab435e6a1da1"
              }
            }
          ]
        },
        "parent": {
          "id": "aec415cd-5d3a-459b-a6c0-2fcc973e625b",
          "name": "Templates",
          "item": [
            {
              "id": "7b554153-df5b-47a9-825c-69b8218df1f7",
              "name": "Get All Templates",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "686c7de9-ee17-4c6e-a113-995e4e499314",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "pm.test('Templates have required fields', function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.length > 0) {",
                      "        const template = jsonData[0];",
                      "        pm.expect(template).to.have.property('_id');",
                      "        pm.expect(template).to.have.property('template_name');",
                      "        pm.expect(template).to.have.property('criteria');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "acc013f7-a79a-4905-b6c0-ab435e6a1da1"
                  }
                }
              ]
            },
            {
              "id": "c4e6980d-0de6-48ff-8faa-e81e17b7fcec",
              "name": "Create Template",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"template_name\": \"API Test Template\",\n    \"template_type\": \"score\",\n    \"criteria\": [\n        {\n            \"criterion_name\": \"Quality\",\n            \"max_score\": 10,\n            \"score_step\": 1\n        },\n        {\n            \"criterion_name\": \"Innovation\",\n            \"max_score\": 20,\n            \"score_step\": 2\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "35904553-5851-429f-bd8f-68912f860c55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Template created successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('template_id');",
                      "    ",
                      "    // Store template ID for later tests",
                      "    pm.collectionVariables.set('templateId', jsonData.template_id);",
                      "});"
                    ],
                    "_lastExecutionId": "39da35b5-3ab6-4144-ad1d-20b5a59160e4"
                  }
                }
              ]
            },
            {
              "id": "3a45bcf7-d3d3-4875-8044-89f012aeec03",
              "name": "Update Template",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates",
                    "{{templateId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"template_name\": \"Updated API Test Template\",\n    \"template_type\": \"score\",\n    \"criteria\": [\n        {\n            \"criterion_name\": \"Quality\",\n            \"max_score\": 15,\n            \"score_step\": 1\n        },\n        {\n            \"criterion_name\": \"Innovation\",\n            \"max_score\": 25,\n            \"score_step\": 5\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a31e264f-06f1-4413-bdaa-b29b41fc8da1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Template updated successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated');",
                      "});"
                    ],
                    "_lastExecutionId": "b7b9c346-0bc6-4792-876d-b73407aa9458"
                  }
                }
              ]
            },
            {
              "id": "0f384cd2-4ecf-4e63-8c5b-6a49762b292e",
              "name": "Delete Template",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates",
                    "{{templateId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9183c18c-d992-4090-83be-c9935a5979a1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Template deleted successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted');",
                      "});"
                    ],
                    "_lastExecutionId": "590fa35f-6c26-4aa9-857f-2f181bd3db01"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3c81c5eb-39db-4651-9ea4-97974cb6bc1c",
          "length": 18,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "38f19be4-6266-43d6-80b6-6904da6dfaf7",
          "scriptId": "686c7de9-ee17-4c6e-a113-995e4e499314",
          "execution": "acc013f7-a79a-4905-b6c0-ab435e6a1da1"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response is an array",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:4)",
          "checksum": "9f699cf39784ad4af14f52ef58c4ee68",
          "id": "2a840cad-521d-49a3-baf6-b19be14743da",
          "timestamp": 1751098978656,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "7b554153-df5b-47a9-825c-69b8218df1f7",
          "name": "Get All Templates",
          "request": {
            "url": {
              "path": [
                "api",
                "templates"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "686c7de9-ee17-4c6e-a113-995e4e499314",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Templates have required fields', function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        const template = jsonData[0];",
                  "        pm.expect(template).to.have.property('_id');",
                  "        pm.expect(template).to.have.property('template_name');",
                  "        pm.expect(template).to.have.property('criteria');",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "acc013f7-a79a-4905-b6c0-ab435e6a1da1"
              }
            }
          ]
        },
        "parent": {
          "id": "aec415cd-5d3a-459b-a6c0-2fcc973e625b",
          "name": "Templates",
          "item": [
            {
              "id": "7b554153-df5b-47a9-825c-69b8218df1f7",
              "name": "Get All Templates",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "686c7de9-ee17-4c6e-a113-995e4e499314",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "pm.test('Templates have required fields', function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.length > 0) {",
                      "        const template = jsonData[0];",
                      "        pm.expect(template).to.have.property('_id');",
                      "        pm.expect(template).to.have.property('template_name');",
                      "        pm.expect(template).to.have.property('criteria');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "acc013f7-a79a-4905-b6c0-ab435e6a1da1"
                  }
                }
              ]
            },
            {
              "id": "c4e6980d-0de6-48ff-8faa-e81e17b7fcec",
              "name": "Create Template",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"template_name\": \"API Test Template\",\n    \"template_type\": \"score\",\n    \"criteria\": [\n        {\n            \"criterion_name\": \"Quality\",\n            \"max_score\": 10,\n            \"score_step\": 1\n        },\n        {\n            \"criterion_name\": \"Innovation\",\n            \"max_score\": 20,\n            \"score_step\": 2\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "35904553-5851-429f-bd8f-68912f860c55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Template created successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('template_id');",
                      "    ",
                      "    // Store template ID for later tests",
                      "    pm.collectionVariables.set('templateId', jsonData.template_id);",
                      "});"
                    ],
                    "_lastExecutionId": "39da35b5-3ab6-4144-ad1d-20b5a59160e4"
                  }
                }
              ]
            },
            {
              "id": "3a45bcf7-d3d3-4875-8044-89f012aeec03",
              "name": "Update Template",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates",
                    "{{templateId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"template_name\": \"Updated API Test Template\",\n    \"template_type\": \"score\",\n    \"criteria\": [\n        {\n            \"criterion_name\": \"Quality\",\n            \"max_score\": 15,\n            \"score_step\": 1\n        },\n        {\n            \"criterion_name\": \"Innovation\",\n            \"max_score\": 25,\n            \"score_step\": 5\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a31e264f-06f1-4413-bdaa-b29b41fc8da1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Template updated successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated');",
                      "});"
                    ],
                    "_lastExecutionId": "b7b9c346-0bc6-4792-876d-b73407aa9458"
                  }
                }
              ]
            },
            {
              "id": "0f384cd2-4ecf-4e63-8c5b-6a49762b292e",
              "name": "Delete Template",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates",
                    "{{templateId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9183c18c-d992-4090-83be-c9935a5979a1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Template deleted successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted');",
                      "});"
                    ],
                    "_lastExecutionId": "590fa35f-6c26-4aa9-857f-2f181bd3db01"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3c81c5eb-39db-4651-9ea4-97974cb6bc1c",
          "length": 18,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "38f19be4-6266-43d6-80b6-6904da6dfaf7",
          "scriptId": "686c7de9-ee17-4c6e-a113-995e4e499314",
          "execution": "acc013f7-a79a-4905-b6c0-ab435e6a1da1"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 2,
          "test": "Templates have required fields",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:4)",
          "checksum": "db1a1346fc01324c19a82fecfbc98d8d",
          "id": "8076c0f7-e35a-4903-a755-5c91659faf18",
          "timestamp": 1751098978656,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "7b554153-df5b-47a9-825c-69b8218df1f7",
          "name": "Get All Templates",
          "request": {
            "url": {
              "path": [
                "api",
                "templates"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "686c7de9-ee17-4c6e-a113-995e4e499314",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Templates have required fields', function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        const template = jsonData[0];",
                  "        pm.expect(template).to.have.property('_id');",
                  "        pm.expect(template).to.have.property('template_name');",
                  "        pm.expect(template).to.have.property('criteria');",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "acc013f7-a79a-4905-b6c0-ab435e6a1da1"
              }
            }
          ]
        },
        "parent": {
          "id": "aec415cd-5d3a-459b-a6c0-2fcc973e625b",
          "name": "Templates",
          "item": [
            {
              "id": "7b554153-df5b-47a9-825c-69b8218df1f7",
              "name": "Get All Templates",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "686c7de9-ee17-4c6e-a113-995e4e499314",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "pm.test('Templates have required fields', function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.length > 0) {",
                      "        const template = jsonData[0];",
                      "        pm.expect(template).to.have.property('_id');",
                      "        pm.expect(template).to.have.property('template_name');",
                      "        pm.expect(template).to.have.property('criteria');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "acc013f7-a79a-4905-b6c0-ab435e6a1da1"
                  }
                }
              ]
            },
            {
              "id": "c4e6980d-0de6-48ff-8faa-e81e17b7fcec",
              "name": "Create Template",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"template_name\": \"API Test Template\",\n    \"template_type\": \"score\",\n    \"criteria\": [\n        {\n            \"criterion_name\": \"Quality\",\n            \"max_score\": 10,\n            \"score_step\": 1\n        },\n        {\n            \"criterion_name\": \"Innovation\",\n            \"max_score\": 20,\n            \"score_step\": 2\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "35904553-5851-429f-bd8f-68912f860c55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Template created successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('template_id');",
                      "    ",
                      "    // Store template ID for later tests",
                      "    pm.collectionVariables.set('templateId', jsonData.template_id);",
                      "});"
                    ],
                    "_lastExecutionId": "39da35b5-3ab6-4144-ad1d-20b5a59160e4"
                  }
                }
              ]
            },
            {
              "id": "3a45bcf7-d3d3-4875-8044-89f012aeec03",
              "name": "Update Template",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates",
                    "{{templateId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"template_name\": \"Updated API Test Template\",\n    \"template_type\": \"score\",\n    \"criteria\": [\n        {\n            \"criterion_name\": \"Quality\",\n            \"max_score\": 15,\n            \"score_step\": 1\n        },\n        {\n            \"criterion_name\": \"Innovation\",\n            \"max_score\": 25,\n            \"score_step\": 5\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a31e264f-06f1-4413-bdaa-b29b41fc8da1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Template updated successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated');",
                      "});"
                    ],
                    "_lastExecutionId": "b7b9c346-0bc6-4792-876d-b73407aa9458"
                  }
                }
              ]
            },
            {
              "id": "0f384cd2-4ecf-4e63-8c5b-6a49762b292e",
              "name": "Delete Template",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates",
                    "{{templateId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9183c18c-d992-4090-83be-c9935a5979a1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Template deleted successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted');",
                      "});"
                    ],
                    "_lastExecutionId": "590fa35f-6c26-4aa9-857f-2f181bd3db01"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3c81c5eb-39db-4651-9ea4-97974cb6bc1c",
          "length": 18,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "38f19be4-6266-43d6-80b6-6904da6dfaf7",
          "scriptId": "686c7de9-ee17-4c6e-a113-995e4e499314",
          "execution": "acc013f7-a79a-4905-b6c0-ab435e6a1da1"
        }
      },
      {
        "error": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1555:16)",
          "checksum": "2462284d2be5f4dcd7e8994dbbc6be87",
          "id": "a3e58fc7-6fae-4be8-b438-39bbd929c3e9",
          "timestamp": 1751098978664,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1555,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "c4e6980d-0de6-48ff-8faa-e81e17b7fcec",
          "name": "Create Template",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "templates"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Test-Environment",
                "value": "true"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "ffa201b8-0904-4877-98df-419677b35c17",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"template_name\": \"API Test Template\",\n    \"template_type\": \"score\",\n    \"criteria\": [\n        {\n            \"criterion_name\": \"Quality\",\n            \"max_score\": 10,\n            \"score_step\": 1\n        },\n        {\n            \"criterion_name\": \"Innovation\",\n            \"max_score\": 20,\n            \"score_step\": 2\n        }\n    ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "35904553-5851-429f-bd8f-68912f860c55",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Template created successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('template_id');",
                  "    ",
                  "    // Store template ID for later tests",
                  "    pm.collectionVariables.set('templateId', jsonData.template_id);",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "854becea-c63b-4075-ba4e-878bd6f65551",
          "length": 18,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "01b9918a-2998-47a4-9e5a-ce886f7a6c85"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response time is less than 1000ms",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:1:5)",
          "checksum": "563457d0d585fc761bb99c56ff19fbdf",
          "id": "d14a8287-bb4a-4d2e-ac6a-3e0f6bad6735",
          "timestamp": 1751098978667,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "c4e6980d-0de6-48ff-8faa-e81e17b7fcec",
          "name": "Create Template",
          "request": {
            "url": {
              "path": [
                "api",
                "templates"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"template_name\": \"API Test Template\",\n    \"template_type\": \"score\",\n    \"criteria\": [\n        {\n            \"criterion_name\": \"Quality\",\n            \"max_score\": 10,\n            \"score_step\": 1\n        },\n        {\n            \"criterion_name\": \"Innovation\",\n            \"max_score\": 20,\n            \"score_step\": 2\n        }\n    ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "35904553-5851-429f-bd8f-68912f860c55",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Template created successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('template_id');",
                  "    ",
                  "    // Store template ID for later tests",
                  "    pm.collectionVariables.set('templateId', jsonData.template_id);",
                  "});"
                ],
                "_lastExecutionId": "39da35b5-3ab6-4144-ad1d-20b5a59160e4"
              }
            }
          ]
        },
        "parent": {
          "id": "aec415cd-5d3a-459b-a6c0-2fcc973e625b",
          "name": "Templates",
          "item": [
            {
              "id": "7b554153-df5b-47a9-825c-69b8218df1f7",
              "name": "Get All Templates",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "686c7de9-ee17-4c6e-a113-995e4e499314",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "pm.test('Templates have required fields', function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.length > 0) {",
                      "        const template = jsonData[0];",
                      "        pm.expect(template).to.have.property('_id');",
                      "        pm.expect(template).to.have.property('template_name');",
                      "        pm.expect(template).to.have.property('criteria');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "acc013f7-a79a-4905-b6c0-ab435e6a1da1"
                  }
                }
              ]
            },
            {
              "id": "c4e6980d-0de6-48ff-8faa-e81e17b7fcec",
              "name": "Create Template",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"template_name\": \"API Test Template\",\n    \"template_type\": \"score\",\n    \"criteria\": [\n        {\n            \"criterion_name\": \"Quality\",\n            \"max_score\": 10,\n            \"score_step\": 1\n        },\n        {\n            \"criterion_name\": \"Innovation\",\n            \"max_score\": 20,\n            \"score_step\": 2\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "35904553-5851-429f-bd8f-68912f860c55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Template created successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('template_id');",
                      "    ",
                      "    // Store template ID for later tests",
                      "    pm.collectionVariables.set('templateId', jsonData.template_id);",
                      "});"
                    ],
                    "_lastExecutionId": "39da35b5-3ab6-4144-ad1d-20b5a59160e4"
                  }
                }
              ]
            },
            {
              "id": "3a45bcf7-d3d3-4875-8044-89f012aeec03",
              "name": "Update Template",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates",
                    "{{templateId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"template_name\": \"Updated API Test Template\",\n    \"template_type\": \"score\",\n    \"criteria\": [\n        {\n            \"criterion_name\": \"Quality\",\n            \"max_score\": 15,\n            \"score_step\": 1\n        },\n        {\n            \"criterion_name\": \"Innovation\",\n            \"max_score\": 25,\n            \"score_step\": 5\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a31e264f-06f1-4413-bdaa-b29b41fc8da1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Template updated successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated');",
                      "});"
                    ],
                    "_lastExecutionId": "b7b9c346-0bc6-4792-876d-b73407aa9458"
                  }
                }
              ]
            },
            {
              "id": "0f384cd2-4ecf-4e63-8c5b-6a49762b292e",
              "name": "Delete Template",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates",
                    "{{templateId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9183c18c-d992-4090-83be-c9935a5979a1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Template deleted successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted');",
                      "});"
                    ],
                    "_lastExecutionId": "590fa35f-6c26-4aa9-857f-2f181bd3db01"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "854becea-c63b-4075-ba4e-878bd6f65551",
          "length": 18,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "01b9918a-2998-47a4-9e5a-ce886f7a6c85",
          "scriptId": "1ff9de9c-a125-4b3a-b83e-e2cac41c4083",
          "execution": "9c366022-ce54-4590-8c60-e63ce0c2d3a3"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response has valid content type",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:5)",
          "checksum": "2c11d9031a9d6f510ac2651d0505fe41",
          "id": "3ce490ed-a99f-4f1a-96db-09777d386562",
          "timestamp": 1751098978667,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "c4e6980d-0de6-48ff-8faa-e81e17b7fcec",
          "name": "Create Template",
          "request": {
            "url": {
              "path": [
                "api",
                "templates"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"template_name\": \"API Test Template\",\n    \"template_type\": \"score\",\n    \"criteria\": [\n        {\n            \"criterion_name\": \"Quality\",\n            \"max_score\": 10,\n            \"score_step\": 1\n        },\n        {\n            \"criterion_name\": \"Innovation\",\n            \"max_score\": 20,\n            \"score_step\": 2\n        }\n    ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "35904553-5851-429f-bd8f-68912f860c55",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Template created successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('template_id');",
                  "    ",
                  "    // Store template ID for later tests",
                  "    pm.collectionVariables.set('templateId', jsonData.template_id);",
                  "});"
                ],
                "_lastExecutionId": "39da35b5-3ab6-4144-ad1d-20b5a59160e4"
              }
            }
          ]
        },
        "parent": {
          "id": "aec415cd-5d3a-459b-a6c0-2fcc973e625b",
          "name": "Templates",
          "item": [
            {
              "id": "7b554153-df5b-47a9-825c-69b8218df1f7",
              "name": "Get All Templates",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "686c7de9-ee17-4c6e-a113-995e4e499314",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "pm.test('Templates have required fields', function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.length > 0) {",
                      "        const template = jsonData[0];",
                      "        pm.expect(template).to.have.property('_id');",
                      "        pm.expect(template).to.have.property('template_name');",
                      "        pm.expect(template).to.have.property('criteria');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "acc013f7-a79a-4905-b6c0-ab435e6a1da1"
                  }
                }
              ]
            },
            {
              "id": "c4e6980d-0de6-48ff-8faa-e81e17b7fcec",
              "name": "Create Template",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"template_name\": \"API Test Template\",\n    \"template_type\": \"score\",\n    \"criteria\": [\n        {\n            \"criterion_name\": \"Quality\",\n            \"max_score\": 10,\n            \"score_step\": 1\n        },\n        {\n            \"criterion_name\": \"Innovation\",\n            \"max_score\": 20,\n            \"score_step\": 2\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "35904553-5851-429f-bd8f-68912f860c55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Template created successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('template_id');",
                      "    ",
                      "    // Store template ID for later tests",
                      "    pm.collectionVariables.set('templateId', jsonData.template_id);",
                      "});"
                    ],
                    "_lastExecutionId": "39da35b5-3ab6-4144-ad1d-20b5a59160e4"
                  }
                }
              ]
            },
            {
              "id": "3a45bcf7-d3d3-4875-8044-89f012aeec03",
              "name": "Update Template",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates",
                    "{{templateId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"template_name\": \"Updated API Test Template\",\n    \"template_type\": \"score\",\n    \"criteria\": [\n        {\n            \"criterion_name\": \"Quality\",\n            \"max_score\": 15,\n            \"score_step\": 1\n        },\n        {\n            \"criterion_name\": \"Innovation\",\n            \"max_score\": 25,\n            \"score_step\": 5\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a31e264f-06f1-4413-bdaa-b29b41fc8da1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Template updated successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated');",
                      "});"
                    ],
                    "_lastExecutionId": "b7b9c346-0bc6-4792-876d-b73407aa9458"
                  }
                }
              ]
            },
            {
              "id": "0f384cd2-4ecf-4e63-8c5b-6a49762b292e",
              "name": "Delete Template",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates",
                    "{{templateId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9183c18c-d992-4090-83be-c9935a5979a1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Template deleted successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted');",
                      "});"
                    ],
                    "_lastExecutionId": "590fa35f-6c26-4aa9-857f-2f181bd3db01"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "854becea-c63b-4075-ba4e-878bd6f65551",
          "length": 18,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "01b9918a-2998-47a4-9e5a-ce886f7a6c85",
          "scriptId": "1ff9de9c-a125-4b3a-b83e-e2cac41c4083",
          "execution": "9c366022-ce54-4590-8c60-e63ce0c2d3a3"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 201",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:5)",
          "checksum": "2428fbbc821c8c53f2a85bf25c6c2cf5",
          "id": "6986f2ec-b4c3-4d5a-affb-854a4e184636",
          "timestamp": 1751098978669,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "c4e6980d-0de6-48ff-8faa-e81e17b7fcec",
          "name": "Create Template",
          "request": {
            "url": {
              "path": [
                "api",
                "templates"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"template_name\": \"API Test Template\",\n    \"template_type\": \"score\",\n    \"criteria\": [\n        {\n            \"criterion_name\": \"Quality\",\n            \"max_score\": 10,\n            \"score_step\": 1\n        },\n        {\n            \"criterion_name\": \"Innovation\",\n            \"max_score\": 20,\n            \"score_step\": 2\n        }\n    ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "35904553-5851-429f-bd8f-68912f860c55",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Template created successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('template_id');",
                  "    ",
                  "    // Store template ID for later tests",
                  "    pm.collectionVariables.set('templateId', jsonData.template_id);",
                  "});"
                ],
                "_lastExecutionId": "39da35b5-3ab6-4144-ad1d-20b5a59160e4"
              }
            }
          ]
        },
        "parent": {
          "id": "aec415cd-5d3a-459b-a6c0-2fcc973e625b",
          "name": "Templates",
          "item": [
            {
              "id": "7b554153-df5b-47a9-825c-69b8218df1f7",
              "name": "Get All Templates",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "686c7de9-ee17-4c6e-a113-995e4e499314",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "pm.test('Templates have required fields', function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.length > 0) {",
                      "        const template = jsonData[0];",
                      "        pm.expect(template).to.have.property('_id');",
                      "        pm.expect(template).to.have.property('template_name');",
                      "        pm.expect(template).to.have.property('criteria');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "acc013f7-a79a-4905-b6c0-ab435e6a1da1"
                  }
                }
              ]
            },
            {
              "id": "c4e6980d-0de6-48ff-8faa-e81e17b7fcec",
              "name": "Create Template",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"template_name\": \"API Test Template\",\n    \"template_type\": \"score\",\n    \"criteria\": [\n        {\n            \"criterion_name\": \"Quality\",\n            \"max_score\": 10,\n            \"score_step\": 1\n        },\n        {\n            \"criterion_name\": \"Innovation\",\n            \"max_score\": 20,\n            \"score_step\": 2\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "35904553-5851-429f-bd8f-68912f860c55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Template created successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('template_id');",
                      "    ",
                      "    // Store template ID for later tests",
                      "    pm.collectionVariables.set('templateId', jsonData.template_id);",
                      "});"
                    ],
                    "_lastExecutionId": "39da35b5-3ab6-4144-ad1d-20b5a59160e4"
                  }
                }
              ]
            },
            {
              "id": "3a45bcf7-d3d3-4875-8044-89f012aeec03",
              "name": "Update Template",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates",
                    "{{templateId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"template_name\": \"Updated API Test Template\",\n    \"template_type\": \"score\",\n    \"criteria\": [\n        {\n            \"criterion_name\": \"Quality\",\n            \"max_score\": 15,\n            \"score_step\": 1\n        },\n        {\n            \"criterion_name\": \"Innovation\",\n            \"max_score\": 25,\n            \"score_step\": 5\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a31e264f-06f1-4413-bdaa-b29b41fc8da1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Template updated successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated');",
                      "});"
                    ],
                    "_lastExecutionId": "b7b9c346-0bc6-4792-876d-b73407aa9458"
                  }
                }
              ]
            },
            {
              "id": "0f384cd2-4ecf-4e63-8c5b-6a49762b292e",
              "name": "Delete Template",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates",
                    "{{templateId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9183c18c-d992-4090-83be-c9935a5979a1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Template deleted successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted');",
                      "});"
                    ],
                    "_lastExecutionId": "590fa35f-6c26-4aa9-857f-2f181bd3db01"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "854becea-c63b-4075-ba4e-878bd6f65551",
          "length": 18,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "01b9918a-2998-47a4-9e5a-ce886f7a6c85",
          "scriptId": "35904553-5851-429f-bd8f-68912f860c55",
          "execution": "39da35b5-3ab6-4144-ad1d-20b5a59160e4"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Template created successfully",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:5)",
          "checksum": "04612d6ccc3718fc0cb269f68e8d1e45",
          "id": "3818bd34-071d-4cb8-b663-8cc8a42de690",
          "timestamp": 1751098978669,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "c4e6980d-0de6-48ff-8faa-e81e17b7fcec",
          "name": "Create Template",
          "request": {
            "url": {
              "path": [
                "api",
                "templates"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"template_name\": \"API Test Template\",\n    \"template_type\": \"score\",\n    \"criteria\": [\n        {\n            \"criterion_name\": \"Quality\",\n            \"max_score\": 10,\n            \"score_step\": 1\n        },\n        {\n            \"criterion_name\": \"Innovation\",\n            \"max_score\": 20,\n            \"score_step\": 2\n        }\n    ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "35904553-5851-429f-bd8f-68912f860c55",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Template created successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('template_id');",
                  "    ",
                  "    // Store template ID for later tests",
                  "    pm.collectionVariables.set('templateId', jsonData.template_id);",
                  "});"
                ],
                "_lastExecutionId": "39da35b5-3ab6-4144-ad1d-20b5a59160e4"
              }
            }
          ]
        },
        "parent": {
          "id": "aec415cd-5d3a-459b-a6c0-2fcc973e625b",
          "name": "Templates",
          "item": [
            {
              "id": "7b554153-df5b-47a9-825c-69b8218df1f7",
              "name": "Get All Templates",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "686c7de9-ee17-4c6e-a113-995e4e499314",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "pm.test('Templates have required fields', function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.length > 0) {",
                      "        const template = jsonData[0];",
                      "        pm.expect(template).to.have.property('_id');",
                      "        pm.expect(template).to.have.property('template_name');",
                      "        pm.expect(template).to.have.property('criteria');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "acc013f7-a79a-4905-b6c0-ab435e6a1da1"
                  }
                }
              ]
            },
            {
              "id": "c4e6980d-0de6-48ff-8faa-e81e17b7fcec",
              "name": "Create Template",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"template_name\": \"API Test Template\",\n    \"template_type\": \"score\",\n    \"criteria\": [\n        {\n            \"criterion_name\": \"Quality\",\n            \"max_score\": 10,\n            \"score_step\": 1\n        },\n        {\n            \"criterion_name\": \"Innovation\",\n            \"max_score\": 20,\n            \"score_step\": 2\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "35904553-5851-429f-bd8f-68912f860c55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Template created successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('template_id');",
                      "    ",
                      "    // Store template ID for later tests",
                      "    pm.collectionVariables.set('templateId', jsonData.template_id);",
                      "});"
                    ],
                    "_lastExecutionId": "39da35b5-3ab6-4144-ad1d-20b5a59160e4"
                  }
                }
              ]
            },
            {
              "id": "3a45bcf7-d3d3-4875-8044-89f012aeec03",
              "name": "Update Template",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates",
                    "{{templateId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"template_name\": \"Updated API Test Template\",\n    \"template_type\": \"score\",\n    \"criteria\": [\n        {\n            \"criterion_name\": \"Quality\",\n            \"max_score\": 15,\n            \"score_step\": 1\n        },\n        {\n            \"criterion_name\": \"Innovation\",\n            \"max_score\": 25,\n            \"score_step\": 5\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a31e264f-06f1-4413-bdaa-b29b41fc8da1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Template updated successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated');",
                      "});"
                    ],
                    "_lastExecutionId": "b7b9c346-0bc6-4792-876d-b73407aa9458"
                  }
                }
              ]
            },
            {
              "id": "0f384cd2-4ecf-4e63-8c5b-6a49762b292e",
              "name": "Delete Template",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates",
                    "{{templateId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9183c18c-d992-4090-83be-c9935a5979a1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Template deleted successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted');",
                      "});"
                    ],
                    "_lastExecutionId": "590fa35f-6c26-4aa9-857f-2f181bd3db01"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "854becea-c63b-4075-ba4e-878bd6f65551",
          "length": 18,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "01b9918a-2998-47a4-9e5a-ce886f7a6c85",
          "scriptId": "35904553-5851-429f-bd8f-68912f860c55",
          "execution": "39da35b5-3ab6-4144-ad1d-20b5a59160e4"
        }
      },
      {
        "error": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1555:16)",
          "checksum": "2462284d2be5f4dcd7e8994dbbc6be87",
          "id": "e2e17703-5e92-4d7d-ad84-4d9676e6c152",
          "timestamp": 1751098978679,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1555,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "3a45bcf7-d3d3-4875-8044-89f012aeec03",
          "name": "Update Template",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "templates",
                "%7B%7BtemplateId%7D%7D"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Test-Environment",
                "value": "true"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "d95be109-5562-48ec-bf56-2e8a49389ff7",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"template_name\": \"Updated API Test Template\",\n    \"template_type\": \"score\",\n    \"criteria\": [\n        {\n            \"criterion_name\": \"Quality\",\n            \"max_score\": 15,\n            \"score_step\": 1\n        },\n        {\n            \"criterion_name\": \"Innovation\",\n            \"max_score\": 25,\n            \"score_step\": 5\n        }\n    ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a31e264f-06f1-4413-bdaa-b29b41fc8da1",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Template updated successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('updated');",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "cb4cac9a-b712-40d4-8c1c-5b9c13f91f87",
          "length": 18,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "75cf23f3-6026-4b95-b46c-25cf70245d66"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response time is less than 1000ms",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:1:6)",
          "checksum": "36690662c9fb6d90689d74a5f5854cee",
          "id": "8b212634-f893-4e53-99f1-60f8a12229dc",
          "timestamp": 1751098978681,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "3a45bcf7-d3d3-4875-8044-89f012aeec03",
          "name": "Update Template",
          "request": {
            "url": {
              "path": [
                "api",
                "templates",
                "{{templateId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"template_name\": \"Updated API Test Template\",\n    \"template_type\": \"score\",\n    \"criteria\": [\n        {\n            \"criterion_name\": \"Quality\",\n            \"max_score\": 15,\n            \"score_step\": 1\n        },\n        {\n            \"criterion_name\": \"Innovation\",\n            \"max_score\": 25,\n            \"score_step\": 5\n        }\n    ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a31e264f-06f1-4413-bdaa-b29b41fc8da1",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Template updated successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('updated');",
                  "});"
                ],
                "_lastExecutionId": "b7b9c346-0bc6-4792-876d-b73407aa9458"
              }
            }
          ]
        },
        "parent": {
          "id": "aec415cd-5d3a-459b-a6c0-2fcc973e625b",
          "name": "Templates",
          "item": [
            {
              "id": "7b554153-df5b-47a9-825c-69b8218df1f7",
              "name": "Get All Templates",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "686c7de9-ee17-4c6e-a113-995e4e499314",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "pm.test('Templates have required fields', function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.length > 0) {",
                      "        const template = jsonData[0];",
                      "        pm.expect(template).to.have.property('_id');",
                      "        pm.expect(template).to.have.property('template_name');",
                      "        pm.expect(template).to.have.property('criteria');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "acc013f7-a79a-4905-b6c0-ab435e6a1da1"
                  }
                }
              ]
            },
            {
              "id": "c4e6980d-0de6-48ff-8faa-e81e17b7fcec",
              "name": "Create Template",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"template_name\": \"API Test Template\",\n    \"template_type\": \"score\",\n    \"criteria\": [\n        {\n            \"criterion_name\": \"Quality\",\n            \"max_score\": 10,\n            \"score_step\": 1\n        },\n        {\n            \"criterion_name\": \"Innovation\",\n            \"max_score\": 20,\n            \"score_step\": 2\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "35904553-5851-429f-bd8f-68912f860c55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Template created successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('template_id');",
                      "    ",
                      "    // Store template ID for later tests",
                      "    pm.collectionVariables.set('templateId', jsonData.template_id);",
                      "});"
                    ],
                    "_lastExecutionId": "39da35b5-3ab6-4144-ad1d-20b5a59160e4"
                  }
                }
              ]
            },
            {
              "id": "3a45bcf7-d3d3-4875-8044-89f012aeec03",
              "name": "Update Template",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates",
                    "{{templateId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"template_name\": \"Updated API Test Template\",\n    \"template_type\": \"score\",\n    \"criteria\": [\n        {\n            \"criterion_name\": \"Quality\",\n            \"max_score\": 15,\n            \"score_step\": 1\n        },\n        {\n            \"criterion_name\": \"Innovation\",\n            \"max_score\": 25,\n            \"score_step\": 5\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a31e264f-06f1-4413-bdaa-b29b41fc8da1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Template updated successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated');",
                      "});"
                    ],
                    "_lastExecutionId": "b7b9c346-0bc6-4792-876d-b73407aa9458"
                  }
                }
              ]
            },
            {
              "id": "0f384cd2-4ecf-4e63-8c5b-6a49762b292e",
              "name": "Delete Template",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates",
                    "{{templateId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9183c18c-d992-4090-83be-c9935a5979a1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Template deleted successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted');",
                      "});"
                    ],
                    "_lastExecutionId": "590fa35f-6c26-4aa9-857f-2f181bd3db01"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "cb4cac9a-b712-40d4-8c1c-5b9c13f91f87",
          "length": 18,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "75cf23f3-6026-4b95-b46c-25cf70245d66",
          "scriptId": "1ff9de9c-a125-4b3a-b83e-e2cac41c4083",
          "execution": "11f8ec83-245e-4cc3-86bb-a6469dcfe88f"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response has valid content type",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:6)",
          "checksum": "698ec119e12af91d6b7c23fef8307825",
          "id": "4ef5cc54-1e1b-4d61-a2cc-f14b0eaaa1df",
          "timestamp": 1751098978682,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "3a45bcf7-d3d3-4875-8044-89f012aeec03",
          "name": "Update Template",
          "request": {
            "url": {
              "path": [
                "api",
                "templates",
                "{{templateId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"template_name\": \"Updated API Test Template\",\n    \"template_type\": \"score\",\n    \"criteria\": [\n        {\n            \"criterion_name\": \"Quality\",\n            \"max_score\": 15,\n            \"score_step\": 1\n        },\n        {\n            \"criterion_name\": \"Innovation\",\n            \"max_score\": 25,\n            \"score_step\": 5\n        }\n    ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a31e264f-06f1-4413-bdaa-b29b41fc8da1",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Template updated successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('updated');",
                  "});"
                ],
                "_lastExecutionId": "b7b9c346-0bc6-4792-876d-b73407aa9458"
              }
            }
          ]
        },
        "parent": {
          "id": "aec415cd-5d3a-459b-a6c0-2fcc973e625b",
          "name": "Templates",
          "item": [
            {
              "id": "7b554153-df5b-47a9-825c-69b8218df1f7",
              "name": "Get All Templates",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "686c7de9-ee17-4c6e-a113-995e4e499314",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "pm.test('Templates have required fields', function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.length > 0) {",
                      "        const template = jsonData[0];",
                      "        pm.expect(template).to.have.property('_id');",
                      "        pm.expect(template).to.have.property('template_name');",
                      "        pm.expect(template).to.have.property('criteria');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "acc013f7-a79a-4905-b6c0-ab435e6a1da1"
                  }
                }
              ]
            },
            {
              "id": "c4e6980d-0de6-48ff-8faa-e81e17b7fcec",
              "name": "Create Template",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"template_name\": \"API Test Template\",\n    \"template_type\": \"score\",\n    \"criteria\": [\n        {\n            \"criterion_name\": \"Quality\",\n            \"max_score\": 10,\n            \"score_step\": 1\n        },\n        {\n            \"criterion_name\": \"Innovation\",\n            \"max_score\": 20,\n            \"score_step\": 2\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "35904553-5851-429f-bd8f-68912f860c55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Template created successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('template_id');",
                      "    ",
                      "    // Store template ID for later tests",
                      "    pm.collectionVariables.set('templateId', jsonData.template_id);",
                      "});"
                    ],
                    "_lastExecutionId": "39da35b5-3ab6-4144-ad1d-20b5a59160e4"
                  }
                }
              ]
            },
            {
              "id": "3a45bcf7-d3d3-4875-8044-89f012aeec03",
              "name": "Update Template",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates",
                    "{{templateId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"template_name\": \"Updated API Test Template\",\n    \"template_type\": \"score\",\n    \"criteria\": [\n        {\n            \"criterion_name\": \"Quality\",\n            \"max_score\": 15,\n            \"score_step\": 1\n        },\n        {\n            \"criterion_name\": \"Innovation\",\n            \"max_score\": 25,\n            \"score_step\": 5\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a31e264f-06f1-4413-bdaa-b29b41fc8da1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Template updated successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated');",
                      "});"
                    ],
                    "_lastExecutionId": "b7b9c346-0bc6-4792-876d-b73407aa9458"
                  }
                }
              ]
            },
            {
              "id": "0f384cd2-4ecf-4e63-8c5b-6a49762b292e",
              "name": "Delete Template",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates",
                    "{{templateId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9183c18c-d992-4090-83be-c9935a5979a1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Template deleted successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted');",
                      "});"
                    ],
                    "_lastExecutionId": "590fa35f-6c26-4aa9-857f-2f181bd3db01"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "cb4cac9a-b712-40d4-8c1c-5b9c13f91f87",
          "length": 18,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "75cf23f3-6026-4b95-b46c-25cf70245d66",
          "scriptId": "1ff9de9c-a125-4b3a-b83e-e2cac41c4083",
          "execution": "11f8ec83-245e-4cc3-86bb-a6469dcfe88f"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:6)",
          "checksum": "1a4ec3a35892ad375c572c535bbc6e63",
          "id": "7366346e-56b8-4168-8472-8ea593d3a421",
          "timestamp": 1751098978684,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "3a45bcf7-d3d3-4875-8044-89f012aeec03",
          "name": "Update Template",
          "request": {
            "url": {
              "path": [
                "api",
                "templates",
                "{{templateId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"template_name\": \"Updated API Test Template\",\n    \"template_type\": \"score\",\n    \"criteria\": [\n        {\n            \"criterion_name\": \"Quality\",\n            \"max_score\": 15,\n            \"score_step\": 1\n        },\n        {\n            \"criterion_name\": \"Innovation\",\n            \"max_score\": 25,\n            \"score_step\": 5\n        }\n    ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a31e264f-06f1-4413-bdaa-b29b41fc8da1",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Template updated successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('updated');",
                  "});"
                ],
                "_lastExecutionId": "b7b9c346-0bc6-4792-876d-b73407aa9458"
              }
            }
          ]
        },
        "parent": {
          "id": "aec415cd-5d3a-459b-a6c0-2fcc973e625b",
          "name": "Templates",
          "item": [
            {
              "id": "7b554153-df5b-47a9-825c-69b8218df1f7",
              "name": "Get All Templates",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "686c7de9-ee17-4c6e-a113-995e4e499314",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "pm.test('Templates have required fields', function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.length > 0) {",
                      "        const template = jsonData[0];",
                      "        pm.expect(template).to.have.property('_id');",
                      "        pm.expect(template).to.have.property('template_name');",
                      "        pm.expect(template).to.have.property('criteria');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "acc013f7-a79a-4905-b6c0-ab435e6a1da1"
                  }
                }
              ]
            },
            {
              "id": "c4e6980d-0de6-48ff-8faa-e81e17b7fcec",
              "name": "Create Template",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"template_name\": \"API Test Template\",\n    \"template_type\": \"score\",\n    \"criteria\": [\n        {\n            \"criterion_name\": \"Quality\",\n            \"max_score\": 10,\n            \"score_step\": 1\n        },\n        {\n            \"criterion_name\": \"Innovation\",\n            \"max_score\": 20,\n            \"score_step\": 2\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "35904553-5851-429f-bd8f-68912f860c55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Template created successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('template_id');",
                      "    ",
                      "    // Store template ID for later tests",
                      "    pm.collectionVariables.set('templateId', jsonData.template_id);",
                      "});"
                    ],
                    "_lastExecutionId": "39da35b5-3ab6-4144-ad1d-20b5a59160e4"
                  }
                }
              ]
            },
            {
              "id": "3a45bcf7-d3d3-4875-8044-89f012aeec03",
              "name": "Update Template",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates",
                    "{{templateId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"template_name\": \"Updated API Test Template\",\n    \"template_type\": \"score\",\n    \"criteria\": [\n        {\n            \"criterion_name\": \"Quality\",\n            \"max_score\": 15,\n            \"score_step\": 1\n        },\n        {\n            \"criterion_name\": \"Innovation\",\n            \"max_score\": 25,\n            \"score_step\": 5\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a31e264f-06f1-4413-bdaa-b29b41fc8da1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Template updated successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated');",
                      "});"
                    ],
                    "_lastExecutionId": "b7b9c346-0bc6-4792-876d-b73407aa9458"
                  }
                }
              ]
            },
            {
              "id": "0f384cd2-4ecf-4e63-8c5b-6a49762b292e",
              "name": "Delete Template",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates",
                    "{{templateId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9183c18c-d992-4090-83be-c9935a5979a1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Template deleted successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted');",
                      "});"
                    ],
                    "_lastExecutionId": "590fa35f-6c26-4aa9-857f-2f181bd3db01"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "cb4cac9a-b712-40d4-8c1c-5b9c13f91f87",
          "length": 18,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "75cf23f3-6026-4b95-b46c-25cf70245d66",
          "scriptId": "a31e264f-06f1-4413-bdaa-b29b41fc8da1",
          "execution": "b7b9c346-0bc6-4792-876d-b73407aa9458"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Template updated successfully",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:6)",
          "checksum": "057581163cabe34bdb093c367b431166",
          "id": "3a43846a-dc98-4991-9f4e-abfa9f2f5597",
          "timestamp": 1751098978684,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "3a45bcf7-d3d3-4875-8044-89f012aeec03",
          "name": "Update Template",
          "request": {
            "url": {
              "path": [
                "api",
                "templates",
                "{{templateId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"template_name\": \"Updated API Test Template\",\n    \"template_type\": \"score\",\n    \"criteria\": [\n        {\n            \"criterion_name\": \"Quality\",\n            \"max_score\": 15,\n            \"score_step\": 1\n        },\n        {\n            \"criterion_name\": \"Innovation\",\n            \"max_score\": 25,\n            \"score_step\": 5\n        }\n    ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a31e264f-06f1-4413-bdaa-b29b41fc8da1",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Template updated successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('updated');",
                  "});"
                ],
                "_lastExecutionId": "b7b9c346-0bc6-4792-876d-b73407aa9458"
              }
            }
          ]
        },
        "parent": {
          "id": "aec415cd-5d3a-459b-a6c0-2fcc973e625b",
          "name": "Templates",
          "item": [
            {
              "id": "7b554153-df5b-47a9-825c-69b8218df1f7",
              "name": "Get All Templates",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "686c7de9-ee17-4c6e-a113-995e4e499314",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "pm.test('Templates have required fields', function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.length > 0) {",
                      "        const template = jsonData[0];",
                      "        pm.expect(template).to.have.property('_id');",
                      "        pm.expect(template).to.have.property('template_name');",
                      "        pm.expect(template).to.have.property('criteria');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "acc013f7-a79a-4905-b6c0-ab435e6a1da1"
                  }
                }
              ]
            },
            {
              "id": "c4e6980d-0de6-48ff-8faa-e81e17b7fcec",
              "name": "Create Template",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"template_name\": \"API Test Template\",\n    \"template_type\": \"score\",\n    \"criteria\": [\n        {\n            \"criterion_name\": \"Quality\",\n            \"max_score\": 10,\n            \"score_step\": 1\n        },\n        {\n            \"criterion_name\": \"Innovation\",\n            \"max_score\": 20,\n            \"score_step\": 2\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "35904553-5851-429f-bd8f-68912f860c55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Template created successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('template_id');",
                      "    ",
                      "    // Store template ID for later tests",
                      "    pm.collectionVariables.set('templateId', jsonData.template_id);",
                      "});"
                    ],
                    "_lastExecutionId": "39da35b5-3ab6-4144-ad1d-20b5a59160e4"
                  }
                }
              ]
            },
            {
              "id": "3a45bcf7-d3d3-4875-8044-89f012aeec03",
              "name": "Update Template",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates",
                    "{{templateId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"template_name\": \"Updated API Test Template\",\n    \"template_type\": \"score\",\n    \"criteria\": [\n        {\n            \"criterion_name\": \"Quality\",\n            \"max_score\": 15,\n            \"score_step\": 1\n        },\n        {\n            \"criterion_name\": \"Innovation\",\n            \"max_score\": 25,\n            \"score_step\": 5\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a31e264f-06f1-4413-bdaa-b29b41fc8da1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Template updated successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated');",
                      "});"
                    ],
                    "_lastExecutionId": "b7b9c346-0bc6-4792-876d-b73407aa9458"
                  }
                }
              ]
            },
            {
              "id": "0f384cd2-4ecf-4e63-8c5b-6a49762b292e",
              "name": "Delete Template",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates",
                    "{{templateId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9183c18c-d992-4090-83be-c9935a5979a1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Template deleted successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted');",
                      "});"
                    ],
                    "_lastExecutionId": "590fa35f-6c26-4aa9-857f-2f181bd3db01"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "cb4cac9a-b712-40d4-8c1c-5b9c13f91f87",
          "length": 18,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "75cf23f3-6026-4b95-b46c-25cf70245d66",
          "scriptId": "a31e264f-06f1-4413-bdaa-b29b41fc8da1",
          "execution": "b7b9c346-0bc6-4792-876d-b73407aa9458"
        }
      },
      {
        "error": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1555:16)",
          "checksum": "2462284d2be5f4dcd7e8994dbbc6be87",
          "id": "73f2bf47-7046-418b-b111-c8a9d6a5ace7",
          "timestamp": 1751098978693,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1555,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "0f384cd2-4ecf-4e63-8c5b-6a49762b292e",
          "name": "Delete Template",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "templates",
                "%7B%7BtemplateId%7D%7D"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Test-Environment",
                "value": "true"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "7c28998e-e724-466b-bcad-4d9952146218",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9183c18c-d992-4090-83be-c9935a5979a1",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Template deleted successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('deleted');",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "53f093d9-4d1c-46d3-8632-575b41aaca37",
          "length": 18,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "4a208e2b-3ce3-44d2-a0ce-38e8f9243628"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response time is less than 1000ms",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:1:7)",
          "checksum": "903482f70cfc52109d2f2cf875fd18b0",
          "id": "0a258867-b02e-49a1-8f12-07317afb2e41",
          "timestamp": 1751098978696,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 7,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "0f384cd2-4ecf-4e63-8c5b-6a49762b292e",
          "name": "Delete Template",
          "request": {
            "url": {
              "path": [
                "api",
                "templates",
                "{{templateId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9183c18c-d992-4090-83be-c9935a5979a1",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Template deleted successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('deleted');",
                  "});"
                ],
                "_lastExecutionId": "590fa35f-6c26-4aa9-857f-2f181bd3db01"
              }
            }
          ]
        },
        "parent": {
          "id": "aec415cd-5d3a-459b-a6c0-2fcc973e625b",
          "name": "Templates",
          "item": [
            {
              "id": "7b554153-df5b-47a9-825c-69b8218df1f7",
              "name": "Get All Templates",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "686c7de9-ee17-4c6e-a113-995e4e499314",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "pm.test('Templates have required fields', function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.length > 0) {",
                      "        const template = jsonData[0];",
                      "        pm.expect(template).to.have.property('_id');",
                      "        pm.expect(template).to.have.property('template_name');",
                      "        pm.expect(template).to.have.property('criteria');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "acc013f7-a79a-4905-b6c0-ab435e6a1da1"
                  }
                }
              ]
            },
            {
              "id": "c4e6980d-0de6-48ff-8faa-e81e17b7fcec",
              "name": "Create Template",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"template_name\": \"API Test Template\",\n    \"template_type\": \"score\",\n    \"criteria\": [\n        {\n            \"criterion_name\": \"Quality\",\n            \"max_score\": 10,\n            \"score_step\": 1\n        },\n        {\n            \"criterion_name\": \"Innovation\",\n            \"max_score\": 20,\n            \"score_step\": 2\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "35904553-5851-429f-bd8f-68912f860c55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Template created successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('template_id');",
                      "    ",
                      "    // Store template ID for later tests",
                      "    pm.collectionVariables.set('templateId', jsonData.template_id);",
                      "});"
                    ],
                    "_lastExecutionId": "39da35b5-3ab6-4144-ad1d-20b5a59160e4"
                  }
                }
              ]
            },
            {
              "id": "3a45bcf7-d3d3-4875-8044-89f012aeec03",
              "name": "Update Template",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates",
                    "{{templateId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"template_name\": \"Updated API Test Template\",\n    \"template_type\": \"score\",\n    \"criteria\": [\n        {\n            \"criterion_name\": \"Quality\",\n            \"max_score\": 15,\n            \"score_step\": 1\n        },\n        {\n            \"criterion_name\": \"Innovation\",\n            \"max_score\": 25,\n            \"score_step\": 5\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a31e264f-06f1-4413-bdaa-b29b41fc8da1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Template updated successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated');",
                      "});"
                    ],
                    "_lastExecutionId": "b7b9c346-0bc6-4792-876d-b73407aa9458"
                  }
                }
              ]
            },
            {
              "id": "0f384cd2-4ecf-4e63-8c5b-6a49762b292e",
              "name": "Delete Template",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates",
                    "{{templateId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9183c18c-d992-4090-83be-c9935a5979a1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Template deleted successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted');",
                      "});"
                    ],
                    "_lastExecutionId": "590fa35f-6c26-4aa9-857f-2f181bd3db01"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "53f093d9-4d1c-46d3-8632-575b41aaca37",
          "length": 18,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "4a208e2b-3ce3-44d2-a0ce-38e8f9243628",
          "scriptId": "1ff9de9c-a125-4b3a-b83e-e2cac41c4083",
          "execution": "9a96e91f-a996-4a0d-b807-100c4db1eb30"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response has valid content type",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:7)",
          "checksum": "5b9215de1603a09f8320b119a77d3474",
          "id": "d7c6b953-7ed6-463e-94b8-360e2ef8f51a",
          "timestamp": 1751098978696,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 7,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "0f384cd2-4ecf-4e63-8c5b-6a49762b292e",
          "name": "Delete Template",
          "request": {
            "url": {
              "path": [
                "api",
                "templates",
                "{{templateId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9183c18c-d992-4090-83be-c9935a5979a1",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Template deleted successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('deleted');",
                  "});"
                ],
                "_lastExecutionId": "590fa35f-6c26-4aa9-857f-2f181bd3db01"
              }
            }
          ]
        },
        "parent": {
          "id": "aec415cd-5d3a-459b-a6c0-2fcc973e625b",
          "name": "Templates",
          "item": [
            {
              "id": "7b554153-df5b-47a9-825c-69b8218df1f7",
              "name": "Get All Templates",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "686c7de9-ee17-4c6e-a113-995e4e499314",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "pm.test('Templates have required fields', function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.length > 0) {",
                      "        const template = jsonData[0];",
                      "        pm.expect(template).to.have.property('_id');",
                      "        pm.expect(template).to.have.property('template_name');",
                      "        pm.expect(template).to.have.property('criteria');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "acc013f7-a79a-4905-b6c0-ab435e6a1da1"
                  }
                }
              ]
            },
            {
              "id": "c4e6980d-0de6-48ff-8faa-e81e17b7fcec",
              "name": "Create Template",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"template_name\": \"API Test Template\",\n    \"template_type\": \"score\",\n    \"criteria\": [\n        {\n            \"criterion_name\": \"Quality\",\n            \"max_score\": 10,\n            \"score_step\": 1\n        },\n        {\n            \"criterion_name\": \"Innovation\",\n            \"max_score\": 20,\n            \"score_step\": 2\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "35904553-5851-429f-bd8f-68912f860c55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Template created successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('template_id');",
                      "    ",
                      "    // Store template ID for later tests",
                      "    pm.collectionVariables.set('templateId', jsonData.template_id);",
                      "});"
                    ],
                    "_lastExecutionId": "39da35b5-3ab6-4144-ad1d-20b5a59160e4"
                  }
                }
              ]
            },
            {
              "id": "3a45bcf7-d3d3-4875-8044-89f012aeec03",
              "name": "Update Template",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates",
                    "{{templateId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"template_name\": \"Updated API Test Template\",\n    \"template_type\": \"score\",\n    \"criteria\": [\n        {\n            \"criterion_name\": \"Quality\",\n            \"max_score\": 15,\n            \"score_step\": 1\n        },\n        {\n            \"criterion_name\": \"Innovation\",\n            \"max_score\": 25,\n            \"score_step\": 5\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a31e264f-06f1-4413-bdaa-b29b41fc8da1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Template updated successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated');",
                      "});"
                    ],
                    "_lastExecutionId": "b7b9c346-0bc6-4792-876d-b73407aa9458"
                  }
                }
              ]
            },
            {
              "id": "0f384cd2-4ecf-4e63-8c5b-6a49762b292e",
              "name": "Delete Template",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates",
                    "{{templateId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9183c18c-d992-4090-83be-c9935a5979a1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Template deleted successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted');",
                      "});"
                    ],
                    "_lastExecutionId": "590fa35f-6c26-4aa9-857f-2f181bd3db01"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "53f093d9-4d1c-46d3-8632-575b41aaca37",
          "length": 18,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "4a208e2b-3ce3-44d2-a0ce-38e8f9243628",
          "scriptId": "1ff9de9c-a125-4b3a-b83e-e2cac41c4083",
          "execution": "9a96e91f-a996-4a0d-b807-100c4db1eb30"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:7)",
          "checksum": "cceaa75a111dfd6afb1dcf3ec5edba7f",
          "id": "8e2492b4-3972-40a1-a97a-57182ef1160f",
          "timestamp": 1751098978698,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 7,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "0f384cd2-4ecf-4e63-8c5b-6a49762b292e",
          "name": "Delete Template",
          "request": {
            "url": {
              "path": [
                "api",
                "templates",
                "{{templateId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9183c18c-d992-4090-83be-c9935a5979a1",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Template deleted successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('deleted');",
                  "});"
                ],
                "_lastExecutionId": "590fa35f-6c26-4aa9-857f-2f181bd3db01"
              }
            }
          ]
        },
        "parent": {
          "id": "aec415cd-5d3a-459b-a6c0-2fcc973e625b",
          "name": "Templates",
          "item": [
            {
              "id": "7b554153-df5b-47a9-825c-69b8218df1f7",
              "name": "Get All Templates",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "686c7de9-ee17-4c6e-a113-995e4e499314",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "pm.test('Templates have required fields', function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.length > 0) {",
                      "        const template = jsonData[0];",
                      "        pm.expect(template).to.have.property('_id');",
                      "        pm.expect(template).to.have.property('template_name');",
                      "        pm.expect(template).to.have.property('criteria');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "acc013f7-a79a-4905-b6c0-ab435e6a1da1"
                  }
                }
              ]
            },
            {
              "id": "c4e6980d-0de6-48ff-8faa-e81e17b7fcec",
              "name": "Create Template",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"template_name\": \"API Test Template\",\n    \"template_type\": \"score\",\n    \"criteria\": [\n        {\n            \"criterion_name\": \"Quality\",\n            \"max_score\": 10,\n            \"score_step\": 1\n        },\n        {\n            \"criterion_name\": \"Innovation\",\n            \"max_score\": 20,\n            \"score_step\": 2\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "35904553-5851-429f-bd8f-68912f860c55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Template created successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('template_id');",
                      "    ",
                      "    // Store template ID for later tests",
                      "    pm.collectionVariables.set('templateId', jsonData.template_id);",
                      "});"
                    ],
                    "_lastExecutionId": "39da35b5-3ab6-4144-ad1d-20b5a59160e4"
                  }
                }
              ]
            },
            {
              "id": "3a45bcf7-d3d3-4875-8044-89f012aeec03",
              "name": "Update Template",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates",
                    "{{templateId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"template_name\": \"Updated API Test Template\",\n    \"template_type\": \"score\",\n    \"criteria\": [\n        {\n            \"criterion_name\": \"Quality\",\n            \"max_score\": 15,\n            \"score_step\": 1\n        },\n        {\n            \"criterion_name\": \"Innovation\",\n            \"max_score\": 25,\n            \"score_step\": 5\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a31e264f-06f1-4413-bdaa-b29b41fc8da1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Template updated successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated');",
                      "});"
                    ],
                    "_lastExecutionId": "b7b9c346-0bc6-4792-876d-b73407aa9458"
                  }
                }
              ]
            },
            {
              "id": "0f384cd2-4ecf-4e63-8c5b-6a49762b292e",
              "name": "Delete Template",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates",
                    "{{templateId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9183c18c-d992-4090-83be-c9935a5979a1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Template deleted successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted');",
                      "});"
                    ],
                    "_lastExecutionId": "590fa35f-6c26-4aa9-857f-2f181bd3db01"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "53f093d9-4d1c-46d3-8632-575b41aaca37",
          "length": 18,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "4a208e2b-3ce3-44d2-a0ce-38e8f9243628",
          "scriptId": "9183c18c-d992-4090-83be-c9935a5979a1",
          "execution": "590fa35f-6c26-4aa9-857f-2f181bd3db01"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Template deleted successfully",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:7)",
          "checksum": "dde2ff85b5d5199e3cae24d816c405ff",
          "id": "680baa30-e822-40c2-a2c6-d316fd015698",
          "timestamp": 1751098978698,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 7,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "0f384cd2-4ecf-4e63-8c5b-6a49762b292e",
          "name": "Delete Template",
          "request": {
            "url": {
              "path": [
                "api",
                "templates",
                "{{templateId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9183c18c-d992-4090-83be-c9935a5979a1",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Template deleted successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('deleted');",
                  "});"
                ],
                "_lastExecutionId": "590fa35f-6c26-4aa9-857f-2f181bd3db01"
              }
            }
          ]
        },
        "parent": {
          "id": "aec415cd-5d3a-459b-a6c0-2fcc973e625b",
          "name": "Templates",
          "item": [
            {
              "id": "7b554153-df5b-47a9-825c-69b8218df1f7",
              "name": "Get All Templates",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "686c7de9-ee17-4c6e-a113-995e4e499314",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "pm.test('Templates have required fields', function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.length > 0) {",
                      "        const template = jsonData[0];",
                      "        pm.expect(template).to.have.property('_id');",
                      "        pm.expect(template).to.have.property('template_name');",
                      "        pm.expect(template).to.have.property('criteria');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "acc013f7-a79a-4905-b6c0-ab435e6a1da1"
                  }
                }
              ]
            },
            {
              "id": "c4e6980d-0de6-48ff-8faa-e81e17b7fcec",
              "name": "Create Template",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"template_name\": \"API Test Template\",\n    \"template_type\": \"score\",\n    \"criteria\": [\n        {\n            \"criterion_name\": \"Quality\",\n            \"max_score\": 10,\n            \"score_step\": 1\n        },\n        {\n            \"criterion_name\": \"Innovation\",\n            \"max_score\": 20,\n            \"score_step\": 2\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "35904553-5851-429f-bd8f-68912f860c55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Template created successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('template_id');",
                      "    ",
                      "    // Store template ID for later tests",
                      "    pm.collectionVariables.set('templateId', jsonData.template_id);",
                      "});"
                    ],
                    "_lastExecutionId": "39da35b5-3ab6-4144-ad1d-20b5a59160e4"
                  }
                }
              ]
            },
            {
              "id": "3a45bcf7-d3d3-4875-8044-89f012aeec03",
              "name": "Update Template",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates",
                    "{{templateId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"template_name\": \"Updated API Test Template\",\n    \"template_type\": \"score\",\n    \"criteria\": [\n        {\n            \"criterion_name\": \"Quality\",\n            \"max_score\": 15,\n            \"score_step\": 1\n        },\n        {\n            \"criterion_name\": \"Innovation\",\n            \"max_score\": 25,\n            \"score_step\": 5\n        }\n    ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a31e264f-06f1-4413-bdaa-b29b41fc8da1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Template updated successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('updated');",
                      "});"
                    ],
                    "_lastExecutionId": "b7b9c346-0bc6-4792-876d-b73407aa9458"
                  }
                }
              ]
            },
            {
              "id": "0f384cd2-4ecf-4e63-8c5b-6a49762b292e",
              "name": "Delete Template",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates",
                    "{{templateId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9183c18c-d992-4090-83be-c9935a5979a1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Template deleted successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.include('deleted');",
                      "});"
                    ],
                    "_lastExecutionId": "590fa35f-6c26-4aa9-857f-2f181bd3db01"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "53f093d9-4d1c-46d3-8632-575b41aaca37",
          "length": 18,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "4a208e2b-3ce3-44d2-a0ce-38e8f9243628",
          "scriptId": "9183c18c-d992-4090-83be-c9935a5979a1",
          "execution": "590fa35f-6c26-4aa9-857f-2f181bd3db01"
        }
      },
      {
        "error": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1555:16)",
          "checksum": "2462284d2be5f4dcd7e8994dbbc6be87",
          "id": "7ebd8567-3fd3-4e63-9334-0ccf0aa9ba1a",
          "timestamp": 1751098978707,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1555,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "5e406380-c6b9-4e25-9ad4-ecb41372e91d",
          "name": "Get All Evaluations",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "evaluations"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Test-Environment",
                "value": "true"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "e75a3748-e939-4523-9a48-69333d1c1c26",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dc4815a8-9649-46ed-8792-b21319438a30",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "193bb635-fa86-4ca1-9fbb-f25b743af415",
          "length": 18,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "26a1a0a9-a4e0-4c50-96ca-3cac284ed3a9"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response time is less than 1000ms",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:1:8)",
          "checksum": "c48aef62a86c66c7ec60867fb0d94273",
          "id": "b9fe4a31-485e-467c-9d81-5d1580aa0d96",
          "timestamp": 1751098978709,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "5e406380-c6b9-4e25-9ad4-ecb41372e91d",
          "name": "Get All Evaluations",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluations"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dc4815a8-9649-46ed-8792-b21319438a30",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "302e0809-4a1a-4942-8532-c24f976ef94b"
              }
            }
          ]
        },
        "parent": {
          "id": "41b5405c-a8f0-4c08-a892-8f302290cb53",
          "name": "Evaluations",
          "item": [
            {
              "id": "5e406380-c6b9-4e25-9ad4-ecb41372e91d",
              "name": "Get All Evaluations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dc4815a8-9649-46ed-8792-b21319438a30",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "302e0809-4a1a-4942-8532-c24f976ef94b"
                  }
                }
              ]
            },
            {
              "id": "e5cba38c-9563-4b1c-9c90-1a3dce8cf681",
              "name": "Create Evaluation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"project_id\": \"{{projectId}}\",\n    \"company_id\": \"{{companyId}}\",\n    \"template_id\": \"{{templateId}}\",\n    \"scores\": {\n        \"Quality\": 8,\n        \"Innovation\": 16\n    },\n    \"comments\": \"API test evaluation\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "879bd3c2-c6e9-4c3a-907f-5e65cb3107f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Evaluation created successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('evaluation_id');",
                      "    ",
                      "    // Store evaluation ID",
                      "    pm.collectionVariables.set('evaluationId', jsonData.evaluation_id);",
                      "});"
                    ],
                    "_lastExecutionId": "c5d431f3-b02c-4281-943e-044b870a6aa8"
                  }
                }
              ]
            },
            {
              "id": "dede4546-b5d5-495f-b824-a28c91046702",
              "name": "Export Evaluation as PDF",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations",
                    "{{evaluationId}}",
                    "export",
                    "pdf"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5a131402-103b-47cb-b09d-34af73e0c9bc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is PDF', function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/pdf');",
                      "});"
                    ],
                    "_lastExecutionId": "5ac13351-6c6e-4b77-95af-f8a6814a7326"
                  }
                }
              ]
            },
            {
              "id": "1f0a6d72-1c7f-4899-b923-4a2c6e8b771d",
              "name": "Bulk Export Evaluations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations",
                    "bulk-export"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"evaluation_ids\": [\"{{evaluationId}}\"],\n    \"format\": \"pdf\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ab89637c-14f2-4005-b109-7964eda7ec51",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is ZIP file', function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/zip');",
                      "});"
                    ],
                    "_lastExecutionId": "750c3864-59b7-40f6-99f7-b9bb55a78fd7"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "193bb635-fa86-4ca1-9fbb-f25b743af415",
          "length": 18,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "26a1a0a9-a4e0-4c50-96ca-3cac284ed3a9",
          "scriptId": "1ff9de9c-a125-4b3a-b83e-e2cac41c4083",
          "execution": "462af5a6-7b48-4821-868b-a69241d53c92"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response has valid content type",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:8)",
          "checksum": "f5690a91d6498d60bd4c985aecdd068f",
          "id": "98703719-7c4a-4c70-b84e-f27b6b04489f",
          "timestamp": 1751098978710,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "5e406380-c6b9-4e25-9ad4-ecb41372e91d",
          "name": "Get All Evaluations",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluations"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dc4815a8-9649-46ed-8792-b21319438a30",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "302e0809-4a1a-4942-8532-c24f976ef94b"
              }
            }
          ]
        },
        "parent": {
          "id": "41b5405c-a8f0-4c08-a892-8f302290cb53",
          "name": "Evaluations",
          "item": [
            {
              "id": "5e406380-c6b9-4e25-9ad4-ecb41372e91d",
              "name": "Get All Evaluations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dc4815a8-9649-46ed-8792-b21319438a30",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "302e0809-4a1a-4942-8532-c24f976ef94b"
                  }
                }
              ]
            },
            {
              "id": "e5cba38c-9563-4b1c-9c90-1a3dce8cf681",
              "name": "Create Evaluation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"project_id\": \"{{projectId}}\",\n    \"company_id\": \"{{companyId}}\",\n    \"template_id\": \"{{templateId}}\",\n    \"scores\": {\n        \"Quality\": 8,\n        \"Innovation\": 16\n    },\n    \"comments\": \"API test evaluation\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "879bd3c2-c6e9-4c3a-907f-5e65cb3107f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Evaluation created successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('evaluation_id');",
                      "    ",
                      "    // Store evaluation ID",
                      "    pm.collectionVariables.set('evaluationId', jsonData.evaluation_id);",
                      "});"
                    ],
                    "_lastExecutionId": "c5d431f3-b02c-4281-943e-044b870a6aa8"
                  }
                }
              ]
            },
            {
              "id": "dede4546-b5d5-495f-b824-a28c91046702",
              "name": "Export Evaluation as PDF",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations",
                    "{{evaluationId}}",
                    "export",
                    "pdf"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5a131402-103b-47cb-b09d-34af73e0c9bc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is PDF', function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/pdf');",
                      "});"
                    ],
                    "_lastExecutionId": "5ac13351-6c6e-4b77-95af-f8a6814a7326"
                  }
                }
              ]
            },
            {
              "id": "1f0a6d72-1c7f-4899-b923-4a2c6e8b771d",
              "name": "Bulk Export Evaluations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations",
                    "bulk-export"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"evaluation_ids\": [\"{{evaluationId}}\"],\n    \"format\": \"pdf\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ab89637c-14f2-4005-b109-7964eda7ec51",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is ZIP file', function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/zip');",
                      "});"
                    ],
                    "_lastExecutionId": "750c3864-59b7-40f6-99f7-b9bb55a78fd7"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "193bb635-fa86-4ca1-9fbb-f25b743af415",
          "length": 18,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "26a1a0a9-a4e0-4c50-96ca-3cac284ed3a9",
          "scriptId": "1ff9de9c-a125-4b3a-b83e-e2cac41c4083",
          "execution": "462af5a6-7b48-4821-868b-a69241d53c92"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:8)",
          "checksum": "685d167932608e4ac32feacd43beb324",
          "id": "59ae3b30-2178-4df2-8f8c-0897735649dc",
          "timestamp": 1751098978712,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "5e406380-c6b9-4e25-9ad4-ecb41372e91d",
          "name": "Get All Evaluations",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluations"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dc4815a8-9649-46ed-8792-b21319438a30",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "302e0809-4a1a-4942-8532-c24f976ef94b"
              }
            }
          ]
        },
        "parent": {
          "id": "41b5405c-a8f0-4c08-a892-8f302290cb53",
          "name": "Evaluations",
          "item": [
            {
              "id": "5e406380-c6b9-4e25-9ad4-ecb41372e91d",
              "name": "Get All Evaluations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dc4815a8-9649-46ed-8792-b21319438a30",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "302e0809-4a1a-4942-8532-c24f976ef94b"
                  }
                }
              ]
            },
            {
              "id": "e5cba38c-9563-4b1c-9c90-1a3dce8cf681",
              "name": "Create Evaluation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"project_id\": \"{{projectId}}\",\n    \"company_id\": \"{{companyId}}\",\n    \"template_id\": \"{{templateId}}\",\n    \"scores\": {\n        \"Quality\": 8,\n        \"Innovation\": 16\n    },\n    \"comments\": \"API test evaluation\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "879bd3c2-c6e9-4c3a-907f-5e65cb3107f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Evaluation created successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('evaluation_id');",
                      "    ",
                      "    // Store evaluation ID",
                      "    pm.collectionVariables.set('evaluationId', jsonData.evaluation_id);",
                      "});"
                    ],
                    "_lastExecutionId": "c5d431f3-b02c-4281-943e-044b870a6aa8"
                  }
                }
              ]
            },
            {
              "id": "dede4546-b5d5-495f-b824-a28c91046702",
              "name": "Export Evaluation as PDF",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations",
                    "{{evaluationId}}",
                    "export",
                    "pdf"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5a131402-103b-47cb-b09d-34af73e0c9bc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is PDF', function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/pdf');",
                      "});"
                    ],
                    "_lastExecutionId": "5ac13351-6c6e-4b77-95af-f8a6814a7326"
                  }
                }
              ]
            },
            {
              "id": "1f0a6d72-1c7f-4899-b923-4a2c6e8b771d",
              "name": "Bulk Export Evaluations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations",
                    "bulk-export"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"evaluation_ids\": [\"{{evaluationId}}\"],\n    \"format\": \"pdf\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ab89637c-14f2-4005-b109-7964eda7ec51",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is ZIP file', function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/zip');",
                      "});"
                    ],
                    "_lastExecutionId": "750c3864-59b7-40f6-99f7-b9bb55a78fd7"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "193bb635-fa86-4ca1-9fbb-f25b743af415",
          "length": 18,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "26a1a0a9-a4e0-4c50-96ca-3cac284ed3a9",
          "scriptId": "dc4815a8-9649-46ed-8792-b21319438a30",
          "execution": "302e0809-4a1a-4942-8532-c24f976ef94b"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response is an array",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:8)",
          "checksum": "eaeb29feb5e7258b28e729345e3983e5",
          "id": "d6ce2a95-0d8d-4eff-9bdc-1465a6179aba",
          "timestamp": 1751098978712,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "5e406380-c6b9-4e25-9ad4-ecb41372e91d",
          "name": "Get All Evaluations",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluations"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dc4815a8-9649-46ed-8792-b21319438a30",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "302e0809-4a1a-4942-8532-c24f976ef94b"
              }
            }
          ]
        },
        "parent": {
          "id": "41b5405c-a8f0-4c08-a892-8f302290cb53",
          "name": "Evaluations",
          "item": [
            {
              "id": "5e406380-c6b9-4e25-9ad4-ecb41372e91d",
              "name": "Get All Evaluations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dc4815a8-9649-46ed-8792-b21319438a30",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "302e0809-4a1a-4942-8532-c24f976ef94b"
                  }
                }
              ]
            },
            {
              "id": "e5cba38c-9563-4b1c-9c90-1a3dce8cf681",
              "name": "Create Evaluation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"project_id\": \"{{projectId}}\",\n    \"company_id\": \"{{companyId}}\",\n    \"template_id\": \"{{templateId}}\",\n    \"scores\": {\n        \"Quality\": 8,\n        \"Innovation\": 16\n    },\n    \"comments\": \"API test evaluation\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "879bd3c2-c6e9-4c3a-907f-5e65cb3107f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Evaluation created successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('evaluation_id');",
                      "    ",
                      "    // Store evaluation ID",
                      "    pm.collectionVariables.set('evaluationId', jsonData.evaluation_id);",
                      "});"
                    ],
                    "_lastExecutionId": "c5d431f3-b02c-4281-943e-044b870a6aa8"
                  }
                }
              ]
            },
            {
              "id": "dede4546-b5d5-495f-b824-a28c91046702",
              "name": "Export Evaluation as PDF",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations",
                    "{{evaluationId}}",
                    "export",
                    "pdf"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5a131402-103b-47cb-b09d-34af73e0c9bc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is PDF', function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/pdf');",
                      "});"
                    ],
                    "_lastExecutionId": "5ac13351-6c6e-4b77-95af-f8a6814a7326"
                  }
                }
              ]
            },
            {
              "id": "1f0a6d72-1c7f-4899-b923-4a2c6e8b771d",
              "name": "Bulk Export Evaluations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations",
                    "bulk-export"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"evaluation_ids\": [\"{{evaluationId}}\"],\n    \"format\": \"pdf\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ab89637c-14f2-4005-b109-7964eda7ec51",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is ZIP file', function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/zip');",
                      "});"
                    ],
                    "_lastExecutionId": "750c3864-59b7-40f6-99f7-b9bb55a78fd7"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "193bb635-fa86-4ca1-9fbb-f25b743af415",
          "length": 18,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "26a1a0a9-a4e0-4c50-96ca-3cac284ed3a9",
          "scriptId": "dc4815a8-9649-46ed-8792-b21319438a30",
          "execution": "302e0809-4a1a-4942-8532-c24f976ef94b"
        }
      },
      {
        "error": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1555:16)",
          "checksum": "2462284d2be5f4dcd7e8994dbbc6be87",
          "id": "904b7fb8-a920-4b02-b60d-5f684b36fc17",
          "timestamp": 1751098978721,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1555,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "e5cba38c-9563-4b1c-9c90-1a3dce8cf681",
          "name": "Create Evaluation",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "evaluations"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Test-Environment",
                "value": "true"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "96478a5d-51b6-499a-a6bd-b819c2f2fb4a",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"project_id\": \"{{projectId}}\",\n    \"company_id\": \"{{companyId}}\",\n    \"template_id\": \"{{templateId}}\",\n    \"scores\": {\n        \"Quality\": 8,\n        \"Innovation\": 16\n    },\n    \"comments\": \"API test evaluation\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "879bd3c2-c6e9-4c3a-907f-5e65cb3107f9",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Evaluation created successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('evaluation_id');",
                  "    ",
                  "    // Store evaluation ID",
                  "    pm.collectionVariables.set('evaluationId', jsonData.evaluation_id);",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "a53bbf0a-f867-4226-920e-d34c60ea7785",
          "length": 18,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "94127491-6101-464c-ac4a-a08c04569ebc"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response time is less than 1000ms",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:1:9)",
          "checksum": "da60dbbd7d21f55fe91379db29abffd6",
          "id": "3ab7cf24-1895-4645-83ff-6ca4a22c1a1e",
          "timestamp": 1751098978724,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "e5cba38c-9563-4b1c-9c90-1a3dce8cf681",
          "name": "Create Evaluation",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluations"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"project_id\": \"{{projectId}}\",\n    \"company_id\": \"{{companyId}}\",\n    \"template_id\": \"{{templateId}}\",\n    \"scores\": {\n        \"Quality\": 8,\n        \"Innovation\": 16\n    },\n    \"comments\": \"API test evaluation\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "879bd3c2-c6e9-4c3a-907f-5e65cb3107f9",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Evaluation created successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('evaluation_id');",
                  "    ",
                  "    // Store evaluation ID",
                  "    pm.collectionVariables.set('evaluationId', jsonData.evaluation_id);",
                  "});"
                ],
                "_lastExecutionId": "c5d431f3-b02c-4281-943e-044b870a6aa8"
              }
            }
          ]
        },
        "parent": {
          "id": "41b5405c-a8f0-4c08-a892-8f302290cb53",
          "name": "Evaluations",
          "item": [
            {
              "id": "5e406380-c6b9-4e25-9ad4-ecb41372e91d",
              "name": "Get All Evaluations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dc4815a8-9649-46ed-8792-b21319438a30",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "302e0809-4a1a-4942-8532-c24f976ef94b"
                  }
                }
              ]
            },
            {
              "id": "e5cba38c-9563-4b1c-9c90-1a3dce8cf681",
              "name": "Create Evaluation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"project_id\": \"{{projectId}}\",\n    \"company_id\": \"{{companyId}}\",\n    \"template_id\": \"{{templateId}}\",\n    \"scores\": {\n        \"Quality\": 8,\n        \"Innovation\": 16\n    },\n    \"comments\": \"API test evaluation\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "879bd3c2-c6e9-4c3a-907f-5e65cb3107f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Evaluation created successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('evaluation_id');",
                      "    ",
                      "    // Store evaluation ID",
                      "    pm.collectionVariables.set('evaluationId', jsonData.evaluation_id);",
                      "});"
                    ],
                    "_lastExecutionId": "c5d431f3-b02c-4281-943e-044b870a6aa8"
                  }
                }
              ]
            },
            {
              "id": "dede4546-b5d5-495f-b824-a28c91046702",
              "name": "Export Evaluation as PDF",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations",
                    "{{evaluationId}}",
                    "export",
                    "pdf"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5a131402-103b-47cb-b09d-34af73e0c9bc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is PDF', function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/pdf');",
                      "});"
                    ],
                    "_lastExecutionId": "5ac13351-6c6e-4b77-95af-f8a6814a7326"
                  }
                }
              ]
            },
            {
              "id": "1f0a6d72-1c7f-4899-b923-4a2c6e8b771d",
              "name": "Bulk Export Evaluations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations",
                    "bulk-export"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"evaluation_ids\": [\"{{evaluationId}}\"],\n    \"format\": \"pdf\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ab89637c-14f2-4005-b109-7964eda7ec51",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is ZIP file', function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/zip');",
                      "});"
                    ],
                    "_lastExecutionId": "750c3864-59b7-40f6-99f7-b9bb55a78fd7"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "a53bbf0a-f867-4226-920e-d34c60ea7785",
          "length": 18,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "94127491-6101-464c-ac4a-a08c04569ebc",
          "scriptId": "1ff9de9c-a125-4b3a-b83e-e2cac41c4083",
          "execution": "363d245e-78b4-4b7c-bea8-617223daf5ff"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response has valid content type",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:9)",
          "checksum": "292bd5a6d7752f8a7fa749bcbd28dd4d",
          "id": "d87c361c-6cde-45ac-bf53-0749fa3f0eb1",
          "timestamp": 1751098978724,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "e5cba38c-9563-4b1c-9c90-1a3dce8cf681",
          "name": "Create Evaluation",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluations"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"project_id\": \"{{projectId}}\",\n    \"company_id\": \"{{companyId}}\",\n    \"template_id\": \"{{templateId}}\",\n    \"scores\": {\n        \"Quality\": 8,\n        \"Innovation\": 16\n    },\n    \"comments\": \"API test evaluation\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "879bd3c2-c6e9-4c3a-907f-5e65cb3107f9",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Evaluation created successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('evaluation_id');",
                  "    ",
                  "    // Store evaluation ID",
                  "    pm.collectionVariables.set('evaluationId', jsonData.evaluation_id);",
                  "});"
                ],
                "_lastExecutionId": "c5d431f3-b02c-4281-943e-044b870a6aa8"
              }
            }
          ]
        },
        "parent": {
          "id": "41b5405c-a8f0-4c08-a892-8f302290cb53",
          "name": "Evaluations",
          "item": [
            {
              "id": "5e406380-c6b9-4e25-9ad4-ecb41372e91d",
              "name": "Get All Evaluations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dc4815a8-9649-46ed-8792-b21319438a30",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "302e0809-4a1a-4942-8532-c24f976ef94b"
                  }
                }
              ]
            },
            {
              "id": "e5cba38c-9563-4b1c-9c90-1a3dce8cf681",
              "name": "Create Evaluation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"project_id\": \"{{projectId}}\",\n    \"company_id\": \"{{companyId}}\",\n    \"template_id\": \"{{templateId}}\",\n    \"scores\": {\n        \"Quality\": 8,\n        \"Innovation\": 16\n    },\n    \"comments\": \"API test evaluation\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "879bd3c2-c6e9-4c3a-907f-5e65cb3107f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Evaluation created successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('evaluation_id');",
                      "    ",
                      "    // Store evaluation ID",
                      "    pm.collectionVariables.set('evaluationId', jsonData.evaluation_id);",
                      "});"
                    ],
                    "_lastExecutionId": "c5d431f3-b02c-4281-943e-044b870a6aa8"
                  }
                }
              ]
            },
            {
              "id": "dede4546-b5d5-495f-b824-a28c91046702",
              "name": "Export Evaluation as PDF",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations",
                    "{{evaluationId}}",
                    "export",
                    "pdf"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5a131402-103b-47cb-b09d-34af73e0c9bc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is PDF', function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/pdf');",
                      "});"
                    ],
                    "_lastExecutionId": "5ac13351-6c6e-4b77-95af-f8a6814a7326"
                  }
                }
              ]
            },
            {
              "id": "1f0a6d72-1c7f-4899-b923-4a2c6e8b771d",
              "name": "Bulk Export Evaluations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations",
                    "bulk-export"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"evaluation_ids\": [\"{{evaluationId}}\"],\n    \"format\": \"pdf\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ab89637c-14f2-4005-b109-7964eda7ec51",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is ZIP file', function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/zip');",
                      "});"
                    ],
                    "_lastExecutionId": "750c3864-59b7-40f6-99f7-b9bb55a78fd7"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "a53bbf0a-f867-4226-920e-d34c60ea7785",
          "length": 18,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "94127491-6101-464c-ac4a-a08c04569ebc",
          "scriptId": "1ff9de9c-a125-4b3a-b83e-e2cac41c4083",
          "execution": "363d245e-78b4-4b7c-bea8-617223daf5ff"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 201",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:9)",
          "checksum": "f75ec621c8ab30866f7c831e365fcc1d",
          "id": "2a8fcb44-5c75-427c-9eab-86c27a14214c",
          "timestamp": 1751098978726,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "e5cba38c-9563-4b1c-9c90-1a3dce8cf681",
          "name": "Create Evaluation",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluations"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"project_id\": \"{{projectId}}\",\n    \"company_id\": \"{{companyId}}\",\n    \"template_id\": \"{{templateId}}\",\n    \"scores\": {\n        \"Quality\": 8,\n        \"Innovation\": 16\n    },\n    \"comments\": \"API test evaluation\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "879bd3c2-c6e9-4c3a-907f-5e65cb3107f9",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Evaluation created successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('evaluation_id');",
                  "    ",
                  "    // Store evaluation ID",
                  "    pm.collectionVariables.set('evaluationId', jsonData.evaluation_id);",
                  "});"
                ],
                "_lastExecutionId": "c5d431f3-b02c-4281-943e-044b870a6aa8"
              }
            }
          ]
        },
        "parent": {
          "id": "41b5405c-a8f0-4c08-a892-8f302290cb53",
          "name": "Evaluations",
          "item": [
            {
              "id": "5e406380-c6b9-4e25-9ad4-ecb41372e91d",
              "name": "Get All Evaluations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dc4815a8-9649-46ed-8792-b21319438a30",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "302e0809-4a1a-4942-8532-c24f976ef94b"
                  }
                }
              ]
            },
            {
              "id": "e5cba38c-9563-4b1c-9c90-1a3dce8cf681",
              "name": "Create Evaluation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"project_id\": \"{{projectId}}\",\n    \"company_id\": \"{{companyId}}\",\n    \"template_id\": \"{{templateId}}\",\n    \"scores\": {\n        \"Quality\": 8,\n        \"Innovation\": 16\n    },\n    \"comments\": \"API test evaluation\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "879bd3c2-c6e9-4c3a-907f-5e65cb3107f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Evaluation created successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('evaluation_id');",
                      "    ",
                      "    // Store evaluation ID",
                      "    pm.collectionVariables.set('evaluationId', jsonData.evaluation_id);",
                      "});"
                    ],
                    "_lastExecutionId": "c5d431f3-b02c-4281-943e-044b870a6aa8"
                  }
                }
              ]
            },
            {
              "id": "dede4546-b5d5-495f-b824-a28c91046702",
              "name": "Export Evaluation as PDF",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations",
                    "{{evaluationId}}",
                    "export",
                    "pdf"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5a131402-103b-47cb-b09d-34af73e0c9bc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is PDF', function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/pdf');",
                      "});"
                    ],
                    "_lastExecutionId": "5ac13351-6c6e-4b77-95af-f8a6814a7326"
                  }
                }
              ]
            },
            {
              "id": "1f0a6d72-1c7f-4899-b923-4a2c6e8b771d",
              "name": "Bulk Export Evaluations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations",
                    "bulk-export"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"evaluation_ids\": [\"{{evaluationId}}\"],\n    \"format\": \"pdf\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ab89637c-14f2-4005-b109-7964eda7ec51",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is ZIP file', function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/zip');",
                      "});"
                    ],
                    "_lastExecutionId": "750c3864-59b7-40f6-99f7-b9bb55a78fd7"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "a53bbf0a-f867-4226-920e-d34c60ea7785",
          "length": 18,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "94127491-6101-464c-ac4a-a08c04569ebc",
          "scriptId": "879bd3c2-c6e9-4c3a-907f-5e65cb3107f9",
          "execution": "c5d431f3-b02c-4281-943e-044b870a6aa8"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Evaluation created successfully",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:9)",
          "checksum": "1552c4f1ed0d1849c062abb99b00d703",
          "id": "aec30ae9-740d-48e9-a2a4-db8bf70c6d93",
          "timestamp": 1751098978726,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "e5cba38c-9563-4b1c-9c90-1a3dce8cf681",
          "name": "Create Evaluation",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluations"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"project_id\": \"{{projectId}}\",\n    \"company_id\": \"{{companyId}}\",\n    \"template_id\": \"{{templateId}}\",\n    \"scores\": {\n        \"Quality\": 8,\n        \"Innovation\": 16\n    },\n    \"comments\": \"API test evaluation\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "879bd3c2-c6e9-4c3a-907f-5e65cb3107f9",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Evaluation created successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('evaluation_id');",
                  "    ",
                  "    // Store evaluation ID",
                  "    pm.collectionVariables.set('evaluationId', jsonData.evaluation_id);",
                  "});"
                ],
                "_lastExecutionId": "c5d431f3-b02c-4281-943e-044b870a6aa8"
              }
            }
          ]
        },
        "parent": {
          "id": "41b5405c-a8f0-4c08-a892-8f302290cb53",
          "name": "Evaluations",
          "item": [
            {
              "id": "5e406380-c6b9-4e25-9ad4-ecb41372e91d",
              "name": "Get All Evaluations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dc4815a8-9649-46ed-8792-b21319438a30",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "302e0809-4a1a-4942-8532-c24f976ef94b"
                  }
                }
              ]
            },
            {
              "id": "e5cba38c-9563-4b1c-9c90-1a3dce8cf681",
              "name": "Create Evaluation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"project_id\": \"{{projectId}}\",\n    \"company_id\": \"{{companyId}}\",\n    \"template_id\": \"{{templateId}}\",\n    \"scores\": {\n        \"Quality\": 8,\n        \"Innovation\": 16\n    },\n    \"comments\": \"API test evaluation\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "879bd3c2-c6e9-4c3a-907f-5e65cb3107f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Evaluation created successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('evaluation_id');",
                      "    ",
                      "    // Store evaluation ID",
                      "    pm.collectionVariables.set('evaluationId', jsonData.evaluation_id);",
                      "});"
                    ],
                    "_lastExecutionId": "c5d431f3-b02c-4281-943e-044b870a6aa8"
                  }
                }
              ]
            },
            {
              "id": "dede4546-b5d5-495f-b824-a28c91046702",
              "name": "Export Evaluation as PDF",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations",
                    "{{evaluationId}}",
                    "export",
                    "pdf"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5a131402-103b-47cb-b09d-34af73e0c9bc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is PDF', function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/pdf');",
                      "});"
                    ],
                    "_lastExecutionId": "5ac13351-6c6e-4b77-95af-f8a6814a7326"
                  }
                }
              ]
            },
            {
              "id": "1f0a6d72-1c7f-4899-b923-4a2c6e8b771d",
              "name": "Bulk Export Evaluations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations",
                    "bulk-export"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"evaluation_ids\": [\"{{evaluationId}}\"],\n    \"format\": \"pdf\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ab89637c-14f2-4005-b109-7964eda7ec51",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is ZIP file', function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/zip');",
                      "});"
                    ],
                    "_lastExecutionId": "750c3864-59b7-40f6-99f7-b9bb55a78fd7"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "a53bbf0a-f867-4226-920e-d34c60ea7785",
          "length": 18,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "94127491-6101-464c-ac4a-a08c04569ebc",
          "scriptId": "879bd3c2-c6e9-4c3a-907f-5e65cb3107f9",
          "execution": "c5d431f3-b02c-4281-943e-044b870a6aa8"
        }
      },
      {
        "error": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1555:16)",
          "checksum": "2462284d2be5f4dcd7e8994dbbc6be87",
          "id": "fec71c59-534e-4f07-99db-d3381fb56df6",
          "timestamp": 1751098978737,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1555,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "dede4546-b5d5-495f-b824-a28c91046702",
          "name": "Export Evaluation as PDF",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "evaluations",
                "%7B%7BevaluationId%7D%7D",
                "export",
                "pdf"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Test-Environment",
                "value": "true"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "09eb6ddc-953a-4b9f-b242-89958ff6cc98",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5a131402-103b-47cb-b09d-34af73e0c9bc",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is PDF', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/pdf');",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "5e9f78a0-48c9-4295-9b2f-a2f07003f043",
          "length": 18,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "6a0e715a-8966-4a3e-81dd-2e24d49f980f"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response time is less than 1000ms",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:1:10)",
          "checksum": "7b138c89ab4aba2ac9a969ddb658ca89",
          "id": "b0278315-0de9-462a-9576-a09d24bf5b22",
          "timestamp": 1751098978740,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "dede4546-b5d5-495f-b824-a28c91046702",
          "name": "Export Evaluation as PDF",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluations",
                "{{evaluationId}}",
                "export",
                "pdf"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5a131402-103b-47cb-b09d-34af73e0c9bc",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is PDF', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/pdf');",
                  "});"
                ],
                "_lastExecutionId": "5ac13351-6c6e-4b77-95af-f8a6814a7326"
              }
            }
          ]
        },
        "parent": {
          "id": "41b5405c-a8f0-4c08-a892-8f302290cb53",
          "name": "Evaluations",
          "item": [
            {
              "id": "5e406380-c6b9-4e25-9ad4-ecb41372e91d",
              "name": "Get All Evaluations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dc4815a8-9649-46ed-8792-b21319438a30",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "302e0809-4a1a-4942-8532-c24f976ef94b"
                  }
                }
              ]
            },
            {
              "id": "e5cba38c-9563-4b1c-9c90-1a3dce8cf681",
              "name": "Create Evaluation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"project_id\": \"{{projectId}}\",\n    \"company_id\": \"{{companyId}}\",\n    \"template_id\": \"{{templateId}}\",\n    \"scores\": {\n        \"Quality\": 8,\n        \"Innovation\": 16\n    },\n    \"comments\": \"API test evaluation\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "879bd3c2-c6e9-4c3a-907f-5e65cb3107f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Evaluation created successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('evaluation_id');",
                      "    ",
                      "    // Store evaluation ID",
                      "    pm.collectionVariables.set('evaluationId', jsonData.evaluation_id);",
                      "});"
                    ],
                    "_lastExecutionId": "c5d431f3-b02c-4281-943e-044b870a6aa8"
                  }
                }
              ]
            },
            {
              "id": "dede4546-b5d5-495f-b824-a28c91046702",
              "name": "Export Evaluation as PDF",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations",
                    "{{evaluationId}}",
                    "export",
                    "pdf"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5a131402-103b-47cb-b09d-34af73e0c9bc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is PDF', function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/pdf');",
                      "});"
                    ],
                    "_lastExecutionId": "5ac13351-6c6e-4b77-95af-f8a6814a7326"
                  }
                }
              ]
            },
            {
              "id": "1f0a6d72-1c7f-4899-b923-4a2c6e8b771d",
              "name": "Bulk Export Evaluations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations",
                    "bulk-export"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"evaluation_ids\": [\"{{evaluationId}}\"],\n    \"format\": \"pdf\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ab89637c-14f2-4005-b109-7964eda7ec51",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is ZIP file', function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/zip');",
                      "});"
                    ],
                    "_lastExecutionId": "750c3864-59b7-40f6-99f7-b9bb55a78fd7"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "5e9f78a0-48c9-4295-9b2f-a2f07003f043",
          "length": 18,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "6a0e715a-8966-4a3e-81dd-2e24d49f980f",
          "scriptId": "1ff9de9c-a125-4b3a-b83e-e2cac41c4083",
          "execution": "f9851fe7-7816-48c8-8ee7-1a5995b75a49"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response has valid content type",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:10)",
          "checksum": "9ddc497cf1a9a45b62651e5d542bc75d",
          "id": "e83ff90a-b960-4390-9a8f-f6dd7f65d771",
          "timestamp": 1751098978740,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "dede4546-b5d5-495f-b824-a28c91046702",
          "name": "Export Evaluation as PDF",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluations",
                "{{evaluationId}}",
                "export",
                "pdf"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5a131402-103b-47cb-b09d-34af73e0c9bc",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is PDF', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/pdf');",
                  "});"
                ],
                "_lastExecutionId": "5ac13351-6c6e-4b77-95af-f8a6814a7326"
              }
            }
          ]
        },
        "parent": {
          "id": "41b5405c-a8f0-4c08-a892-8f302290cb53",
          "name": "Evaluations",
          "item": [
            {
              "id": "5e406380-c6b9-4e25-9ad4-ecb41372e91d",
              "name": "Get All Evaluations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dc4815a8-9649-46ed-8792-b21319438a30",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "302e0809-4a1a-4942-8532-c24f976ef94b"
                  }
                }
              ]
            },
            {
              "id": "e5cba38c-9563-4b1c-9c90-1a3dce8cf681",
              "name": "Create Evaluation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"project_id\": \"{{projectId}}\",\n    \"company_id\": \"{{companyId}}\",\n    \"template_id\": \"{{templateId}}\",\n    \"scores\": {\n        \"Quality\": 8,\n        \"Innovation\": 16\n    },\n    \"comments\": \"API test evaluation\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "879bd3c2-c6e9-4c3a-907f-5e65cb3107f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Evaluation created successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('evaluation_id');",
                      "    ",
                      "    // Store evaluation ID",
                      "    pm.collectionVariables.set('evaluationId', jsonData.evaluation_id);",
                      "});"
                    ],
                    "_lastExecutionId": "c5d431f3-b02c-4281-943e-044b870a6aa8"
                  }
                }
              ]
            },
            {
              "id": "dede4546-b5d5-495f-b824-a28c91046702",
              "name": "Export Evaluation as PDF",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations",
                    "{{evaluationId}}",
                    "export",
                    "pdf"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5a131402-103b-47cb-b09d-34af73e0c9bc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is PDF', function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/pdf');",
                      "});"
                    ],
                    "_lastExecutionId": "5ac13351-6c6e-4b77-95af-f8a6814a7326"
                  }
                }
              ]
            },
            {
              "id": "1f0a6d72-1c7f-4899-b923-4a2c6e8b771d",
              "name": "Bulk Export Evaluations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations",
                    "bulk-export"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"evaluation_ids\": [\"{{evaluationId}}\"],\n    \"format\": \"pdf\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ab89637c-14f2-4005-b109-7964eda7ec51",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is ZIP file', function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/zip');",
                      "});"
                    ],
                    "_lastExecutionId": "750c3864-59b7-40f6-99f7-b9bb55a78fd7"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "5e9f78a0-48c9-4295-9b2f-a2f07003f043",
          "length": 18,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "6a0e715a-8966-4a3e-81dd-2e24d49f980f",
          "scriptId": "1ff9de9c-a125-4b3a-b83e-e2cac41c4083",
          "execution": "f9851fe7-7816-48c8-8ee7-1a5995b75a49"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:10)",
          "checksum": "1532f8dadbbfa79e43ec80ab9ad55a24",
          "id": "b1ffd974-9ec5-49d7-83c4-c1b4300283a4",
          "timestamp": 1751098978742,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "dede4546-b5d5-495f-b824-a28c91046702",
          "name": "Export Evaluation as PDF",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluations",
                "{{evaluationId}}",
                "export",
                "pdf"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5a131402-103b-47cb-b09d-34af73e0c9bc",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is PDF', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/pdf');",
                  "});"
                ],
                "_lastExecutionId": "5ac13351-6c6e-4b77-95af-f8a6814a7326"
              }
            }
          ]
        },
        "parent": {
          "id": "41b5405c-a8f0-4c08-a892-8f302290cb53",
          "name": "Evaluations",
          "item": [
            {
              "id": "5e406380-c6b9-4e25-9ad4-ecb41372e91d",
              "name": "Get All Evaluations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dc4815a8-9649-46ed-8792-b21319438a30",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "302e0809-4a1a-4942-8532-c24f976ef94b"
                  }
                }
              ]
            },
            {
              "id": "e5cba38c-9563-4b1c-9c90-1a3dce8cf681",
              "name": "Create Evaluation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"project_id\": \"{{projectId}}\",\n    \"company_id\": \"{{companyId}}\",\n    \"template_id\": \"{{templateId}}\",\n    \"scores\": {\n        \"Quality\": 8,\n        \"Innovation\": 16\n    },\n    \"comments\": \"API test evaluation\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "879bd3c2-c6e9-4c3a-907f-5e65cb3107f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Evaluation created successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('evaluation_id');",
                      "    ",
                      "    // Store evaluation ID",
                      "    pm.collectionVariables.set('evaluationId', jsonData.evaluation_id);",
                      "});"
                    ],
                    "_lastExecutionId": "c5d431f3-b02c-4281-943e-044b870a6aa8"
                  }
                }
              ]
            },
            {
              "id": "dede4546-b5d5-495f-b824-a28c91046702",
              "name": "Export Evaluation as PDF",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations",
                    "{{evaluationId}}",
                    "export",
                    "pdf"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5a131402-103b-47cb-b09d-34af73e0c9bc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is PDF', function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/pdf');",
                      "});"
                    ],
                    "_lastExecutionId": "5ac13351-6c6e-4b77-95af-f8a6814a7326"
                  }
                }
              ]
            },
            {
              "id": "1f0a6d72-1c7f-4899-b923-4a2c6e8b771d",
              "name": "Bulk Export Evaluations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations",
                    "bulk-export"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"evaluation_ids\": [\"{{evaluationId}}\"],\n    \"format\": \"pdf\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ab89637c-14f2-4005-b109-7964eda7ec51",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is ZIP file', function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/zip');",
                      "});"
                    ],
                    "_lastExecutionId": "750c3864-59b7-40f6-99f7-b9bb55a78fd7"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "5e9f78a0-48c9-4295-9b2f-a2f07003f043",
          "length": 18,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "6a0e715a-8966-4a3e-81dd-2e24d49f980f",
          "scriptId": "5a131402-103b-47cb-b09d-34af73e0c9bc",
          "execution": "5ac13351-6c6e-4b77-95af-f8a6814a7326"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response is PDF",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:10)",
          "checksum": "fa55f28d45a2cf2be0c5716c5e0c7060",
          "id": "79059d27-94ef-43f2-af51-1813a9e7e381",
          "timestamp": 1751098978742,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "dede4546-b5d5-495f-b824-a28c91046702",
          "name": "Export Evaluation as PDF",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluations",
                "{{evaluationId}}",
                "export",
                "pdf"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5a131402-103b-47cb-b09d-34af73e0c9bc",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is PDF', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/pdf');",
                  "});"
                ],
                "_lastExecutionId": "5ac13351-6c6e-4b77-95af-f8a6814a7326"
              }
            }
          ]
        },
        "parent": {
          "id": "41b5405c-a8f0-4c08-a892-8f302290cb53",
          "name": "Evaluations",
          "item": [
            {
              "id": "5e406380-c6b9-4e25-9ad4-ecb41372e91d",
              "name": "Get All Evaluations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dc4815a8-9649-46ed-8792-b21319438a30",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "302e0809-4a1a-4942-8532-c24f976ef94b"
                  }
                }
              ]
            },
            {
              "id": "e5cba38c-9563-4b1c-9c90-1a3dce8cf681",
              "name": "Create Evaluation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"project_id\": \"{{projectId}}\",\n    \"company_id\": \"{{companyId}}\",\n    \"template_id\": \"{{templateId}}\",\n    \"scores\": {\n        \"Quality\": 8,\n        \"Innovation\": 16\n    },\n    \"comments\": \"API test evaluation\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "879bd3c2-c6e9-4c3a-907f-5e65cb3107f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Evaluation created successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('evaluation_id');",
                      "    ",
                      "    // Store evaluation ID",
                      "    pm.collectionVariables.set('evaluationId', jsonData.evaluation_id);",
                      "});"
                    ],
                    "_lastExecutionId": "c5d431f3-b02c-4281-943e-044b870a6aa8"
                  }
                }
              ]
            },
            {
              "id": "dede4546-b5d5-495f-b824-a28c91046702",
              "name": "Export Evaluation as PDF",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations",
                    "{{evaluationId}}",
                    "export",
                    "pdf"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5a131402-103b-47cb-b09d-34af73e0c9bc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is PDF', function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/pdf');",
                      "});"
                    ],
                    "_lastExecutionId": "5ac13351-6c6e-4b77-95af-f8a6814a7326"
                  }
                }
              ]
            },
            {
              "id": "1f0a6d72-1c7f-4899-b923-4a2c6e8b771d",
              "name": "Bulk Export Evaluations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations",
                    "bulk-export"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"evaluation_ids\": [\"{{evaluationId}}\"],\n    \"format\": \"pdf\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ab89637c-14f2-4005-b109-7964eda7ec51",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is ZIP file', function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/zip');",
                      "});"
                    ],
                    "_lastExecutionId": "750c3864-59b7-40f6-99f7-b9bb55a78fd7"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "5e9f78a0-48c9-4295-9b2f-a2f07003f043",
          "length": 18,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "6a0e715a-8966-4a3e-81dd-2e24d49f980f",
          "scriptId": "5a131402-103b-47cb-b09d-34af73e0c9bc",
          "execution": "5ac13351-6c6e-4b77-95af-f8a6814a7326"
        }
      },
      {
        "error": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1555:16)",
          "checksum": "2462284d2be5f4dcd7e8994dbbc6be87",
          "id": "17daf83f-6a7d-49cb-b109-c400824bdfb9",
          "timestamp": 1751098978752,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1555,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "1f0a6d72-1c7f-4899-b923-4a2c6e8b771d",
          "name": "Bulk Export Evaluations",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "evaluations",
                "bulk-export"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Test-Environment",
                "value": "true"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "1d54489b-5ac5-4044-9086-4e8dd2dd31cb",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"evaluation_ids\": [\"{{evaluationId}}\"],\n    \"format\": \"pdf\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ab89637c-14f2-4005-b109-7964eda7ec51",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is ZIP file', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/zip');",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "d4eadcab-025f-4758-85a0-afc80236c9cf",
          "length": 18,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "19ca536f-6409-4e48-a90b-17a57bf7fb5f"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response time is less than 1000ms",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:1:11)",
          "checksum": "1758109170c325a80ff085476778d32c",
          "id": "30db9d0e-9a79-4451-9082-083a9b535109",
          "timestamp": 1751098978755,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "1f0a6d72-1c7f-4899-b923-4a2c6e8b771d",
          "name": "Bulk Export Evaluations",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluations",
                "bulk-export"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"evaluation_ids\": [\"{{evaluationId}}\"],\n    \"format\": \"pdf\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ab89637c-14f2-4005-b109-7964eda7ec51",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is ZIP file', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/zip');",
                  "});"
                ],
                "_lastExecutionId": "750c3864-59b7-40f6-99f7-b9bb55a78fd7"
              }
            }
          ]
        },
        "parent": {
          "id": "41b5405c-a8f0-4c08-a892-8f302290cb53",
          "name": "Evaluations",
          "item": [
            {
              "id": "5e406380-c6b9-4e25-9ad4-ecb41372e91d",
              "name": "Get All Evaluations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dc4815a8-9649-46ed-8792-b21319438a30",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "302e0809-4a1a-4942-8532-c24f976ef94b"
                  }
                }
              ]
            },
            {
              "id": "e5cba38c-9563-4b1c-9c90-1a3dce8cf681",
              "name": "Create Evaluation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"project_id\": \"{{projectId}}\",\n    \"company_id\": \"{{companyId}}\",\n    \"template_id\": \"{{templateId}}\",\n    \"scores\": {\n        \"Quality\": 8,\n        \"Innovation\": 16\n    },\n    \"comments\": \"API test evaluation\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "879bd3c2-c6e9-4c3a-907f-5e65cb3107f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Evaluation created successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('evaluation_id');",
                      "    ",
                      "    // Store evaluation ID",
                      "    pm.collectionVariables.set('evaluationId', jsonData.evaluation_id);",
                      "});"
                    ],
                    "_lastExecutionId": "c5d431f3-b02c-4281-943e-044b870a6aa8"
                  }
                }
              ]
            },
            {
              "id": "dede4546-b5d5-495f-b824-a28c91046702",
              "name": "Export Evaluation as PDF",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations",
                    "{{evaluationId}}",
                    "export",
                    "pdf"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5a131402-103b-47cb-b09d-34af73e0c9bc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is PDF', function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/pdf');",
                      "});"
                    ],
                    "_lastExecutionId": "5ac13351-6c6e-4b77-95af-f8a6814a7326"
                  }
                }
              ]
            },
            {
              "id": "1f0a6d72-1c7f-4899-b923-4a2c6e8b771d",
              "name": "Bulk Export Evaluations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations",
                    "bulk-export"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"evaluation_ids\": [\"{{evaluationId}}\"],\n    \"format\": \"pdf\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ab89637c-14f2-4005-b109-7964eda7ec51",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is ZIP file', function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/zip');",
                      "});"
                    ],
                    "_lastExecutionId": "750c3864-59b7-40f6-99f7-b9bb55a78fd7"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d4eadcab-025f-4758-85a0-afc80236c9cf",
          "length": 18,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "19ca536f-6409-4e48-a90b-17a57bf7fb5f",
          "scriptId": "1ff9de9c-a125-4b3a-b83e-e2cac41c4083",
          "execution": "460d5b4b-207f-48ca-b8c8-ee9c9fecdf0d"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response has valid content type",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:11)",
          "checksum": "a1957f5dff0f13bce64d8527c8d0a0e2",
          "id": "ad16e129-d39f-485e-ad6b-72d2dce43555",
          "timestamp": 1751098978755,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "1f0a6d72-1c7f-4899-b923-4a2c6e8b771d",
          "name": "Bulk Export Evaluations",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluations",
                "bulk-export"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"evaluation_ids\": [\"{{evaluationId}}\"],\n    \"format\": \"pdf\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ab89637c-14f2-4005-b109-7964eda7ec51",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is ZIP file', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/zip');",
                  "});"
                ],
                "_lastExecutionId": "750c3864-59b7-40f6-99f7-b9bb55a78fd7"
              }
            }
          ]
        },
        "parent": {
          "id": "41b5405c-a8f0-4c08-a892-8f302290cb53",
          "name": "Evaluations",
          "item": [
            {
              "id": "5e406380-c6b9-4e25-9ad4-ecb41372e91d",
              "name": "Get All Evaluations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dc4815a8-9649-46ed-8792-b21319438a30",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "302e0809-4a1a-4942-8532-c24f976ef94b"
                  }
                }
              ]
            },
            {
              "id": "e5cba38c-9563-4b1c-9c90-1a3dce8cf681",
              "name": "Create Evaluation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"project_id\": \"{{projectId}}\",\n    \"company_id\": \"{{companyId}}\",\n    \"template_id\": \"{{templateId}}\",\n    \"scores\": {\n        \"Quality\": 8,\n        \"Innovation\": 16\n    },\n    \"comments\": \"API test evaluation\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "879bd3c2-c6e9-4c3a-907f-5e65cb3107f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Evaluation created successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('evaluation_id');",
                      "    ",
                      "    // Store evaluation ID",
                      "    pm.collectionVariables.set('evaluationId', jsonData.evaluation_id);",
                      "});"
                    ],
                    "_lastExecutionId": "c5d431f3-b02c-4281-943e-044b870a6aa8"
                  }
                }
              ]
            },
            {
              "id": "dede4546-b5d5-495f-b824-a28c91046702",
              "name": "Export Evaluation as PDF",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations",
                    "{{evaluationId}}",
                    "export",
                    "pdf"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5a131402-103b-47cb-b09d-34af73e0c9bc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is PDF', function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/pdf');",
                      "});"
                    ],
                    "_lastExecutionId": "5ac13351-6c6e-4b77-95af-f8a6814a7326"
                  }
                }
              ]
            },
            {
              "id": "1f0a6d72-1c7f-4899-b923-4a2c6e8b771d",
              "name": "Bulk Export Evaluations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations",
                    "bulk-export"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"evaluation_ids\": [\"{{evaluationId}}\"],\n    \"format\": \"pdf\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ab89637c-14f2-4005-b109-7964eda7ec51",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is ZIP file', function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/zip');",
                      "});"
                    ],
                    "_lastExecutionId": "750c3864-59b7-40f6-99f7-b9bb55a78fd7"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d4eadcab-025f-4758-85a0-afc80236c9cf",
          "length": 18,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "19ca536f-6409-4e48-a90b-17a57bf7fb5f",
          "scriptId": "1ff9de9c-a125-4b3a-b83e-e2cac41c4083",
          "execution": "460d5b4b-207f-48ca-b8c8-ee9c9fecdf0d"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:11)",
          "checksum": "d49b4a32b37d5fba2891d4e14bf27e81",
          "id": "75c515f1-2fb0-46d5-9e47-5f7c164acb94",
          "timestamp": 1751098978758,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "1f0a6d72-1c7f-4899-b923-4a2c6e8b771d",
          "name": "Bulk Export Evaluations",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluations",
                "bulk-export"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"evaluation_ids\": [\"{{evaluationId}}\"],\n    \"format\": \"pdf\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ab89637c-14f2-4005-b109-7964eda7ec51",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is ZIP file', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/zip');",
                  "});"
                ],
                "_lastExecutionId": "750c3864-59b7-40f6-99f7-b9bb55a78fd7"
              }
            }
          ]
        },
        "parent": {
          "id": "41b5405c-a8f0-4c08-a892-8f302290cb53",
          "name": "Evaluations",
          "item": [
            {
              "id": "5e406380-c6b9-4e25-9ad4-ecb41372e91d",
              "name": "Get All Evaluations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dc4815a8-9649-46ed-8792-b21319438a30",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "302e0809-4a1a-4942-8532-c24f976ef94b"
                  }
                }
              ]
            },
            {
              "id": "e5cba38c-9563-4b1c-9c90-1a3dce8cf681",
              "name": "Create Evaluation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"project_id\": \"{{projectId}}\",\n    \"company_id\": \"{{companyId}}\",\n    \"template_id\": \"{{templateId}}\",\n    \"scores\": {\n        \"Quality\": 8,\n        \"Innovation\": 16\n    },\n    \"comments\": \"API test evaluation\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "879bd3c2-c6e9-4c3a-907f-5e65cb3107f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Evaluation created successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('evaluation_id');",
                      "    ",
                      "    // Store evaluation ID",
                      "    pm.collectionVariables.set('evaluationId', jsonData.evaluation_id);",
                      "});"
                    ],
                    "_lastExecutionId": "c5d431f3-b02c-4281-943e-044b870a6aa8"
                  }
                }
              ]
            },
            {
              "id": "dede4546-b5d5-495f-b824-a28c91046702",
              "name": "Export Evaluation as PDF",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations",
                    "{{evaluationId}}",
                    "export",
                    "pdf"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5a131402-103b-47cb-b09d-34af73e0c9bc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is PDF', function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/pdf');",
                      "});"
                    ],
                    "_lastExecutionId": "5ac13351-6c6e-4b77-95af-f8a6814a7326"
                  }
                }
              ]
            },
            {
              "id": "1f0a6d72-1c7f-4899-b923-4a2c6e8b771d",
              "name": "Bulk Export Evaluations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations",
                    "bulk-export"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"evaluation_ids\": [\"{{evaluationId}}\"],\n    \"format\": \"pdf\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ab89637c-14f2-4005-b109-7964eda7ec51",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is ZIP file', function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/zip');",
                      "});"
                    ],
                    "_lastExecutionId": "750c3864-59b7-40f6-99f7-b9bb55a78fd7"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d4eadcab-025f-4758-85a0-afc80236c9cf",
          "length": 18,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "19ca536f-6409-4e48-a90b-17a57bf7fb5f",
          "scriptId": "ab89637c-14f2-4005-b109-7964eda7ec51",
          "execution": "750c3864-59b7-40f6-99f7-b9bb55a78fd7"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response is ZIP file",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:11)",
          "checksum": "4c41fc5e68a5d4182e4c7159a06d90b0",
          "id": "f9118786-0611-4674-b8ee-d453ec9fac93",
          "timestamp": 1751098978758,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "1f0a6d72-1c7f-4899-b923-4a2c6e8b771d",
          "name": "Bulk Export Evaluations",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluations",
                "bulk-export"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"evaluation_ids\": [\"{{evaluationId}}\"],\n    \"format\": \"pdf\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ab89637c-14f2-4005-b109-7964eda7ec51",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is ZIP file', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/zip');",
                  "});"
                ],
                "_lastExecutionId": "750c3864-59b7-40f6-99f7-b9bb55a78fd7"
              }
            }
          ]
        },
        "parent": {
          "id": "41b5405c-a8f0-4c08-a892-8f302290cb53",
          "name": "Evaluations",
          "item": [
            {
              "id": "5e406380-c6b9-4e25-9ad4-ecb41372e91d",
              "name": "Get All Evaluations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dc4815a8-9649-46ed-8792-b21319438a30",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "302e0809-4a1a-4942-8532-c24f976ef94b"
                  }
                }
              ]
            },
            {
              "id": "e5cba38c-9563-4b1c-9c90-1a3dce8cf681",
              "name": "Create Evaluation",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"project_id\": \"{{projectId}}\",\n    \"company_id\": \"{{companyId}}\",\n    \"template_id\": \"{{templateId}}\",\n    \"scores\": {\n        \"Quality\": 8,\n        \"Innovation\": 16\n    },\n    \"comments\": \"API test evaluation\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "879bd3c2-c6e9-4c3a-907f-5e65cb3107f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Evaluation created successfully', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('evaluation_id');",
                      "    ",
                      "    // Store evaluation ID",
                      "    pm.collectionVariables.set('evaluationId', jsonData.evaluation_id);",
                      "});"
                    ],
                    "_lastExecutionId": "c5d431f3-b02c-4281-943e-044b870a6aa8"
                  }
                }
              ]
            },
            {
              "id": "dede4546-b5d5-495f-b824-a28c91046702",
              "name": "Export Evaluation as PDF",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations",
                    "{{evaluationId}}",
                    "export",
                    "pdf"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5a131402-103b-47cb-b09d-34af73e0c9bc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is PDF', function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/pdf');",
                      "});"
                    ],
                    "_lastExecutionId": "5ac13351-6c6e-4b77-95af-f8a6814a7326"
                  }
                }
              ]
            },
            {
              "id": "1f0a6d72-1c7f-4899-b923-4a2c6e8b771d",
              "name": "Bulk Export Evaluations",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations",
                    "bulk-export"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"evaluation_ids\": [\"{{evaluationId}}\"],\n    \"format\": \"pdf\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ab89637c-14f2-4005-b109-7964eda7ec51",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is ZIP file', function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/zip');",
                      "});"
                    ],
                    "_lastExecutionId": "750c3864-59b7-40f6-99f7-b9bb55a78fd7"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d4eadcab-025f-4758-85a0-afc80236c9cf",
          "length": 18,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "19ca536f-6409-4e48-a90b-17a57bf7fb5f",
          "scriptId": "ab89637c-14f2-4005-b109-7964eda7ec51",
          "execution": "750c3864-59b7-40f6-99f7-b9bb55a78fd7"
        }
      },
      {
        "error": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1555:16)",
          "checksum": "2462284d2be5f4dcd7e8994dbbc6be87",
          "id": "838ffe50-4dd5-4e00-bf1d-9ea438f554bc",
          "timestamp": 1751098978767,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1555,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "7b841149-36ea-489e-b8b2-f5d915a479d2",
          "name": "Get AI Models",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "ai",
                "models"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Test-Environment",
                "value": "true"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "700b7728-7df4-4ae4-85e0-98df7c27be52",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0f056291-b663-4728-9732-a3b48e00b826",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has AI models', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "c2b6fe46-d0f9-483d-bca3-a6ac86c34d73",
          "length": 18,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "ec14c771-05a5-4ab2-8775-a21d2452b80a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response time is less than 1000ms",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:1:12)",
          "checksum": "b94fcc4cd1cafc66ed296ecfeebbad97",
          "id": "595513e5-4b85-4e9d-9a58-661bcbad0b15",
          "timestamp": 1751098978770,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "7b841149-36ea-489e-b8b2-f5d915a479d2",
          "name": "Get AI Models",
          "request": {
            "url": {
              "path": [
                "api",
                "ai",
                "models"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0f056291-b663-4728-9732-a3b48e00b826",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has AI models', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                  "});"
                ],
                "_lastExecutionId": "d6617831-4608-4705-8e06-d6b877b13f12"
              }
            }
          ]
        },
        "parent": {
          "id": "754c4987-09e2-4831-8fc8-a9d434c935c0",
          "name": "AI Model Management",
          "item": [
            {
              "id": "7b841149-36ea-489e-b8b2-f5d915a479d2",
              "name": "Get AI Models",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "ai",
                    "models"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0f056291-b663-4728-9732-a3b48e00b826",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has AI models', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "d6617831-4608-4705-8e06-d6b877b13f12"
                  }
                }
              ]
            },
            {
              "id": "015d8906-71a0-47ed-b81b-45769c801665",
              "name": "Test AI Provider",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "ai",
                    "test-provider"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"provider\": \"openai\",\n    \"api_key\": \"test-key\",\n    \"model\": \"gpt-3.5-turbo\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1f18c1a7-097c-43c5-896a-aaa8506f631c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('AI provider test successful', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('success');",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "7749775f-1b3f-49b0-834c-c0025cc3a586"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c2b6fe46-d0f9-483d-bca3-a6ac86c34d73",
          "length": 18,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "ec14c771-05a5-4ab2-8775-a21d2452b80a",
          "scriptId": "1ff9de9c-a125-4b3a-b83e-e2cac41c4083",
          "execution": "d758ff39-67ec-4966-812e-b3132aabf7b2"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response has valid content type",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:12)",
          "checksum": "3ec4a9dfaa1a0d047365707c56d51bac",
          "id": "df2bb8d7-ccc0-43c4-a504-f72ce31c2792",
          "timestamp": 1751098978770,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "7b841149-36ea-489e-b8b2-f5d915a479d2",
          "name": "Get AI Models",
          "request": {
            "url": {
              "path": [
                "api",
                "ai",
                "models"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0f056291-b663-4728-9732-a3b48e00b826",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has AI models', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                  "});"
                ],
                "_lastExecutionId": "d6617831-4608-4705-8e06-d6b877b13f12"
              }
            }
          ]
        },
        "parent": {
          "id": "754c4987-09e2-4831-8fc8-a9d434c935c0",
          "name": "AI Model Management",
          "item": [
            {
              "id": "7b841149-36ea-489e-b8b2-f5d915a479d2",
              "name": "Get AI Models",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "ai",
                    "models"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0f056291-b663-4728-9732-a3b48e00b826",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has AI models', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "d6617831-4608-4705-8e06-d6b877b13f12"
                  }
                }
              ]
            },
            {
              "id": "015d8906-71a0-47ed-b81b-45769c801665",
              "name": "Test AI Provider",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "ai",
                    "test-provider"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"provider\": \"openai\",\n    \"api_key\": \"test-key\",\n    \"model\": \"gpt-3.5-turbo\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1f18c1a7-097c-43c5-896a-aaa8506f631c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('AI provider test successful', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('success');",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "7749775f-1b3f-49b0-834c-c0025cc3a586"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c2b6fe46-d0f9-483d-bca3-a6ac86c34d73",
          "length": 18,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "ec14c771-05a5-4ab2-8775-a21d2452b80a",
          "scriptId": "1ff9de9c-a125-4b3a-b83e-e2cac41c4083",
          "execution": "d758ff39-67ec-4966-812e-b3132aabf7b2"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:12)",
          "checksum": "26ca9436e2cebb585c4ad1852ea9c399",
          "id": "2f411e48-b182-44df-ba87-94e1618d7adc",
          "timestamp": 1751098978772,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "7b841149-36ea-489e-b8b2-f5d915a479d2",
          "name": "Get AI Models",
          "request": {
            "url": {
              "path": [
                "api",
                "ai",
                "models"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0f056291-b663-4728-9732-a3b48e00b826",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has AI models', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                  "});"
                ],
                "_lastExecutionId": "d6617831-4608-4705-8e06-d6b877b13f12"
              }
            }
          ]
        },
        "parent": {
          "id": "754c4987-09e2-4831-8fc8-a9d434c935c0",
          "name": "AI Model Management",
          "item": [
            {
              "id": "7b841149-36ea-489e-b8b2-f5d915a479d2",
              "name": "Get AI Models",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "ai",
                    "models"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0f056291-b663-4728-9732-a3b48e00b826",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has AI models', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "d6617831-4608-4705-8e06-d6b877b13f12"
                  }
                }
              ]
            },
            {
              "id": "015d8906-71a0-47ed-b81b-45769c801665",
              "name": "Test AI Provider",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "ai",
                    "test-provider"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"provider\": \"openai\",\n    \"api_key\": \"test-key\",\n    \"model\": \"gpt-3.5-turbo\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1f18c1a7-097c-43c5-896a-aaa8506f631c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('AI provider test successful', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('success');",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "7749775f-1b3f-49b0-834c-c0025cc3a586"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c2b6fe46-d0f9-483d-bca3-a6ac86c34d73",
          "length": 18,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "ec14c771-05a5-4ab2-8775-a21d2452b80a",
          "scriptId": "0f056291-b663-4728-9732-a3b48e00b826",
          "execution": "d6617831-4608-4705-8e06-d6b877b13f12"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response has AI models",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:12)",
          "checksum": "81424937cc1a7e98f9b245d4c402e398",
          "id": "1bcfcc89-1560-4ece-9642-936dc77b9fe1",
          "timestamp": 1751098978772,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "7b841149-36ea-489e-b8b2-f5d915a479d2",
          "name": "Get AI Models",
          "request": {
            "url": {
              "path": [
                "api",
                "ai",
                "models"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0f056291-b663-4728-9732-a3b48e00b826",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has AI models', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                  "});"
                ],
                "_lastExecutionId": "d6617831-4608-4705-8e06-d6b877b13f12"
              }
            }
          ]
        },
        "parent": {
          "id": "754c4987-09e2-4831-8fc8-a9d434c935c0",
          "name": "AI Model Management",
          "item": [
            {
              "id": "7b841149-36ea-489e-b8b2-f5d915a479d2",
              "name": "Get AI Models",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "ai",
                    "models"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0f056291-b663-4728-9732-a3b48e00b826",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has AI models', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "d6617831-4608-4705-8e06-d6b877b13f12"
                  }
                }
              ]
            },
            {
              "id": "015d8906-71a0-47ed-b81b-45769c801665",
              "name": "Test AI Provider",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "ai",
                    "test-provider"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"provider\": \"openai\",\n    \"api_key\": \"test-key\",\n    \"model\": \"gpt-3.5-turbo\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1f18c1a7-097c-43c5-896a-aaa8506f631c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('AI provider test successful', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('success');",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "7749775f-1b3f-49b0-834c-c0025cc3a586"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c2b6fe46-d0f9-483d-bca3-a6ac86c34d73",
          "length": 18,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "ec14c771-05a5-4ab2-8775-a21d2452b80a",
          "scriptId": "0f056291-b663-4728-9732-a3b48e00b826",
          "execution": "d6617831-4608-4705-8e06-d6b877b13f12"
        }
      },
      {
        "error": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1555:16)",
          "checksum": "2462284d2be5f4dcd7e8994dbbc6be87",
          "id": "c0dc193c-94c2-4f37-aac4-c76353e041bf",
          "timestamp": 1751098978782,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1555,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "015d8906-71a0-47ed-b81b-45769c801665",
          "name": "Test AI Provider",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "ai",
                "test-provider"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Test-Environment",
                "value": "true"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "5e82c46d-289e-4fbd-b8fc-6ad95b94df20",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"provider\": \"openai\",\n    \"api_key\": \"test-key\",\n    \"model\": \"gpt-3.5-turbo\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1f18c1a7-097c-43c5-896a-aaa8506f631c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('AI provider test successful', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "17183b67-dd51-441d-a228-ab8feb6f31e9",
          "length": 18,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "24019dcd-1f6f-4ccb-a42a-fc83404f1347"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response time is less than 1000ms",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:1:13)",
          "checksum": "54fa9c4261adb01d1fdbfbb09bbc40ec",
          "id": "1882427c-4846-40b6-81f4-0aa7f4c98fa9",
          "timestamp": 1751098978784,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 13,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "015d8906-71a0-47ed-b81b-45769c801665",
          "name": "Test AI Provider",
          "request": {
            "url": {
              "path": [
                "api",
                "ai",
                "test-provider"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"provider\": \"openai\",\n    \"api_key\": \"test-key\",\n    \"model\": \"gpt-3.5-turbo\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1f18c1a7-097c-43c5-896a-aaa8506f631c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('AI provider test successful', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});"
                ],
                "_lastExecutionId": "7749775f-1b3f-49b0-834c-c0025cc3a586"
              }
            }
          ]
        },
        "parent": {
          "id": "754c4987-09e2-4831-8fc8-a9d434c935c0",
          "name": "AI Model Management",
          "item": [
            {
              "id": "7b841149-36ea-489e-b8b2-f5d915a479d2",
              "name": "Get AI Models",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "ai",
                    "models"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0f056291-b663-4728-9732-a3b48e00b826",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has AI models', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "d6617831-4608-4705-8e06-d6b877b13f12"
                  }
                }
              ]
            },
            {
              "id": "015d8906-71a0-47ed-b81b-45769c801665",
              "name": "Test AI Provider",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "ai",
                    "test-provider"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"provider\": \"openai\",\n    \"api_key\": \"test-key\",\n    \"model\": \"gpt-3.5-turbo\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1f18c1a7-097c-43c5-896a-aaa8506f631c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('AI provider test successful', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('success');",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "7749775f-1b3f-49b0-834c-c0025cc3a586"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "17183b67-dd51-441d-a228-ab8feb6f31e9",
          "length": 18,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "24019dcd-1f6f-4ccb-a42a-fc83404f1347",
          "scriptId": "1ff9de9c-a125-4b3a-b83e-e2cac41c4083",
          "execution": "59116b6c-be8b-4267-b52a-55a4e79091e9"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response has valid content type",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:13)",
          "checksum": "e5598bc64cec5a7716ed4495fe7d2a54",
          "id": "be377a60-85c7-42e8-8bc3-91db0eb34cd0",
          "timestamp": 1751098978785,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 13,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "015d8906-71a0-47ed-b81b-45769c801665",
          "name": "Test AI Provider",
          "request": {
            "url": {
              "path": [
                "api",
                "ai",
                "test-provider"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"provider\": \"openai\",\n    \"api_key\": \"test-key\",\n    \"model\": \"gpt-3.5-turbo\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1f18c1a7-097c-43c5-896a-aaa8506f631c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('AI provider test successful', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});"
                ],
                "_lastExecutionId": "7749775f-1b3f-49b0-834c-c0025cc3a586"
              }
            }
          ]
        },
        "parent": {
          "id": "754c4987-09e2-4831-8fc8-a9d434c935c0",
          "name": "AI Model Management",
          "item": [
            {
              "id": "7b841149-36ea-489e-b8b2-f5d915a479d2",
              "name": "Get AI Models",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "ai",
                    "models"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0f056291-b663-4728-9732-a3b48e00b826",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has AI models', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "d6617831-4608-4705-8e06-d6b877b13f12"
                  }
                }
              ]
            },
            {
              "id": "015d8906-71a0-47ed-b81b-45769c801665",
              "name": "Test AI Provider",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "ai",
                    "test-provider"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"provider\": \"openai\",\n    \"api_key\": \"test-key\",\n    \"model\": \"gpt-3.5-turbo\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1f18c1a7-097c-43c5-896a-aaa8506f631c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('AI provider test successful', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('success');",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "7749775f-1b3f-49b0-834c-c0025cc3a586"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "17183b67-dd51-441d-a228-ab8feb6f31e9",
          "length": 18,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "24019dcd-1f6f-4ccb-a42a-fc83404f1347",
          "scriptId": "1ff9de9c-a125-4b3a-b83e-e2cac41c4083",
          "execution": "59116b6c-be8b-4267-b52a-55a4e79091e9"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:13)",
          "checksum": "e0055d7ace1bf50d8afc3b6401279aca",
          "id": "e5950ae1-c280-47dc-a7d9-875f2fb1455e",
          "timestamp": 1751098978787,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 13,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "015d8906-71a0-47ed-b81b-45769c801665",
          "name": "Test AI Provider",
          "request": {
            "url": {
              "path": [
                "api",
                "ai",
                "test-provider"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"provider\": \"openai\",\n    \"api_key\": \"test-key\",\n    \"model\": \"gpt-3.5-turbo\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1f18c1a7-097c-43c5-896a-aaa8506f631c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('AI provider test successful', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});"
                ],
                "_lastExecutionId": "7749775f-1b3f-49b0-834c-c0025cc3a586"
              }
            }
          ]
        },
        "parent": {
          "id": "754c4987-09e2-4831-8fc8-a9d434c935c0",
          "name": "AI Model Management",
          "item": [
            {
              "id": "7b841149-36ea-489e-b8b2-f5d915a479d2",
              "name": "Get AI Models",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "ai",
                    "models"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0f056291-b663-4728-9732-a3b48e00b826",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has AI models', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "d6617831-4608-4705-8e06-d6b877b13f12"
                  }
                }
              ]
            },
            {
              "id": "015d8906-71a0-47ed-b81b-45769c801665",
              "name": "Test AI Provider",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "ai",
                    "test-provider"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"provider\": \"openai\",\n    \"api_key\": \"test-key\",\n    \"model\": \"gpt-3.5-turbo\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1f18c1a7-097c-43c5-896a-aaa8506f631c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('AI provider test successful', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('success');",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "7749775f-1b3f-49b0-834c-c0025cc3a586"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "17183b67-dd51-441d-a228-ab8feb6f31e9",
          "length": 18,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "24019dcd-1f6f-4ccb-a42a-fc83404f1347",
          "scriptId": "1f18c1a7-097c-43c5-896a-aaa8506f631c",
          "execution": "7749775f-1b3f-49b0-834c-c0025cc3a586"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "AI provider test successful",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:13)",
          "checksum": "b8d6adca4c34dc0307d9eb829794f00c",
          "id": "105d1fcd-91c7-4d72-b2b2-d3142257f244",
          "timestamp": 1751098978787,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 13,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "015d8906-71a0-47ed-b81b-45769c801665",
          "name": "Test AI Provider",
          "request": {
            "url": {
              "path": [
                "api",
                "ai",
                "test-provider"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"provider\": \"openai\",\n    \"api_key\": \"test-key\",\n    \"model\": \"gpt-3.5-turbo\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1f18c1a7-097c-43c5-896a-aaa8506f631c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('AI provider test successful', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});"
                ],
                "_lastExecutionId": "7749775f-1b3f-49b0-834c-c0025cc3a586"
              }
            }
          ]
        },
        "parent": {
          "id": "754c4987-09e2-4831-8fc8-a9d434c935c0",
          "name": "AI Model Management",
          "item": [
            {
              "id": "7b841149-36ea-489e-b8b2-f5d915a479d2",
              "name": "Get AI Models",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "ai",
                    "models"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0f056291-b663-4728-9732-a3b48e00b826",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has AI models', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                      "});"
                    ],
                    "_lastExecutionId": "d6617831-4608-4705-8e06-d6b877b13f12"
                  }
                }
              ]
            },
            {
              "id": "015d8906-71a0-47ed-b81b-45769c801665",
              "name": "Test AI Provider",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "ai",
                    "test-provider"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"provider\": \"openai\",\n    \"api_key\": \"test-key\",\n    \"model\": \"gpt-3.5-turbo\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1f18c1a7-097c-43c5-896a-aaa8506f631c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('AI provider test successful', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('success');",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "});"
                    ],
                    "_lastExecutionId": "7749775f-1b3f-49b0-834c-c0025cc3a586"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "17183b67-dd51-441d-a228-ab8feb6f31e9",
          "length": 18,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "24019dcd-1f6f-4ccb-a42a-fc83404f1347",
          "scriptId": "1f18c1a7-097c-43c5-896a-aaa8506f631c",
          "execution": "7749775f-1b3f-49b0-834c-c0025cc3a586"
        }
      },
      {
        "error": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1555:16)",
          "checksum": "2462284d2be5f4dcd7e8994dbbc6be87",
          "id": "508e01cb-620b-4081-a8e3-b99f3b34c708",
          "timestamp": 1751098978796,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1555,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "989aae43-980f-4781-90e6-94ff6ddca76e",
          "name": "Concurrent Login Requests",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Test-Environment",
                "value": "true"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "babab19c-e27e-4997-bb06-170eb14528fa",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"login_id\": \"admin\",\n    \"password\": \"admin123!@#\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2d02797f-1218-4919-b75b-78cb1dca035f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Handles concurrent requests', function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "a373dc34-a5cb-45a4-ade0-81542ddeaa57",
          "length": 18,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "81e43b49-6af0-4feb-9c6e-6c6a722de8f9"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response time is less than 1000ms",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:1:14)",
          "checksum": "634c97c93ced6ac6a8eb2a5268f1a61c",
          "id": "e370a715-6da4-4719-af3b-9b7239d07414",
          "timestamp": 1751098978798,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "989aae43-980f-4781-90e6-94ff6ddca76e",
          "name": "Concurrent Login Requests",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"login_id\": \"admin\",\n    \"password\": \"admin123!@#\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2d02797f-1218-4919-b75b-78cb1dca035f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Handles concurrent requests', function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "_lastExecutionId": "c3898395-4fbc-464f-9d01-53061e48ebc5"
              }
            }
          ]
        },
        "parent": {
          "id": "92adf09d-14c9-4a85-8d7e-87770f13f3e3",
          "name": "Performance Tests",
          "item": [
            {
              "id": "989aae43-980f-4781-90e6-94ff6ddca76e",
              "name": "Concurrent Login Requests",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"login_id\": \"admin\",\n    \"password\": \"admin123!@#\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2d02797f-1218-4919-b75b-78cb1dca035f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Handles concurrent requests', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});"
                    ],
                    "_lastExecutionId": "c3898395-4fbc-464f-9d01-53061e48ebc5"
                  }
                }
              ]
            },
            {
              "id": "3b689212-685d-4814-80e7-5990493fd986",
              "name": "Large Data Request",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "1000"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b08c3c45-f55c-40ec-acec-6e5a20b7f636",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Handles large data efficiently', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "",
                      "pm.test('Response size is reasonable', function () {",
                      "    const size = pm.response.size();",
                      "    pm.expect(size).to.be.below(10485760); // 10MB",
                      "});"
                    ],
                    "_lastExecutionId": "8e7164dc-abb1-42f4-a160-dc61d4ab0686"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "a373dc34-a5cb-45a4-ade0-81542ddeaa57",
          "length": 18,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "81e43b49-6af0-4feb-9c6e-6c6a722de8f9",
          "scriptId": "1ff9de9c-a125-4b3a-b83e-e2cac41c4083",
          "execution": "d03c2fd1-da74-44f6-b155-843123227586"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response has valid content type",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:14)",
          "checksum": "29bd3b3ea8112c14964551ddd8693840",
          "id": "6b528e6d-6c4c-4cd4-aebd-68403551ed0d",
          "timestamp": 1751098978798,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "989aae43-980f-4781-90e6-94ff6ddca76e",
          "name": "Concurrent Login Requests",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"login_id\": \"admin\",\n    \"password\": \"admin123!@#\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2d02797f-1218-4919-b75b-78cb1dca035f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Handles concurrent requests', function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "_lastExecutionId": "c3898395-4fbc-464f-9d01-53061e48ebc5"
              }
            }
          ]
        },
        "parent": {
          "id": "92adf09d-14c9-4a85-8d7e-87770f13f3e3",
          "name": "Performance Tests",
          "item": [
            {
              "id": "989aae43-980f-4781-90e6-94ff6ddca76e",
              "name": "Concurrent Login Requests",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"login_id\": \"admin\",\n    \"password\": \"admin123!@#\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2d02797f-1218-4919-b75b-78cb1dca035f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Handles concurrent requests', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});"
                    ],
                    "_lastExecutionId": "c3898395-4fbc-464f-9d01-53061e48ebc5"
                  }
                }
              ]
            },
            {
              "id": "3b689212-685d-4814-80e7-5990493fd986",
              "name": "Large Data Request",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "1000"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b08c3c45-f55c-40ec-acec-6e5a20b7f636",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Handles large data efficiently', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "",
                      "pm.test('Response size is reasonable', function () {",
                      "    const size = pm.response.size();",
                      "    pm.expect(size).to.be.below(10485760); // 10MB",
                      "});"
                    ],
                    "_lastExecutionId": "8e7164dc-abb1-42f4-a160-dc61d4ab0686"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "a373dc34-a5cb-45a4-ade0-81542ddeaa57",
          "length": 18,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "81e43b49-6af0-4feb-9c6e-6c6a722de8f9",
          "scriptId": "1ff9de9c-a125-4b3a-b83e-e2cac41c4083",
          "execution": "d03c2fd1-da74-44f6-b155-843123227586"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Handles concurrent requests",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:14)",
          "checksum": "2a02525429e4c37b9a19312f62cf5f4e",
          "id": "4652036e-2148-481f-a83c-cd0e1e93ee9a",
          "timestamp": 1751098978800,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "989aae43-980f-4781-90e6-94ff6ddca76e",
          "name": "Concurrent Login Requests",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"login_id\": \"admin\",\n    \"password\": \"admin123!@#\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2d02797f-1218-4919-b75b-78cb1dca035f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Handles concurrent requests', function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "_lastExecutionId": "c3898395-4fbc-464f-9d01-53061e48ebc5"
              }
            }
          ]
        },
        "parent": {
          "id": "92adf09d-14c9-4a85-8d7e-87770f13f3e3",
          "name": "Performance Tests",
          "item": [
            {
              "id": "989aae43-980f-4781-90e6-94ff6ddca76e",
              "name": "Concurrent Login Requests",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"login_id\": \"admin\",\n    \"password\": \"admin123!@#\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2d02797f-1218-4919-b75b-78cb1dca035f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Handles concurrent requests', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});"
                    ],
                    "_lastExecutionId": "c3898395-4fbc-464f-9d01-53061e48ebc5"
                  }
                }
              ]
            },
            {
              "id": "3b689212-685d-4814-80e7-5990493fd986",
              "name": "Large Data Request",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "1000"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b08c3c45-f55c-40ec-acec-6e5a20b7f636",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Handles large data efficiently', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "",
                      "pm.test('Response size is reasonable', function () {",
                      "    const size = pm.response.size();",
                      "    pm.expect(size).to.be.below(10485760); // 10MB",
                      "});"
                    ],
                    "_lastExecutionId": "8e7164dc-abb1-42f4-a160-dc61d4ab0686"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "a373dc34-a5cb-45a4-ade0-81542ddeaa57",
          "length": 18,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "81e43b49-6af0-4feb-9c6e-6c6a722de8f9",
          "scriptId": "2d02797f-1218-4919-b75b-78cb1dca035f",
          "execution": "c3898395-4fbc-464f-9d01-53061e48ebc5"
        }
      },
      {
        "error": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1555:16)",
          "checksum": "2462284d2be5f4dcd7e8994dbbc6be87",
          "id": "adb85b87-075c-4a1e-87d7-1db4c6612605",
          "timestamp": 1751098978809,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1555,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "3b689212-685d-4814-80e7-5990493fd986",
          "name": "Large Data Request",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "evaluations"
              ],
              "host": [
                "localhost"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "1000"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Test-Environment",
                "value": "true"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "746268f6-7acd-405c-8229-2cfbd60fff9a",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b08c3c45-f55c-40ec-acec-6e5a20b7f636",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Handles large data efficiently', function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response size is reasonable', function () {",
                  "    const size = pm.response.size();",
                  "    pm.expect(size).to.be.below(10485760); // 10MB",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "d7e00d11-b69a-40e8-8a8e-3d004b5ff162",
          "length": 18,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "c4910c9c-354a-4cf3-b667-d8d7c40123e0"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response time is less than 1000ms",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:1:15)",
          "checksum": "5e92644f18fec6938b9af2d87de8ec8f",
          "id": "eb177386-7e9e-476a-b162-8250df2271e4",
          "timestamp": 1751098978812,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 15,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "3b689212-685d-4814-80e7-5990493fd986",
          "name": "Large Data Request",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluations"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "1000"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b08c3c45-f55c-40ec-acec-6e5a20b7f636",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Handles large data efficiently', function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response size is reasonable', function () {",
                  "    const size = pm.response.size();",
                  "    pm.expect(size).to.be.below(10485760); // 10MB",
                  "});"
                ],
                "_lastExecutionId": "8e7164dc-abb1-42f4-a160-dc61d4ab0686"
              }
            }
          ]
        },
        "parent": {
          "id": "92adf09d-14c9-4a85-8d7e-87770f13f3e3",
          "name": "Performance Tests",
          "item": [
            {
              "id": "989aae43-980f-4781-90e6-94ff6ddca76e",
              "name": "Concurrent Login Requests",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"login_id\": \"admin\",\n    \"password\": \"admin123!@#\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2d02797f-1218-4919-b75b-78cb1dca035f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Handles concurrent requests', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});"
                    ],
                    "_lastExecutionId": "c3898395-4fbc-464f-9d01-53061e48ebc5"
                  }
                }
              ]
            },
            {
              "id": "3b689212-685d-4814-80e7-5990493fd986",
              "name": "Large Data Request",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "1000"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b08c3c45-f55c-40ec-acec-6e5a20b7f636",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Handles large data efficiently', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "",
                      "pm.test('Response size is reasonable', function () {",
                      "    const size = pm.response.size();",
                      "    pm.expect(size).to.be.below(10485760); // 10MB",
                      "});"
                    ],
                    "_lastExecutionId": "8e7164dc-abb1-42f4-a160-dc61d4ab0686"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d7e00d11-b69a-40e8-8a8e-3d004b5ff162",
          "length": 18,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "c4910c9c-354a-4cf3-b667-d8d7c40123e0",
          "scriptId": "1ff9de9c-a125-4b3a-b83e-e2cac41c4083",
          "execution": "ce9b2d4a-ea95-4950-8980-c96b3d9191c3"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response has valid content type",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:15)",
          "checksum": "edbf16327b42779a32d46df05dea2ca3",
          "id": "dad77dca-df61-4441-805f-6dc31cb5d5ef",
          "timestamp": 1751098978812,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 15,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "3b689212-685d-4814-80e7-5990493fd986",
          "name": "Large Data Request",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluations"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "1000"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b08c3c45-f55c-40ec-acec-6e5a20b7f636",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Handles large data efficiently', function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response size is reasonable', function () {",
                  "    const size = pm.response.size();",
                  "    pm.expect(size).to.be.below(10485760); // 10MB",
                  "});"
                ],
                "_lastExecutionId": "8e7164dc-abb1-42f4-a160-dc61d4ab0686"
              }
            }
          ]
        },
        "parent": {
          "id": "92adf09d-14c9-4a85-8d7e-87770f13f3e3",
          "name": "Performance Tests",
          "item": [
            {
              "id": "989aae43-980f-4781-90e6-94ff6ddca76e",
              "name": "Concurrent Login Requests",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"login_id\": \"admin\",\n    \"password\": \"admin123!@#\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2d02797f-1218-4919-b75b-78cb1dca035f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Handles concurrent requests', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});"
                    ],
                    "_lastExecutionId": "c3898395-4fbc-464f-9d01-53061e48ebc5"
                  }
                }
              ]
            },
            {
              "id": "3b689212-685d-4814-80e7-5990493fd986",
              "name": "Large Data Request",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "1000"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b08c3c45-f55c-40ec-acec-6e5a20b7f636",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Handles large data efficiently', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "",
                      "pm.test('Response size is reasonable', function () {",
                      "    const size = pm.response.size();",
                      "    pm.expect(size).to.be.below(10485760); // 10MB",
                      "});"
                    ],
                    "_lastExecutionId": "8e7164dc-abb1-42f4-a160-dc61d4ab0686"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d7e00d11-b69a-40e8-8a8e-3d004b5ff162",
          "length": 18,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "c4910c9c-354a-4cf3-b667-d8d7c40123e0",
          "scriptId": "1ff9de9c-a125-4b3a-b83e-e2cac41c4083",
          "execution": "ce9b2d4a-ea95-4950-8980-c96b3d9191c3"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Handles large data efficiently",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:15)",
          "checksum": "9f9c209105768d4656460ce1c4145d51",
          "id": "a143f7e0-51e7-4289-acf6-bd6ce02d9ce3",
          "timestamp": 1751098978814,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 15,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "3b689212-685d-4814-80e7-5990493fd986",
          "name": "Large Data Request",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluations"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "1000"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b08c3c45-f55c-40ec-acec-6e5a20b7f636",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Handles large data efficiently', function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response size is reasonable', function () {",
                  "    const size = pm.response.size();",
                  "    pm.expect(size).to.be.below(10485760); // 10MB",
                  "});"
                ],
                "_lastExecutionId": "8e7164dc-abb1-42f4-a160-dc61d4ab0686"
              }
            }
          ]
        },
        "parent": {
          "id": "92adf09d-14c9-4a85-8d7e-87770f13f3e3",
          "name": "Performance Tests",
          "item": [
            {
              "id": "989aae43-980f-4781-90e6-94ff6ddca76e",
              "name": "Concurrent Login Requests",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"login_id\": \"admin\",\n    \"password\": \"admin123!@#\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2d02797f-1218-4919-b75b-78cb1dca035f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Handles concurrent requests', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});"
                    ],
                    "_lastExecutionId": "c3898395-4fbc-464f-9d01-53061e48ebc5"
                  }
                }
              ]
            },
            {
              "id": "3b689212-685d-4814-80e7-5990493fd986",
              "name": "Large Data Request",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "1000"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b08c3c45-f55c-40ec-acec-6e5a20b7f636",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Handles large data efficiently', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "",
                      "pm.test('Response size is reasonable', function () {",
                      "    const size = pm.response.size();",
                      "    pm.expect(size).to.be.below(10485760); // 10MB",
                      "});"
                    ],
                    "_lastExecutionId": "8e7164dc-abb1-42f4-a160-dc61d4ab0686"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d7e00d11-b69a-40e8-8a8e-3d004b5ff162",
          "length": 18,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "c4910c9c-354a-4cf3-b667-d8d7c40123e0",
          "scriptId": "b08c3c45-f55c-40ec-acec-6e5a20b7f636",
          "execution": "8e7164dc-abb1-42f4-a160-dc61d4ab0686"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response size is reasonable",
          "message": "expected [object Object] to be a number or a date",
          "stack": "AssertionError: expected [object Object] to be a number or a date\n   at Object.eval sandbox-script.js:2:15)",
          "checksum": "f1ac7cea109f500b248b4d8b7e3ebe8b",
          "id": "5bbc8355-31b9-4a43-8cce-8d5a5e2983a6",
          "timestamp": 1751098978814,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 15,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "3b689212-685d-4814-80e7-5990493fd986",
          "name": "Large Data Request",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluations"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "1000"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b08c3c45-f55c-40ec-acec-6e5a20b7f636",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Handles large data efficiently', function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response size is reasonable', function () {",
                  "    const size = pm.response.size();",
                  "    pm.expect(size).to.be.below(10485760); // 10MB",
                  "});"
                ],
                "_lastExecutionId": "8e7164dc-abb1-42f4-a160-dc61d4ab0686"
              }
            }
          ]
        },
        "parent": {
          "id": "92adf09d-14c9-4a85-8d7e-87770f13f3e3",
          "name": "Performance Tests",
          "item": [
            {
              "id": "989aae43-980f-4781-90e6-94ff6ddca76e",
              "name": "Concurrent Login Requests",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"login_id\": \"admin\",\n    \"password\": \"admin123!@#\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2d02797f-1218-4919-b75b-78cb1dca035f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Handles concurrent requests', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});"
                    ],
                    "_lastExecutionId": "c3898395-4fbc-464f-9d01-53061e48ebc5"
                  }
                }
              ]
            },
            {
              "id": "3b689212-685d-4814-80e7-5990493fd986",
              "name": "Large Data Request",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "1000"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b08c3c45-f55c-40ec-acec-6e5a20b7f636",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Handles large data efficiently', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "",
                      "pm.test('Response size is reasonable', function () {",
                      "    const size = pm.response.size();",
                      "    pm.expect(size).to.be.below(10485760); // 10MB",
                      "});"
                    ],
                    "_lastExecutionId": "8e7164dc-abb1-42f4-a160-dc61d4ab0686"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d7e00d11-b69a-40e8-8a8e-3d004b5ff162",
          "length": 18,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "c4910c9c-354a-4cf3-b667-d8d7c40123e0",
          "scriptId": "b08c3c45-f55c-40ec-acec-6e5a20b7f636",
          "execution": "8e7164dc-abb1-42f4-a160-dc61d4ab0686"
        }
      },
      {
        "error": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1555:16)",
          "checksum": "2462284d2be5f4dcd7e8994dbbc6be87",
          "id": "cfbfff69-5a9f-4eab-98d5-f73b32c0be9a",
          "timestamp": 1751098978824,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1555,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "63f8e8b1-0969-4ae3-9443-e10bc5776f6b",
          "name": "SQL Injection Test",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Test-Environment",
                "value": "true"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "6fdcc924-2dc2-438e-8f82-c72c34fd79bd",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"login_id\": \"admin' OR '1'='1\",\n    \"password\": \"' OR '1'='1\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "35cd1bf2-549d-4987-9150-f0d79232f03a",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Prevents SQL injection', function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "acf47176-4c11-49ad-b660-e2d824ab57c1",
          "length": 18,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "52f129a6-da77-4dec-9ad2-129f5c312bad"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response time is less than 1000ms",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:1:16)",
          "checksum": "5407a1b19cacaeeda94fbec1c502c32b",
          "id": "99229df8-3158-40cf-8271-024c5c383da3",
          "timestamp": 1751098978825,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "63f8e8b1-0969-4ae3-9443-e10bc5776f6b",
          "name": "SQL Injection Test",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"login_id\": \"admin' OR '1'='1\",\n    \"password\": \"' OR '1'='1\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "35cd1bf2-549d-4987-9150-f0d79232f03a",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Prevents SQL injection', function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ],
                "_lastExecutionId": "956fc2d0-150f-41c9-8ea9-0fcb7949a5a3"
              }
            }
          ]
        },
        "parent": {
          "id": "c0c91299-5e53-4e3b-91aa-40be1b6a8027",
          "name": "Security Tests",
          "item": [
            {
              "id": "63f8e8b1-0969-4ae3-9443-e10bc5776f6b",
              "name": "SQL Injection Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"login_id\": \"admin' OR '1'='1\",\n    \"password\": \"' OR '1'='1\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "35cd1bf2-549d-4987-9150-f0d79232f03a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Prevents SQL injection', function () {",
                      "    pm.response.to.have.status(400);",
                      "});"
                    ],
                    "_lastExecutionId": "956fc2d0-150f-41c9-8ea9-0fcb7949a5a3"
                  }
                }
              ]
            },
            {
              "id": "e558a0c2-7ee4-4e0d-9f57-224a31b067c5",
              "name": "XSS Prevention Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"template_name\": \"<script>alert('XSS')</script>\",\n    \"template_type\": \"score\",\n    \"criteria\": []\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8f16486d-d113-497e-a0f3-78c7c707ad02",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Prevents XSS attacks', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.template_name).to.not.include('<script>');",
                      "});"
                    ],
                    "_lastExecutionId": "0fe77f8b-4840-4c4f-bb46-05ec8d55b1e8"
                  }
                }
              ]
            },
            {
              "id": "3cc42d86-5eb0-4449-834c-45a9a782ffe5",
              "name": "Unauthorized Access Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "09ddebb5-17f4-46c8-b6d1-d5c16cd9c372",
                    "type": "text/javascript",
                    "exec": [
                      "// Remove auth token for this request",
                      "pm.request.headers.remove('Authorization');"
                    ],
                    "_lastExecutionId": "ac710d9d-687f-49b1-9cad-3087d7059bbc"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "0cf436fb-8492-4bf1-9859-2b0ba6a6ca53",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Prevents unauthorized access', function () {",
                      "    pm.response.to.have.status(401);",
                      "});"
                    ],
                    "_lastExecutionId": "df22f613-9fe3-481a-a5bd-c698819e07b1"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "acf47176-4c11-49ad-b660-e2d824ab57c1",
          "length": 18,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "52f129a6-da77-4dec-9ad2-129f5c312bad",
          "scriptId": "1ff9de9c-a125-4b3a-b83e-e2cac41c4083",
          "execution": "afbd9736-d932-408e-a330-3aea1dd8dff5"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response has valid content type",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:16)",
          "checksum": "bec90e8a8b981a22167ab7682f9f14fd",
          "id": "18eb9cbe-59ee-4f75-a673-2f1e908a5c9e",
          "timestamp": 1751098978825,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "63f8e8b1-0969-4ae3-9443-e10bc5776f6b",
          "name": "SQL Injection Test",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"login_id\": \"admin' OR '1'='1\",\n    \"password\": \"' OR '1'='1\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "35cd1bf2-549d-4987-9150-f0d79232f03a",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Prevents SQL injection', function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ],
                "_lastExecutionId": "956fc2d0-150f-41c9-8ea9-0fcb7949a5a3"
              }
            }
          ]
        },
        "parent": {
          "id": "c0c91299-5e53-4e3b-91aa-40be1b6a8027",
          "name": "Security Tests",
          "item": [
            {
              "id": "63f8e8b1-0969-4ae3-9443-e10bc5776f6b",
              "name": "SQL Injection Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"login_id\": \"admin' OR '1'='1\",\n    \"password\": \"' OR '1'='1\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "35cd1bf2-549d-4987-9150-f0d79232f03a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Prevents SQL injection', function () {",
                      "    pm.response.to.have.status(400);",
                      "});"
                    ],
                    "_lastExecutionId": "956fc2d0-150f-41c9-8ea9-0fcb7949a5a3"
                  }
                }
              ]
            },
            {
              "id": "e558a0c2-7ee4-4e0d-9f57-224a31b067c5",
              "name": "XSS Prevention Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"template_name\": \"<script>alert('XSS')</script>\",\n    \"template_type\": \"score\",\n    \"criteria\": []\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8f16486d-d113-497e-a0f3-78c7c707ad02",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Prevents XSS attacks', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.template_name).to.not.include('<script>');",
                      "});"
                    ],
                    "_lastExecutionId": "0fe77f8b-4840-4c4f-bb46-05ec8d55b1e8"
                  }
                }
              ]
            },
            {
              "id": "3cc42d86-5eb0-4449-834c-45a9a782ffe5",
              "name": "Unauthorized Access Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "09ddebb5-17f4-46c8-b6d1-d5c16cd9c372",
                    "type": "text/javascript",
                    "exec": [
                      "// Remove auth token for this request",
                      "pm.request.headers.remove('Authorization');"
                    ],
                    "_lastExecutionId": "ac710d9d-687f-49b1-9cad-3087d7059bbc"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "0cf436fb-8492-4bf1-9859-2b0ba6a6ca53",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Prevents unauthorized access', function () {",
                      "    pm.response.to.have.status(401);",
                      "});"
                    ],
                    "_lastExecutionId": "df22f613-9fe3-481a-a5bd-c698819e07b1"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "acf47176-4c11-49ad-b660-e2d824ab57c1",
          "length": 18,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "52f129a6-da77-4dec-9ad2-129f5c312bad",
          "scriptId": "1ff9de9c-a125-4b3a-b83e-e2cac41c4083",
          "execution": "afbd9736-d932-408e-a330-3aea1dd8dff5"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Prevents SQL injection",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:16)",
          "checksum": "cd4f2368742d3e7de591ee2ed9753f4e",
          "id": "cf83bee2-7f20-4dad-93fa-f80811c9c331",
          "timestamp": 1751098978827,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "63f8e8b1-0969-4ae3-9443-e10bc5776f6b",
          "name": "SQL Injection Test",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"login_id\": \"admin' OR '1'='1\",\n    \"password\": \"' OR '1'='1\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "35cd1bf2-549d-4987-9150-f0d79232f03a",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Prevents SQL injection', function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ],
                "_lastExecutionId": "956fc2d0-150f-41c9-8ea9-0fcb7949a5a3"
              }
            }
          ]
        },
        "parent": {
          "id": "c0c91299-5e53-4e3b-91aa-40be1b6a8027",
          "name": "Security Tests",
          "item": [
            {
              "id": "63f8e8b1-0969-4ae3-9443-e10bc5776f6b",
              "name": "SQL Injection Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"login_id\": \"admin' OR '1'='1\",\n    \"password\": \"' OR '1'='1\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "35cd1bf2-549d-4987-9150-f0d79232f03a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Prevents SQL injection', function () {",
                      "    pm.response.to.have.status(400);",
                      "});"
                    ],
                    "_lastExecutionId": "956fc2d0-150f-41c9-8ea9-0fcb7949a5a3"
                  }
                }
              ]
            },
            {
              "id": "e558a0c2-7ee4-4e0d-9f57-224a31b067c5",
              "name": "XSS Prevention Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"template_name\": \"<script>alert('XSS')</script>\",\n    \"template_type\": \"score\",\n    \"criteria\": []\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8f16486d-d113-497e-a0f3-78c7c707ad02",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Prevents XSS attacks', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.template_name).to.not.include('<script>');",
                      "});"
                    ],
                    "_lastExecutionId": "0fe77f8b-4840-4c4f-bb46-05ec8d55b1e8"
                  }
                }
              ]
            },
            {
              "id": "3cc42d86-5eb0-4449-834c-45a9a782ffe5",
              "name": "Unauthorized Access Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "09ddebb5-17f4-46c8-b6d1-d5c16cd9c372",
                    "type": "text/javascript",
                    "exec": [
                      "// Remove auth token for this request",
                      "pm.request.headers.remove('Authorization');"
                    ],
                    "_lastExecutionId": "ac710d9d-687f-49b1-9cad-3087d7059bbc"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "0cf436fb-8492-4bf1-9859-2b0ba6a6ca53",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Prevents unauthorized access', function () {",
                      "    pm.response.to.have.status(401);",
                      "});"
                    ],
                    "_lastExecutionId": "df22f613-9fe3-481a-a5bd-c698819e07b1"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "acf47176-4c11-49ad-b660-e2d824ab57c1",
          "length": 18,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "52f129a6-da77-4dec-9ad2-129f5c312bad",
          "scriptId": "35cd1bf2-549d-4987-9150-f0d79232f03a",
          "execution": "956fc2d0-150f-41c9-8ea9-0fcb7949a5a3"
        }
      },
      {
        "error": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1555:16)",
          "checksum": "2462284d2be5f4dcd7e8994dbbc6be87",
          "id": "82512c62-66ca-4e06-aafa-5b0b35e9cdc8",
          "timestamp": 1751098978836,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1555,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "e558a0c2-7ee4-4e0d-9f57-224a31b067c5",
          "name": "XSS Prevention Test",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "templates"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Test-Environment",
                "value": "true"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "19c5034b-7b89-4d58-9d4a-b8dcc1555c03",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"template_name\": \"<script>alert('XSS')</script>\",\n    \"template_type\": \"score\",\n    \"criteria\": []\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8f16486d-d113-497e-a0f3-78c7c707ad02",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Prevents XSS attacks', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.template_name).to.not.include('<script>');",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "d816f1da-787d-46ec-a1d0-6e27303c42e3",
          "length": 18,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "19ae3789-444b-4523-88ee-839214c9f9c2"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response time is less than 1000ms",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:1:17)",
          "checksum": "182ebd933626b23ec4ce425361175194",
          "id": "9d4fca70-9a93-481e-9bf4-af4442ec2a05",
          "timestamp": 1751098978839,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 17,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "e558a0c2-7ee4-4e0d-9f57-224a31b067c5",
          "name": "XSS Prevention Test",
          "request": {
            "url": {
              "path": [
                "api",
                "templates"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"template_name\": \"<script>alert('XSS')</script>\",\n    \"template_type\": \"score\",\n    \"criteria\": []\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8f16486d-d113-497e-a0f3-78c7c707ad02",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Prevents XSS attacks', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.template_name).to.not.include('<script>');",
                  "});"
                ],
                "_lastExecutionId": "0fe77f8b-4840-4c4f-bb46-05ec8d55b1e8"
              }
            }
          ]
        },
        "parent": {
          "id": "c0c91299-5e53-4e3b-91aa-40be1b6a8027",
          "name": "Security Tests",
          "item": [
            {
              "id": "63f8e8b1-0969-4ae3-9443-e10bc5776f6b",
              "name": "SQL Injection Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"login_id\": \"admin' OR '1'='1\",\n    \"password\": \"' OR '1'='1\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "35cd1bf2-549d-4987-9150-f0d79232f03a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Prevents SQL injection', function () {",
                      "    pm.response.to.have.status(400);",
                      "});"
                    ],
                    "_lastExecutionId": "956fc2d0-150f-41c9-8ea9-0fcb7949a5a3"
                  }
                }
              ]
            },
            {
              "id": "e558a0c2-7ee4-4e0d-9f57-224a31b067c5",
              "name": "XSS Prevention Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"template_name\": \"<script>alert('XSS')</script>\",\n    \"template_type\": \"score\",\n    \"criteria\": []\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8f16486d-d113-497e-a0f3-78c7c707ad02",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Prevents XSS attacks', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.template_name).to.not.include('<script>');",
                      "});"
                    ],
                    "_lastExecutionId": "0fe77f8b-4840-4c4f-bb46-05ec8d55b1e8"
                  }
                }
              ]
            },
            {
              "id": "3cc42d86-5eb0-4449-834c-45a9a782ffe5",
              "name": "Unauthorized Access Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "09ddebb5-17f4-46c8-b6d1-d5c16cd9c372",
                    "type": "text/javascript",
                    "exec": [
                      "// Remove auth token for this request",
                      "pm.request.headers.remove('Authorization');"
                    ],
                    "_lastExecutionId": "ac710d9d-687f-49b1-9cad-3087d7059bbc"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "0cf436fb-8492-4bf1-9859-2b0ba6a6ca53",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Prevents unauthorized access', function () {",
                      "    pm.response.to.have.status(401);",
                      "});"
                    ],
                    "_lastExecutionId": "df22f613-9fe3-481a-a5bd-c698819e07b1"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d816f1da-787d-46ec-a1d0-6e27303c42e3",
          "length": 18,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "19ae3789-444b-4523-88ee-839214c9f9c2",
          "scriptId": "1ff9de9c-a125-4b3a-b83e-e2cac41c4083",
          "execution": "dbd51597-7c99-4e33-97fc-3383865d8483"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response has valid content type",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:17)",
          "checksum": "70630a67ab771c83f82a569384e5c2dc",
          "id": "b43fa274-5923-49fc-87a9-7967c5eee36f",
          "timestamp": 1751098978839,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 17,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "e558a0c2-7ee4-4e0d-9f57-224a31b067c5",
          "name": "XSS Prevention Test",
          "request": {
            "url": {
              "path": [
                "api",
                "templates"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"template_name\": \"<script>alert('XSS')</script>\",\n    \"template_type\": \"score\",\n    \"criteria\": []\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8f16486d-d113-497e-a0f3-78c7c707ad02",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Prevents XSS attacks', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.template_name).to.not.include('<script>');",
                  "});"
                ],
                "_lastExecutionId": "0fe77f8b-4840-4c4f-bb46-05ec8d55b1e8"
              }
            }
          ]
        },
        "parent": {
          "id": "c0c91299-5e53-4e3b-91aa-40be1b6a8027",
          "name": "Security Tests",
          "item": [
            {
              "id": "63f8e8b1-0969-4ae3-9443-e10bc5776f6b",
              "name": "SQL Injection Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"login_id\": \"admin' OR '1'='1\",\n    \"password\": \"' OR '1'='1\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "35cd1bf2-549d-4987-9150-f0d79232f03a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Prevents SQL injection', function () {",
                      "    pm.response.to.have.status(400);",
                      "});"
                    ],
                    "_lastExecutionId": "956fc2d0-150f-41c9-8ea9-0fcb7949a5a3"
                  }
                }
              ]
            },
            {
              "id": "e558a0c2-7ee4-4e0d-9f57-224a31b067c5",
              "name": "XSS Prevention Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"template_name\": \"<script>alert('XSS')</script>\",\n    \"template_type\": \"score\",\n    \"criteria\": []\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8f16486d-d113-497e-a0f3-78c7c707ad02",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Prevents XSS attacks', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.template_name).to.not.include('<script>');",
                      "});"
                    ],
                    "_lastExecutionId": "0fe77f8b-4840-4c4f-bb46-05ec8d55b1e8"
                  }
                }
              ]
            },
            {
              "id": "3cc42d86-5eb0-4449-834c-45a9a782ffe5",
              "name": "Unauthorized Access Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "09ddebb5-17f4-46c8-b6d1-d5c16cd9c372",
                    "type": "text/javascript",
                    "exec": [
                      "// Remove auth token for this request",
                      "pm.request.headers.remove('Authorization');"
                    ],
                    "_lastExecutionId": "ac710d9d-687f-49b1-9cad-3087d7059bbc"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "0cf436fb-8492-4bf1-9859-2b0ba6a6ca53",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Prevents unauthorized access', function () {",
                      "    pm.response.to.have.status(401);",
                      "});"
                    ],
                    "_lastExecutionId": "df22f613-9fe3-481a-a5bd-c698819e07b1"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d816f1da-787d-46ec-a1d0-6e27303c42e3",
          "length": 18,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "19ae3789-444b-4523-88ee-839214c9f9c2",
          "scriptId": "1ff9de9c-a125-4b3a-b83e-e2cac41c4083",
          "execution": "dbd51597-7c99-4e33-97fc-3383865d8483"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 0,
          "test": "Prevents XSS attacks",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:17)",
          "checksum": "049663676b446428b5eb146fbcd16807",
          "id": "7209f2a6-b15b-4328-865e-d72fbc476aff",
          "timestamp": 1751098978841,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 17,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "e558a0c2-7ee4-4e0d-9f57-224a31b067c5",
          "name": "XSS Prevention Test",
          "request": {
            "url": {
              "path": [
                "api",
                "templates"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"template_name\": \"<script>alert('XSS')</script>\",\n    \"template_type\": \"score\",\n    \"criteria\": []\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8f16486d-d113-497e-a0f3-78c7c707ad02",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Prevents XSS attacks', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.template_name).to.not.include('<script>');",
                  "});"
                ],
                "_lastExecutionId": "0fe77f8b-4840-4c4f-bb46-05ec8d55b1e8"
              }
            }
          ]
        },
        "parent": {
          "id": "c0c91299-5e53-4e3b-91aa-40be1b6a8027",
          "name": "Security Tests",
          "item": [
            {
              "id": "63f8e8b1-0969-4ae3-9443-e10bc5776f6b",
              "name": "SQL Injection Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"login_id\": \"admin' OR '1'='1\",\n    \"password\": \"' OR '1'='1\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "35cd1bf2-549d-4987-9150-f0d79232f03a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Prevents SQL injection', function () {",
                      "    pm.response.to.have.status(400);",
                      "});"
                    ],
                    "_lastExecutionId": "956fc2d0-150f-41c9-8ea9-0fcb7949a5a3"
                  }
                }
              ]
            },
            {
              "id": "e558a0c2-7ee4-4e0d-9f57-224a31b067c5",
              "name": "XSS Prevention Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"template_name\": \"<script>alert('XSS')</script>\",\n    \"template_type\": \"score\",\n    \"criteria\": []\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8f16486d-d113-497e-a0f3-78c7c707ad02",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Prevents XSS attacks', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.template_name).to.not.include('<script>');",
                      "});"
                    ],
                    "_lastExecutionId": "0fe77f8b-4840-4c4f-bb46-05ec8d55b1e8"
                  }
                }
              ]
            },
            {
              "id": "3cc42d86-5eb0-4449-834c-45a9a782ffe5",
              "name": "Unauthorized Access Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "09ddebb5-17f4-46c8-b6d1-d5c16cd9c372",
                    "type": "text/javascript",
                    "exec": [
                      "// Remove auth token for this request",
                      "pm.request.headers.remove('Authorization');"
                    ],
                    "_lastExecutionId": "ac710d9d-687f-49b1-9cad-3087d7059bbc"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "0cf436fb-8492-4bf1-9859-2b0ba6a6ca53",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Prevents unauthorized access', function () {",
                      "    pm.response.to.have.status(401);",
                      "});"
                    ],
                    "_lastExecutionId": "df22f613-9fe3-481a-a5bd-c698819e07b1"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d816f1da-787d-46ec-a1d0-6e27303c42e3",
          "length": 18,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "19ae3789-444b-4523-88ee-839214c9f9c2",
          "scriptId": "8f16486d-d113-497e-a0f3-78c7c707ad02",
          "execution": "0fe77f8b-4840-4c4f-bb46-05ec8d55b1e8"
        }
      },
      {
        "error": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8080,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8080",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8080\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1555:16)",
          "checksum": "2462284d2be5f4dcd7e8994dbbc6be87",
          "id": "b13c612a-108f-434d-81de-5df64e842379",
          "timestamp": 1751098978850,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1555,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "3cc42d86-5eb0-4449-834c-45a9a782ffe5",
          "name": "Unauthorized Access Test",
          "request": {
            "url": {
              "protocol": "http",
              "port": "8080",
              "path": [
                "api",
                "templates"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Test-Environment",
                "value": "true"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "20d51149-a696-47cc-b807-641e2be2d7d3",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:8080",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "09ddebb5-17f4-46c8-b6d1-d5c16cd9c372",
                "type": "text/javascript",
                "exec": [
                  "// Remove auth token for this request",
                  "pm.request.headers.remove('Authorization');"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "0cf436fb-8492-4bf1-9859-2b0ba6a6ca53",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Prevents unauthorized access', function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "9c4072e7-7d20-41e1-8302-f64c042dcca2",
          "length": 18,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "5d1159ba-54b9-4209-913c-3e09499ed6a1"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response time is less than 1000ms",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:1:18)",
          "checksum": "e5c637846009a25f2fdcef5d6b421878",
          "id": "34bc7d44-0b10-4b34-8a90-f4f5d5858de8",
          "timestamp": 1751098978853,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 18,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "3cc42d86-5eb0-4449-834c-45a9a782ffe5",
          "name": "Unauthorized Access Test",
          "request": {
            "url": {
              "path": [
                "api",
                "templates"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "09ddebb5-17f4-46c8-b6d1-d5c16cd9c372",
                "type": "text/javascript",
                "exec": [
                  "// Remove auth token for this request",
                  "pm.request.headers.remove('Authorization');"
                ],
                "_lastExecutionId": "ac710d9d-687f-49b1-9cad-3087d7059bbc"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "0cf436fb-8492-4bf1-9859-2b0ba6a6ca53",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Prevents unauthorized access', function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ],
                "_lastExecutionId": "df22f613-9fe3-481a-a5bd-c698819e07b1"
              }
            }
          ]
        },
        "parent": {
          "id": "c0c91299-5e53-4e3b-91aa-40be1b6a8027",
          "name": "Security Tests",
          "item": [
            {
              "id": "63f8e8b1-0969-4ae3-9443-e10bc5776f6b",
              "name": "SQL Injection Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"login_id\": \"admin' OR '1'='1\",\n    \"password\": \"' OR '1'='1\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "35cd1bf2-549d-4987-9150-f0d79232f03a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Prevents SQL injection', function () {",
                      "    pm.response.to.have.status(400);",
                      "});"
                    ],
                    "_lastExecutionId": "956fc2d0-150f-41c9-8ea9-0fcb7949a5a3"
                  }
                }
              ]
            },
            {
              "id": "e558a0c2-7ee4-4e0d-9f57-224a31b067c5",
              "name": "XSS Prevention Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"template_name\": \"<script>alert('XSS')</script>\",\n    \"template_type\": \"score\",\n    \"criteria\": []\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8f16486d-d113-497e-a0f3-78c7c707ad02",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Prevents XSS attacks', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.template_name).to.not.include('<script>');",
                      "});"
                    ],
                    "_lastExecutionId": "0fe77f8b-4840-4c4f-bb46-05ec8d55b1e8"
                  }
                }
              ]
            },
            {
              "id": "3cc42d86-5eb0-4449-834c-45a9a782ffe5",
              "name": "Unauthorized Access Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "09ddebb5-17f4-46c8-b6d1-d5c16cd9c372",
                    "type": "text/javascript",
                    "exec": [
                      "// Remove auth token for this request",
                      "pm.request.headers.remove('Authorization');"
                    ],
                    "_lastExecutionId": "ac710d9d-687f-49b1-9cad-3087d7059bbc"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "0cf436fb-8492-4bf1-9859-2b0ba6a6ca53",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Prevents unauthorized access', function () {",
                      "    pm.response.to.have.status(401);",
                      "});"
                    ],
                    "_lastExecutionId": "df22f613-9fe3-481a-a5bd-c698819e07b1"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9c4072e7-7d20-41e1-8302-f64c042dcca2",
          "length": 18,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "5d1159ba-54b9-4209-913c-3e09499ed6a1",
          "scriptId": "1ff9de9c-a125-4b3a-b83e-e2cac41c4083",
          "execution": "0a25dcaf-51de-43e6-ba30-f1f99e0d154a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response has valid content type",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:18)",
          "checksum": "3c04998862d547889ac14a2db505d234",
          "id": "584424d1-c05c-47df-bcc2-c00eeca1a030",
          "timestamp": 1751098978853,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 18,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "3cc42d86-5eb0-4449-834c-45a9a782ffe5",
          "name": "Unauthorized Access Test",
          "request": {
            "url": {
              "path": [
                "api",
                "templates"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "09ddebb5-17f4-46c8-b6d1-d5c16cd9c372",
                "type": "text/javascript",
                "exec": [
                  "// Remove auth token for this request",
                  "pm.request.headers.remove('Authorization');"
                ],
                "_lastExecutionId": "ac710d9d-687f-49b1-9cad-3087d7059bbc"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "0cf436fb-8492-4bf1-9859-2b0ba6a6ca53",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Prevents unauthorized access', function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ],
                "_lastExecutionId": "df22f613-9fe3-481a-a5bd-c698819e07b1"
              }
            }
          ]
        },
        "parent": {
          "id": "c0c91299-5e53-4e3b-91aa-40be1b6a8027",
          "name": "Security Tests",
          "item": [
            {
              "id": "63f8e8b1-0969-4ae3-9443-e10bc5776f6b",
              "name": "SQL Injection Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"login_id\": \"admin' OR '1'='1\",\n    \"password\": \"' OR '1'='1\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "35cd1bf2-549d-4987-9150-f0d79232f03a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Prevents SQL injection', function () {",
                      "    pm.response.to.have.status(400);",
                      "});"
                    ],
                    "_lastExecutionId": "956fc2d0-150f-41c9-8ea9-0fcb7949a5a3"
                  }
                }
              ]
            },
            {
              "id": "e558a0c2-7ee4-4e0d-9f57-224a31b067c5",
              "name": "XSS Prevention Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"template_name\": \"<script>alert('XSS')</script>\",\n    \"template_type\": \"score\",\n    \"criteria\": []\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8f16486d-d113-497e-a0f3-78c7c707ad02",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Prevents XSS attacks', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.template_name).to.not.include('<script>');",
                      "});"
                    ],
                    "_lastExecutionId": "0fe77f8b-4840-4c4f-bb46-05ec8d55b1e8"
                  }
                }
              ]
            },
            {
              "id": "3cc42d86-5eb0-4449-834c-45a9a782ffe5",
              "name": "Unauthorized Access Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "09ddebb5-17f4-46c8-b6d1-d5c16cd9c372",
                    "type": "text/javascript",
                    "exec": [
                      "// Remove auth token for this request",
                      "pm.request.headers.remove('Authorization');"
                    ],
                    "_lastExecutionId": "ac710d9d-687f-49b1-9cad-3087d7059bbc"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "0cf436fb-8492-4bf1-9859-2b0ba6a6ca53",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Prevents unauthorized access', function () {",
                      "    pm.response.to.have.status(401);",
                      "});"
                    ],
                    "_lastExecutionId": "df22f613-9fe3-481a-a5bd-c698819e07b1"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9c4072e7-7d20-41e1-8302-f64c042dcca2",
          "length": 18,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "5d1159ba-54b9-4209-913c-3e09499ed6a1",
          "scriptId": "1ff9de9c-a125-4b3a-b83e-e2cac41c4083",
          "execution": "0a25dcaf-51de-43e6-ba30-f1f99e0d154a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Prevents unauthorized access",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:18)",
          "checksum": "fdfb9e44db75165ea366ccabb48b5463",
          "id": "591586dd-820b-49e8-a151-0e7aa24173d3",
          "timestamp": 1751098978855,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 18,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "3cc42d86-5eb0-4449-834c-45a9a782ffe5",
          "name": "Unauthorized Access Test",
          "request": {
            "url": {
              "path": [
                "api",
                "templates"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "09ddebb5-17f4-46c8-b6d1-d5c16cd9c372",
                "type": "text/javascript",
                "exec": [
                  "// Remove auth token for this request",
                  "pm.request.headers.remove('Authorization');"
                ],
                "_lastExecutionId": "ac710d9d-687f-49b1-9cad-3087d7059bbc"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "0cf436fb-8492-4bf1-9859-2b0ba6a6ca53",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Prevents unauthorized access', function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ],
                "_lastExecutionId": "df22f613-9fe3-481a-a5bd-c698819e07b1"
              }
            }
          ]
        },
        "parent": {
          "id": "c0c91299-5e53-4e3b-91aa-40be1b6a8027",
          "name": "Security Tests",
          "item": [
            {
              "id": "63f8e8b1-0969-4ae3-9443-e10bc5776f6b",
              "name": "SQL Injection Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"login_id\": \"admin' OR '1'='1\",\n    \"password\": \"' OR '1'='1\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "35cd1bf2-549d-4987-9150-f0d79232f03a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Prevents SQL injection', function () {",
                      "    pm.response.to.have.status(400);",
                      "});"
                    ],
                    "_lastExecutionId": "956fc2d0-150f-41c9-8ea9-0fcb7949a5a3"
                  }
                }
              ]
            },
            {
              "id": "e558a0c2-7ee4-4e0d-9f57-224a31b067c5",
              "name": "XSS Prevention Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"template_name\": \"<script>alert('XSS')</script>\",\n    \"template_type\": \"score\",\n    \"criteria\": []\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8f16486d-d113-497e-a0f3-78c7c707ad02",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Prevents XSS attacks', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.template_name).to.not.include('<script>');",
                      "});"
                    ],
                    "_lastExecutionId": "0fe77f8b-4840-4c4f-bb46-05ec8d55b1e8"
                  }
                }
              ]
            },
            {
              "id": "3cc42d86-5eb0-4449-834c-45a9a782ffe5",
              "name": "Unauthorized Access Test",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "templates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "09ddebb5-17f4-46c8-b6d1-d5c16cd9c372",
                    "type": "text/javascript",
                    "exec": [
                      "// Remove auth token for this request",
                      "pm.request.headers.remove('Authorization');"
                    ],
                    "_lastExecutionId": "ac710d9d-687f-49b1-9cad-3087d7059bbc"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "0cf436fb-8492-4bf1-9859-2b0ba6a6ca53",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Prevents unauthorized access', function () {",
                      "    pm.response.to.have.status(401);",
                      "});"
                    ],
                    "_lastExecutionId": "df22f613-9fe3-481a-a5bd-c698819e07b1"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9c4072e7-7d20-41e1-8302-f64c042dcca2",
          "length": 18,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "5d1159ba-54b9-4209-913c-3e09499ed6a1",
          "scriptId": "0cf436fb-8492-4bf1-9859-2b0ba6a6ca53",
          "execution": "df22f613-9fe3-481a-a5bd-c698819e07b1"
        }
      }
    ],
    "error": null
  }
}