# 프론트엔드 웹 애플리케이션용 Dockerfile
# 멀티 스테이지 빌드 사용

# Stage 1: 빌드 스테이지
FROM node:20-alpine AS builder

# 메타데이터
LABEL maintainer="Online Evaluation System"
LABEL version="1.0.0"
LABEL description="Frontend build stage for Online Evaluation System"

# 작업 디렉터리 설정
WORKDIR /app

# package.json과 yarn.lock 복사
COPY frontend/package.json frontend/yarn.lock* ./

# Yarn 사용 및 캐시 디렉터리 설정
ENV YARN_CACHE_FOLDER=/tmp/yarn-cache
RUN mkdir -p /tmp/yarn-cache && chmod 777 /tmp/yarn-cache

# 의존성 설치 (Yarn 사용)
RUN yarn install --production=false --silent

# 소스코드 복사
COPY frontend/ .

# 환경 변수 설정 (빌드 시점)
ENV REACT_APP_BACKEND_URL=http://localhost:8080
ENV REACT_APP_WS_URL=ws://localhost:8080
ENV NODE_ENV=production

# React 앱 빌드
RUN yarn build

# Stage 2: 프로덕션 스테이지
FROM nginx:alpine

# 메타데이터
LABEL maintainer="Online Evaluation System"
LABEL version="1.0.0"
LABEL description="Production-ready Frontend for Online Evaluation System"

# Nginx 설정 복사
COPY nginx-frontend.conf /etc/nginx/conf.d/default.conf

# 빌드된 React 앱을 Nginx 웹 루트로 복사
COPY --from=builder /app/build /usr/share/nginx/html

# 권한 설정
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chmod -R 755 /usr/share/nginx/html

# 헬스체크 설정
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:80 || exit 1

# 포트 노출
EXPOSE 80

# Nginx 시작
CMD ["nginx", "-g", "daemon off;"]
