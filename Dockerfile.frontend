# 멀티스테이지 빌드를 위한 최적화된 프론트엔드 Dockerfile

# Stage 1: Base Node.js image
FROM node:20-alpine AS base

# 메타데이터
LABEL maintainer="Online Evaluation System"
LABEL version="2.0.0"
LABEL description="Production-ready Frontend for Online Evaluation System"

# 시스템 패키지 업데이트 및 기본 도구 설치
RUN apk update && apk add --no-cache \
    curl \
    dumb-init \
    && rm -rf /var/cache/apk/*

# 작업 디렉터리 설정
WORKDIR /app

# Node.js 최적화 설정
ENV NODE_ENV=development \
    NPM_CONFIG_LOGLEVEL=warn \
    NPM_CONFIG_COLOR=false

# Stage 2: Development image
FROM base AS development

# 개발 도구 설치
RUN apk add --no-cache \
    git \
    vim \
    bash

# 패키지 파일 복사
COPY frontend/package.json frontend/yarn.lock* ./

# 의존성 설치 (개발 의존성 포함)
RUN yarn install --frozen-lockfile --silent

# 소스코드 복사 (개발 시에는 볼륨 마운트 사용)
COPY frontend/ .

# 개발 환경 변수
ENV REACT_APP_BACKEND_URL=http://localhost:8080 \
    REACT_APP_WS_URL=ws://localhost:8080 \
    CHOKIDAR_USEPOLLING=true \
    WATCHPACK_POLLING=true \
    FAST_REFRESH=true

# 개발 서버 포트 노출
EXPOSE 3000

# 개발 서버 시작
CMD ["yarn", "start"]

# Stage 3: Dependencies installation
FROM base AS deps

# 패키지 파일 복사
COPY frontend/package.json frontend/yarn.lock* ./

# 프로덕션 의존성만 설치
RUN yarn install --production --frozen-lockfile --silent \
    && yarn cache clean

# Stage 4: Build stage
FROM base AS builder

# 빌드에 필요한 의존성 복사
COPY --from=deps /app/node_modules ./node_modules

# 소스코드 복사
COPY frontend/ .

# 빌드 시 환경 변수 설정
ARG REACT_APP_BACKEND_URL=http://localhost:8080
ARG REACT_APP_WS_URL=ws://localhost:8080
ARG REACT_APP_ENV=production

ENV REACT_APP_BACKEND_URL=$REACT_APP_BACKEND_URL \
    REACT_APP_WS_URL=$REACT_APP_WS_URL \
    REACT_APP_ENV=$REACT_APP_ENV \
    NODE_ENV=production \
    GENERATE_SOURCEMAP=false \
    INLINE_RUNTIME_CHUNK=false

# React 앱 빌드
RUN yarn build \
    && yarn cache clean

# 빌드 결과 최적화
RUN find build -name "*.js" -exec gzip -k {} \; \
    && find build -name "*.css" -exec gzip -k {} \; \
    && find build -name "*.html" -exec gzip -k {} \;

# Stage 5: Production image
FROM nginx:alpine AS production

# 보안 강화를 위한 사용자 생성
RUN addgroup -g 1000 -S nginx-app \
    && adduser -u 1000 -D -S -G nginx-app nginx-app

# Nginx 설정 파일 복사
COPY nginx-frontend.conf /etc/nginx/conf.d/default.conf

# Nginx 기본 설정 제거
RUN rm -f /etc/nginx/conf.d/default.conf.bak

# 빌드된 React 앱을 Nginx 웹 루트로 복사
COPY --from=builder /app/build /usr/share/nginx/html

# 정적 파일 권한 설정
RUN chown -R nginx-app:nginx-app /usr/share/nginx/html \
    && chmod -R 755 /usr/share/nginx/html \
    && chmod -R 644 /usr/share/nginx/html/*

# Nginx 설정 검증
RUN nginx -t

# 캐시 및 로그 디렉터리 생성
RUN mkdir -p /var/cache/nginx/client_temp \
    && mkdir -p /var/log/nginx \
    && chown -R nginx-app:nginx-app /var/cache/nginx \
    && chown -R nginx-app:nginx-app /var/log/nginx

# 헬스체크 설정 (향상된 체크)
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:80/health || wget --no-verbose --tries=1 --spider http://localhost:80/health || exit 1

# 포트 노출
EXPOSE 80

# 비루트 사용자로 실행
USER nginx-app

# dumb-init을 사용하여 프로세스 관리 개선
ENTRYPOINT ["dumb-init", "--"]

# Nginx 시작
CMD ["nginx", "-g", "daemon off;"]

# Stage 6: Testing image (선택적)
FROM development AS testing

# 테스트 도구 추가 설치
RUN yarn add --dev \
    @testing-library/jest-dom \
    @testing-library/react \
    @testing-library/user-event \
    jest-environment-jsdom

# 테스트 실행 명령
CMD ["yarn", "test", "--coverage", "--watchAll=false"]
